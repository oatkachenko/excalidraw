{
  "version": 3,
  "sources": ["<define:import.meta.env>", "../../../../node_modules/es6-promise-pool/es6-promise-pool.js", "../../../../node_modules/@braintree/sanitize-url/dist/index.js", "../../../../node_modules/lodash.throttle/index.js", "../../src/index.ts", "../../src/sizeHelpers.ts", "../../../common/src/index.ts", "../../../common/src/binary-heap.ts", "../../../common/src/colors.ts", "../../../../node_modules/open-color/open-color.json", "../../../common/src/constants.ts", "../../../common/src/font-metadata.ts", "../../../common/src/queue.ts", "../../../common/src/keys.ts", "../../../common/src/points.ts", "../../../math/src/index.ts", "../../../math/src/angle.ts", "../../../math/src/utils.ts", "../../../math/src/curve.ts", "../../../math/src/point.ts", "../../../math/src/vector.ts", "../../../math/src/rectangle.ts", "../../../math/src/segment.ts", "../../../math/src/line.ts", "../../../math/src/polygon.ts", "../../../math/src/range.ts", "../../../math/src/triangle.ts", "../../../math/src/types.ts", "../../../common/src/promise-pool.ts", "../../../common/src/random.ts", "../../../../node_modules/roughjs/bin/math.js", "../../../common/src/utils.ts", "../../../common/src/url.ts", "../../src/bounds.ts", "../../../../node_modules/roughjs/bin/rough.js", "../../../../node_modules/roughjs/bin/canvas.js", "../../../../node_modules/roughjs/bin/generator.js", "../../../../node_modules/roughjs/bin/renderer.js", "../../../../node_modules/roughjs/bin/fillers/filler.js", "../../../../node_modules/roughjs/bin/fillers/hachure-filler.js", "../../../../node_modules/roughjs/bin/fillers/scan-line-hachure.js", "../../../../node_modules/hachure-fill/bin/hachure.js", "../../../../node_modules/roughjs/bin/fillers/zigzag-filler.js", "../../../../node_modules/roughjs/bin/geometry.js", "../../../../node_modules/roughjs/bin/fillers/hatch-filler.js", "../../../../node_modules/roughjs/bin/fillers/dot-filler.js", "../../../../node_modules/roughjs/bin/fillers/dashed-filler.js", "../../../../node_modules/roughjs/bin/fillers/zigzag-line-filler.js", "../../../../node_modules/path-data-parser/lib/index.js", "../../../../node_modules/path-data-parser/lib/parser.js", "../../../../node_modules/path-data-parser/lib/absolutize.js", "../../../../node_modules/path-data-parser/lib/normalize.js", "../../../../node_modules/points-on-curve/lib/curve-to-bezier.js", "../../../../node_modules/points-on-curve/lib/index.js", "../../../../node_modules/points-on-path/lib/index.js", "../../../../node_modules/roughjs/bin/svg.js", "../../../../node_modules/roughjs/bin/core.js", "../../../utils/src/shape.ts", "../../src/ShapeCache.ts", "../../src/Shape.ts", "../../src/typeChecks.ts", "../../src/shapes.ts", "../../src/collision.ts", "../../../math/src/ellipse.ts", "../../../utils/src/collision.ts", "../../src/utils.ts", "../../src/linearElementEditor.ts", "../../../excalidraw/scene/Scene.ts", "../../src/groups.ts", "../../src/textElement.ts", "../../src/containerCache.ts", "../../src/mutateElement.ts", "../../src/elbowArrow.ts", "../../src/binding.ts", "../../src/distance.ts", "../../src/heading.ts", "../../src/textMeasurements.ts", "../../src/textWrapping.ts", "../../src/selection.ts", "../../src/frame.ts", "../../../utils/src/bbox.ts", "../../../utils/src/withinBounds.ts", "../../src/fractionalIndex.ts", "../../../../node_modules/fractional-indexing/src/index.js", "../../src/comparisons.ts", "../../src/renderElement.ts", "../../../../node_modules/perfect-freehand/dist/esm/index.js", "../../src/cropElement.ts"],
  "sourcesContent": ["", "(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define([], factory)\n  } else if (typeof exports === 'object') {\n    module.exports = factory()\n  } else {\n    root.PromisePool = factory()\n    // Legacy API\n    root.promisePool = root.PromisePool\n  }\n})(this, function () {\n  'use strict'\n\n  var EventTarget = function () {\n    this._listeners = {}\n  }\n\n  EventTarget.prototype.addEventListener = function (type, listener) {\n    this._listeners[type] = this._listeners[type] || []\n    if (this._listeners[type].indexOf(listener) < 0) {\n      this._listeners[type].push(listener)\n    }\n  }\n\n  EventTarget.prototype.removeEventListener = function (type, listener) {\n    if (this._listeners[type]) {\n      var p = this._listeners[type].indexOf(listener)\n      if (p >= 0) {\n        this._listeners[type].splice(p, 1)\n      }\n    }\n  }\n\n  EventTarget.prototype.dispatchEvent = function (evt) {\n    if (this._listeners[evt.type] && this._listeners[evt.type].length) {\n      var listeners = this._listeners[evt.type].slice()\n      for (var i = 0, l = listeners.length; i < l; ++i) {\n        listeners[i].call(this, evt)\n      }\n    }\n  }\n\n  var isGenerator = function (func) {\n    return (typeof func.constructor === 'function' &&\n      func.constructor.name === 'GeneratorFunction')\n  }\n\n  var functionToIterator = function (func) {\n    return {\n      next: function () {\n        var promise = func()\n        return promise ? {value: promise} : {done: true}\n      }\n    }\n  }\n\n  var promiseToIterator = function (promise) {\n    var called = false\n    return {\n      next: function () {\n        if (called) {\n          return {done: true}\n        }\n        called = true\n        return {value: promise}\n      }\n    }\n  }\n\n  var toIterator = function (obj, Promise) {\n    var type = typeof obj\n    if (type === 'object') {\n      if (typeof obj.next === 'function') {\n        return obj\n      }\n      /* istanbul ignore else */\n      if (typeof obj.then === 'function') {\n        return promiseToIterator(obj)\n      }\n    }\n    if (type === 'function') {\n      return isGenerator(obj) ? obj() : functionToIterator(obj)\n    }\n    return promiseToIterator(Promise.resolve(obj))\n  }\n\n  var PromisePoolEvent = function (target, type, data) {\n    this.target = target\n    this.type = type\n    this.data = data\n  }\n\n  var PromisePool = function (source, concurrency, options) {\n    EventTarget.call(this)\n    if (typeof concurrency !== 'number' ||\n        Math.floor(concurrency) !== concurrency ||\n        concurrency < 1) {\n      throw new Error('Invalid concurrency')\n    }\n    this._concurrency = concurrency\n    this._options = options || {}\n    this._options.promise = this._options.promise || Promise\n    this._iterator = toIterator(source, this._options.promise)\n    this._done = false\n    this._size = 0\n    this._promise = null\n    this._callbacks = null\n  }\n  PromisePool.prototype = new EventTarget()\n  PromisePool.prototype.constructor = PromisePool\n\n  PromisePool.prototype.concurrency = function (value) {\n    if (typeof value !== 'undefined') {\n      this._concurrency = value\n      if (this.active()) {\n        this._proceed()\n      }\n    }\n    return this._concurrency\n  }\n\n  PromisePool.prototype.size = function () {\n    return this._size\n  }\n\n  PromisePool.prototype.active = function () {\n    return !!this._promise\n  }\n\n  PromisePool.prototype.promise = function () {\n    return this._promise\n  }\n\n  PromisePool.prototype.start = function () {\n    var that = this\n    var Promise = this._options.promise\n    this._promise = new Promise(function (resolve, reject) {\n      that._callbacks = {\n        reject: reject,\n        resolve: resolve\n      }\n      that._proceed()\n    })\n    return this._promise\n  }\n\n  PromisePool.prototype._fireEvent = function (type, data) {\n    this.dispatchEvent(new PromisePoolEvent(this, type, data))\n  }\n\n  PromisePool.prototype._settle = function (error) {\n    if (error) {\n      this._callbacks.reject(error)\n    } else {\n      this._callbacks.resolve()\n    }\n    this._promise = null\n    this._callbacks = null\n  }\n\n  PromisePool.prototype._onPooledPromiseFulfilled = function (promise, result) {\n    this._size--\n    if (this.active()) {\n      this._fireEvent('fulfilled', {\n        promise: promise,\n        result: result\n      })\n      this._proceed()\n    }\n  }\n\n  PromisePool.prototype._onPooledPromiseRejected = function (promise, error) {\n    this._size--\n    if (this.active()) {\n      this._fireEvent('rejected', {\n        promise: promise,\n        error: error\n      })\n      this._settle(error || new Error('Unknown error'))\n    }\n  }\n\n  PromisePool.prototype._trackPromise = function (promise) {\n    var that = this\n    promise\n      .then(function (result) {\n        that._onPooledPromiseFulfilled(promise, result)\n      }, function (error) {\n        that._onPooledPromiseRejected(promise, error)\n      })['catch'](function (err) {\n        that._settle(new Error('Promise processing failed: ' + err))\n      })\n  }\n\n  PromisePool.prototype._proceed = function () {\n    if (!this._done) {\n      var result = { done: false }\n      while (this._size < this._concurrency &&\n          !(result = this._iterator.next()).done) {\n        this._size++\n        this._trackPromise(result.value)\n      }\n      this._done = (result === null || !!result.done)\n    }\n    if (this._done && this._size === 0) {\n      this._settle()\n    }\n  }\n\n  PromisePool.PromisePoolEvent = PromisePoolEvent\n  // Legacy API\n  PromisePool.PromisePool = PromisePool\n\n  return PromisePool\n})\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeUrl = void 0;\nvar invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\nvar htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\nvar htmlCtrlEntityRegex = /&(newline|tab);/gi;\nvar ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\nvar urlSchemeRegex = /^.+(:|&colon;)/gim;\nvar relativeFirstCharacters = [\".\", \"/\"];\nfunction isRelativeUrlWithoutProtocol(url) {\n    return relativeFirstCharacters.indexOf(url[0]) > -1;\n}\n// adapted from https://stackoverflow.com/a/29824550/2601552\nfunction decodeHtmlCharacters(str) {\n    return str.replace(htmlEntitiesRegex, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nfunction sanitizeUrl(url) {\n    var sanitizedUrl = decodeHtmlCharacters(url || \"\")\n        .replace(htmlCtrlEntityRegex, \"\")\n        .replace(ctrlCharactersRegex, \"\")\n        .trim();\n    if (!sanitizedUrl) {\n        return \"about:blank\";\n    }\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n        return sanitizedUrl;\n    }\n    var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);\n    if (!urlSchemeParseResults) {\n        return sanitizedUrl;\n    }\n    var urlScheme = urlSchemeParseResults[0];\n    if (invalidProtocolRegex.test(urlScheme)) {\n        return \"about:blank\";\n    }\n    return sanitizedUrl;\n}\nexports.sanitizeUrl = sanitizeUrl;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n", "import { isInvisiblySmallElement } from \"./sizeHelpers\";\nimport { isLinearElementType } from \"./typeChecks\";\n\nimport type {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"./types\";\n\n/**\n * @deprecated unsafe, use hashElementsVersion instead\n */\nexport const getSceneVersion = (elements: readonly ExcalidrawElement[]) =>\n  elements.reduce((acc, el) => acc + el.version, 0);\n\n/**\n * Hashes elements' versionNonce (using djb2 algo). Order of elements matters.\n */\nexport const hashElementsVersion = (\n  elements: readonly ExcalidrawElement[],\n): number => {\n  let hash = 5381;\n  for (let i = 0; i < elements.length; i++) {\n    hash = (hash << 5) + hash + elements[i].versionNonce;\n  }\n  return hash >>> 0; // Ensure unsigned 32-bit integer\n};\n\n// string hash function (using djb2). Not cryptographically secure, use only\n// for versioning and such.\nexport const hashString = (s: string): number => {\n  let hash: number = 5381;\n  for (let i = 0; i < s.length; i++) {\n    const char: number = s.charCodeAt(i);\n    hash = (hash << 5) + hash + char;\n  }\n  return hash >>> 0; // Ensure unsigned 32-bit integer\n};\n\nexport const getVisibleElements = (elements: readonly ExcalidrawElement[]) =>\n  elements.filter(\n    (el) => !el.isDeleted && !isInvisiblySmallElement(el),\n  ) as readonly NonDeletedExcalidrawElement[];\n\nexport const getNonDeletedElements = <T extends ExcalidrawElement>(\n  elements: readonly T[],\n) =>\n  elements.filter((element) => !element.isDeleted) as readonly NonDeleted<T>[];\n\nexport const isNonDeletedElement = <T extends ExcalidrawElement>(\n  element: T,\n): element is NonDeleted<T> => !element.isDeleted;\n\nconst _clearElements = (\n  elements: readonly ExcalidrawElement[],\n): ExcalidrawElement[] =>\n  getNonDeletedElements(elements).map((element) =>\n    isLinearElementType(element.type)\n      ? { ...element, lastCommittedPoint: null }\n      : element,\n  );\n\nexport const clearElementsForDatabase = (\n  elements: readonly ExcalidrawElement[],\n) => _clearElements(elements);\n\nexport const clearElementsForExport = (\n  elements: readonly ExcalidrawElement[],\n) => _clearElements(elements);\n\nexport const clearElementsForLocalStorage = (\n  elements: readonly ExcalidrawElement[],\n) => _clearElements(elements);\n", "import {\n  SHIFT_LOCKING_ANGLE,\n  viewportCoordsToSceneCoords,\n} from \"@excalidraw/common\";\n\nimport type { AppState, Offsets, Zoom } from \"@excalidraw/excalidraw/types\";\n\nimport { getCommonBounds, getElementBounds } from \"./bounds\";\nimport { mutateElement } from \"./mutateElement\";\nimport { isFreeDrawElement, isLinearElement } from \"./typeChecks\";\n\nimport type { ElementsMap, ExcalidrawElement } from \"./types\";\n\n// TODO:  remove invisible elements consistently actions, so that invisible elements are not recorded by the store, exported, broadcasted or persisted\n//        - perhaps could be as part of a standalone 'cleanup' action, in addition to 'finalize'\n//        - could also be part of `_clearElements`\nexport const isInvisiblySmallElement = (\n  element: ExcalidrawElement,\n): boolean => {\n  if (isLinearElement(element) || isFreeDrawElement(element)) {\n    return element.points.length < 2;\n  }\n  return element.width === 0 && element.height === 0;\n};\n\nexport const isElementInViewport = (\n  element: ExcalidrawElement,\n  width: number,\n  height: number,\n  viewTransformations: {\n    zoom: Zoom;\n    offsetLeft: number;\n    offsetTop: number;\n    scrollX: number;\n    scrollY: number;\n  },\n  elementsMap: ElementsMap,\n) => {\n  const [x1, y1, x2, y2] = getElementBounds(element, elementsMap); // scene coordinates\n  const topLeftSceneCoords = viewportCoordsToSceneCoords(\n    {\n      clientX: viewTransformations.offsetLeft,\n      clientY: viewTransformations.offsetTop,\n    },\n    viewTransformations,\n  );\n  const bottomRightSceneCoords = viewportCoordsToSceneCoords(\n    {\n      clientX: viewTransformations.offsetLeft + width,\n      clientY: viewTransformations.offsetTop + height,\n    },\n    viewTransformations,\n  );\n\n  return (\n    topLeftSceneCoords.x <= x2 &&\n    topLeftSceneCoords.y <= y2 &&\n    bottomRightSceneCoords.x >= x1 &&\n    bottomRightSceneCoords.y >= y1\n  );\n};\n\nexport const isElementCompletelyInViewport = (\n  elements: ExcalidrawElement[],\n  width: number,\n  height: number,\n  viewTransformations: {\n    zoom: Zoom;\n    offsetLeft: number;\n    offsetTop: number;\n    scrollX: number;\n    scrollY: number;\n  },\n  elementsMap: ElementsMap,\n  padding?: Offsets,\n) => {\n  const [x1, y1, x2, y2] = getCommonBounds(elements, elementsMap); // scene coordinates\n  const topLeftSceneCoords = viewportCoordsToSceneCoords(\n    {\n      clientX: viewTransformations.offsetLeft + (padding?.left || 0),\n      clientY: viewTransformations.offsetTop + (padding?.top || 0),\n    },\n    viewTransformations,\n  );\n  const bottomRightSceneCoords = viewportCoordsToSceneCoords(\n    {\n      clientX: viewTransformations.offsetLeft + width - (padding?.right || 0),\n      clientY: viewTransformations.offsetTop + height - (padding?.bottom || 0),\n    },\n    viewTransformations,\n  );\n\n  return (\n    x1 >= topLeftSceneCoords.x &&\n    y1 >= topLeftSceneCoords.y &&\n    x2 <= bottomRightSceneCoords.x &&\n    y2 <= bottomRightSceneCoords.y\n  );\n};\n\n/**\n * Makes a perfect shape or diagonal/horizontal/vertical line\n */\nexport const getPerfectElementSize = (\n  elementType: AppState[\"activeTool\"][\"type\"],\n  width: number,\n  height: number,\n): { width: number; height: number } => {\n  const absWidth = Math.abs(width);\n  const absHeight = Math.abs(height);\n\n  if (\n    elementType === \"line\" ||\n    elementType === \"arrow\" ||\n    elementType === \"freedraw\"\n  ) {\n    const lockedAngle =\n      Math.round(Math.atan(absHeight / absWidth) / SHIFT_LOCKING_ANGLE) *\n      SHIFT_LOCKING_ANGLE;\n    if (lockedAngle === 0) {\n      height = 0;\n    } else if (lockedAngle === Math.PI / 2) {\n      width = 0;\n    } else {\n      height = absWidth * Math.tan(lockedAngle) * Math.sign(height) || height;\n    }\n  } else if (elementType !== \"selection\") {\n    height = absWidth * Math.sign(height);\n  }\n  return { width, height };\n};\n\nexport const getLockedLinearCursorAlignSize = (\n  originX: number,\n  originY: number,\n  x: number,\n  y: number,\n) => {\n  let width = x - originX;\n  let height = y - originY;\n\n  const lockedAngle =\n    Math.round(Math.atan(height / width) / SHIFT_LOCKING_ANGLE) *\n    SHIFT_LOCKING_ANGLE;\n\n  if (lockedAngle === 0) {\n    height = 0;\n  } else if (lockedAngle === Math.PI / 2) {\n    width = 0;\n  } else {\n    // locked angle line, y = mx + b => mx - y + b = 0\n    const a1 = Math.tan(lockedAngle);\n    const b1 = -1;\n    const c1 = originY - a1 * originX;\n\n    // line through cursor, perpendicular to locked angle line\n    const a2 = -1 / a1;\n    const b2 = -1;\n    const c2 = y - a2 * x;\n\n    // intersection of the two lines above\n    const intersectX = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n    const intersectY = (c1 * a2 - c2 * a1) / (a1 * b2 - a2 * b1);\n\n    // delta\n    width = intersectX - originX;\n    height = intersectY - originY;\n  }\n\n  return { width, height };\n};\n\nexport const resizePerfectLineForNWHandler = (\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n) => {\n  const anchorX = element.x + element.width;\n  const anchorY = element.y + element.height;\n  const distanceToAnchorX = x - anchorX;\n  const distanceToAnchorY = y - anchorY;\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\n    mutateElement(element, {\n      x: anchorX,\n      width: 0,\n      y,\n      height: -distanceToAnchorY,\n    });\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\n    mutateElement(element, {\n      y: anchorY,\n      height: 0,\n    });\n  } else {\n    const nextHeight =\n      Math.sign(distanceToAnchorY) *\n      Math.sign(distanceToAnchorX) *\n      element.width;\n    mutateElement(element, {\n      x,\n      y: anchorY - nextHeight,\n      width: -distanceToAnchorX,\n      height: nextHeight,\n    });\n  }\n};\n\nexport const getNormalizedDimensions = (\n  element: Pick<ExcalidrawElement, \"width\" | \"height\" | \"x\" | \"y\">,\n): {\n  width: ExcalidrawElement[\"width\"];\n  height: ExcalidrawElement[\"height\"];\n  x: ExcalidrawElement[\"x\"];\n  y: ExcalidrawElement[\"y\"];\n} => {\n  const ret = {\n    width: element.width,\n    height: element.height,\n    x: element.x,\n    y: element.y,\n  };\n\n  if (element.width < 0) {\n    const nextWidth = Math.abs(element.width);\n    ret.width = nextWidth;\n    ret.x = element.x - nextWidth;\n  }\n\n  if (element.height < 0) {\n    const nextHeight = Math.abs(element.height);\n    ret.height = nextHeight;\n    ret.y = element.y - nextHeight;\n  }\n\n  return ret;\n};\n", "export * from \"./binary-heap\";\nexport * from \"./colors\";\nexport * from \"./constants\";\nexport * from \"./font-metadata\";\nexport * from \"./queue\";\nexport * from \"./keys\";\nexport * from \"./points\";\nexport * from \"./promise-pool\";\nexport * from \"./random\";\nexport * from \"./url\";\nexport * from \"./utils\";\n", "export class BinaryHeap<T> {\n  private content: T[] = [];\n\n  constructor(private scoreFunction: (node: T) => number) {}\n\n  sinkDown(idx: number) {\n    const node = this.content[idx];\n    while (idx > 0) {\n      const parentN = ((idx + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n      if (this.scoreFunction(node) < this.scoreFunction(parent)) {\n        this.content[parentN] = node;\n        this.content[idx] = parent;\n        idx = parentN; // TODO: Optimize\n      } else {\n        break;\n      }\n    }\n  }\n\n  bubbleUp(idx: number) {\n    const length = this.content.length;\n    const node = this.content[idx];\n    const score = this.scoreFunction(node);\n\n    while (true) {\n      const child2N = (idx + 1) << 1;\n      const child1N = child2N - 1;\n      let swap = null;\n      let child1Score = 0;\n\n      if (child1N < length) {\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n        if (child1Score < score) {\n          swap = child1N;\n        }\n      }\n\n      if (child2N < length) {\n        const child2 = this.content[child2N];\n        const child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? score : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      if (swap !== null) {\n        this.content[idx] = this.content[swap];\n        this.content[swap] = node;\n        idx = swap; // TODO: Optimize\n      } else {\n        break;\n      }\n    }\n  }\n\n  push(node: T) {\n    this.content.push(node);\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop(): T | null {\n    if (this.content.length === 0) {\n      return null;\n    }\n\n    const result = this.content[0];\n    const end = this.content.pop()!;\n\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n\n    return result;\n  }\n\n  remove(node: T) {\n    if (this.content.length === 0) {\n      return;\n    }\n\n    const i = this.content.indexOf(node);\n    const end = this.content.pop()!;\n\n    if (i < this.content.length) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size(): number {\n    return this.content.length;\n  }\n\n  rescoreElement(node: T) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n}\n", "import oc from \"open-color\";\n\nimport type { Merge } from \"./utility-types\";\n\n// FIXME can't put to utils.ts rn because of circular dependency\nconst pick = <R extends Record<string, any>, K extends readonly (keyof R)[]>(\n  source: R,\n  keys: K,\n) => {\n  return keys.reduce((acc, key: K[number]) => {\n    if (key in source) {\n      acc[key] = source[key];\n    }\n    return acc;\n  }, {} as Pick<R, K[number]>) as Pick<R, K[number]>;\n};\n\nexport type ColorPickerColor =\n  | Exclude<keyof oc, \"indigo\" | \"lime\">\n  | \"transparent\"\n  | \"bronze\";\nexport type ColorTuple = readonly [string, string, string, string, string];\nexport type ColorPalette = Merge<\n  Record<ColorPickerColor, ColorTuple>,\n  { black: \"#1e1e1e\"; white: \"#ffffff\"; transparent: \"transparent\" }\n>;\n\n// used general type instead of specific type (ColorPalette) to support custom colors\nexport type ColorPaletteCustom = { [key: string]: ColorTuple | string };\nexport type ColorShadesIndexes = [number, number, number, number, number];\n\nexport const MAX_CUSTOM_COLORS_USED_IN_CANVAS = 5;\nexport const COLORS_PER_ROW = 5;\n\nexport const DEFAULT_CHART_COLOR_INDEX = 4;\n\nexport const DEFAULT_ELEMENT_STROKE_COLOR_INDEX = 4;\nexport const DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX = 1;\nexport const ELEMENTS_PALETTE_SHADE_INDEXES = [0, 2, 4, 6, 8] as const;\nexport const CANVAS_PALETTE_SHADE_INDEXES = [0, 1, 2, 3, 4] as const;\n\nexport const getSpecificColorShades = (\n  color: Exclude<\n    ColorPickerColor,\n    \"transparent\" | \"white\" | \"black\" | \"bronze\"\n  >,\n  indexArr: Readonly<ColorShadesIndexes>,\n) => {\n  return indexArr.map((index) => oc[color][index]) as any as ColorTuple;\n};\n\nexport const COLOR_PALETTE = {\n  transparent: \"transparent\",\n  black: \"#1e1e1e\",\n  white: \"#ffffff\",\n  // open-colors\n  gray: getSpecificColorShades(\"gray\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  red: getSpecificColorShades(\"red\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  pink: getSpecificColorShades(\"pink\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  grape: getSpecificColorShades(\"grape\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  violet: getSpecificColorShades(\"violet\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  blue: getSpecificColorShades(\"blue\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  cyan: getSpecificColorShades(\"cyan\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  teal: getSpecificColorShades(\"teal\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  green: getSpecificColorShades(\"green\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  yellow: getSpecificColorShades(\"yellow\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  orange: getSpecificColorShades(\"orange\", ELEMENTS_PALETTE_SHADE_INDEXES),\n  // radix bronze shades 3,5,7,9,11\n  bronze: [\"#f8f1ee\", \"#eaddd7\", \"#d2bab0\", \"#a18072\", \"#846358\"],\n} as ColorPalette;\n\nconst COMMON_ELEMENT_SHADES = pick(COLOR_PALETTE, [\n  \"cyan\",\n  \"blue\",\n  \"violet\",\n  \"grape\",\n  \"pink\",\n  \"green\",\n  \"teal\",\n  \"yellow\",\n  \"orange\",\n  \"red\",\n]);\n\n// -----------------------------------------------------------------------------\n// quick picks defaults\n// -----------------------------------------------------------------------------\n\n// ORDER matters for positioning in quick picker\nexport const DEFAULT_ELEMENT_STROKE_PICKS = [\n  COLOR_PALETTE.black,\n  COLOR_PALETTE.red[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],\n  COLOR_PALETTE.green[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],\n  COLOR_PALETTE.blue[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],\n  COLOR_PALETTE.yellow[DEFAULT_ELEMENT_STROKE_COLOR_INDEX],\n] as ColorTuple;\n\n// ORDER matters for positioning in quick picker\nexport const DEFAULT_ELEMENT_BACKGROUND_PICKS = [\n  COLOR_PALETTE.transparent,\n  COLOR_PALETTE.red[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],\n  COLOR_PALETTE.green[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],\n  COLOR_PALETTE.blue[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],\n  COLOR_PALETTE.yellow[DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX],\n] as ColorTuple;\n\n// ORDER matters for positioning in quick picker\nexport const DEFAULT_CANVAS_BACKGROUND_PICKS = [\n  COLOR_PALETTE.white,\n  // radix slate2\n  \"#f8f9fa\",\n  // radix blue2\n  \"#f5faff\",\n  // radix yellow2\n  \"#fffce8\",\n  // radix bronze2\n  \"#fdf8f6\",\n] as ColorTuple;\n\n// -----------------------------------------------------------------------------\n// palette defaults\n// -----------------------------------------------------------------------------\n\nexport const DEFAULT_ELEMENT_STROKE_COLOR_PALETTE = {\n  // 1st row\n  transparent: COLOR_PALETTE.transparent,\n  white: COLOR_PALETTE.white,\n  gray: COLOR_PALETTE.gray,\n  black: COLOR_PALETTE.black,\n  bronze: COLOR_PALETTE.bronze,\n  // rest\n  ...COMMON_ELEMENT_SHADES,\n} as const;\n\n// ORDER matters for positioning in pallete (5x3 grid)s\nexport const DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE = {\n  transparent: COLOR_PALETTE.transparent,\n  white: COLOR_PALETTE.white,\n  gray: COLOR_PALETTE.gray,\n  black: COLOR_PALETTE.black,\n  bronze: COLOR_PALETTE.bronze,\n\n  ...COMMON_ELEMENT_SHADES,\n} as const;\n\n// -----------------------------------------------------------------------------\n// helpers\n// -----------------------------------------------------------------------------\n\n// !!!MUST BE WITHOUT GRAY, TRANSPARENT AND BLACK!!!\nexport const getAllColorsSpecificShade = (index: 0 | 1 | 2 | 3 | 4) =>\n  [\n    // 2nd row\n    COLOR_PALETTE.cyan[index],\n    COLOR_PALETTE.blue[index],\n    COLOR_PALETTE.violet[index],\n    COLOR_PALETTE.grape[index],\n    COLOR_PALETTE.pink[index],\n\n    // 3rd row\n    COLOR_PALETTE.green[index],\n    COLOR_PALETTE.teal[index],\n    COLOR_PALETTE.yellow[index],\n    COLOR_PALETTE.orange[index],\n    COLOR_PALETTE.red[index],\n  ] as const;\n\nexport const rgbToHex = (r: number, g: number, b: number) =>\n  `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n\n// -----------------------------------------------------------------------------\n", "{\n  \"white\": \"#ffffff\",\n  \"black\": \"#000000\",\n  \"gray\": [\n    \"#f8f9fa\",\n    \"#f1f3f5\",\n    \"#e9ecef\",\n    \"#dee2e6\",\n    \"#ced4da\",\n    \"#adb5bd\",\n    \"#868e96\",\n    \"#495057\",\n    \"#343a40\",\n    \"#212529\"\n  ],\n  \"red\": [\n    \"#fff5f5\",\n    \"#ffe3e3\",\n    \"#ffc9c9\",\n    \"#ffa8a8\",\n    \"#ff8787\",\n    \"#ff6b6b\",\n    \"#fa5252\",\n    \"#f03e3e\",\n    \"#e03131\",\n    \"#c92a2a\"\n  ],\n  \"pink\": [\n    \"#fff0f6\",\n    \"#ffdeeb\",\n    \"#fcc2d7\",\n    \"#faa2c1\",\n    \"#f783ac\",\n    \"#f06595\",\n    \"#e64980\",\n    \"#d6336c\",\n    \"#c2255c\",\n    \"#a61e4d\"\n  ],\n  \"grape\": [\n    \"#f8f0fc\",\n    \"#f3d9fa\",\n    \"#eebefa\",\n    \"#e599f7\",\n    \"#da77f2\",\n    \"#cc5de8\",\n    \"#be4bdb\",\n    \"#ae3ec9\",\n    \"#9c36b5\",\n    \"#862e9c\"\n  ],\n  \"violet\": [\n    \"#f3f0ff\",\n    \"#e5dbff\",\n    \"#d0bfff\",\n    \"#b197fc\",\n    \"#9775fa\",\n    \"#845ef7\",\n    \"#7950f2\",\n    \"#7048e8\",\n    \"#6741d9\",\n    \"#5f3dc4\"\n  ],\n  \"indigo\": [\n    \"#edf2ff\",\n    \"#dbe4ff\",\n    \"#bac8ff\",\n    \"#91a7ff\",\n    \"#748ffc\",\n    \"#5c7cfa\",\n    \"#4c6ef5\",\n    \"#4263eb\",\n    \"#3b5bdb\",\n    \"#364fc7\"\n  ],\n  \"blue\": [\n    \"#e7f5ff\",\n    \"#d0ebff\",\n    \"#a5d8ff\",\n    \"#74c0fc\",\n    \"#4dabf7\",\n    \"#339af0\",\n    \"#228be6\",\n    \"#1c7ed6\",\n    \"#1971c2\",\n    \"#1864ab\"\n  ],\n  \"cyan\": [\n    \"#e3fafc\",\n    \"#c5f6fa\",\n    \"#99e9f2\",\n    \"#66d9e8\",\n    \"#3bc9db\",\n    \"#22b8cf\",\n    \"#15aabf\",\n    \"#1098ad\",\n    \"#0c8599\",\n    \"#0b7285\"\n  ],\n  \"teal\": [\n    \"#e6fcf5\",\n    \"#c3fae8\",\n    \"#96f2d7\",\n    \"#63e6be\",\n    \"#38d9a9\",\n    \"#20c997\",\n    \"#12b886\",\n    \"#0ca678\",\n    \"#099268\",\n    \"#087f5b\"\n  ],\n  \"green\": [\n    \"#ebfbee\",\n    \"#d3f9d8\",\n    \"#b2f2bb\",\n    \"#8ce99a\",\n    \"#69db7c\",\n    \"#51cf66\",\n    \"#40c057\",\n    \"#37b24d\",\n    \"#2f9e44\",\n    \"#2b8a3e\"\n  ],\n  \"lime\": [\n    \"#f4fce3\",\n    \"#e9fac8\",\n    \"#d8f5a2\",\n    \"#c0eb75\",\n    \"#a9e34b\",\n    \"#94d82d\",\n    \"#82c91e\",\n    \"#74b816\",\n    \"#66a80f\",\n    \"#5c940d\"\n  ],\n  \"yellow\": [\n    \"#fff9db\",\n    \"#fff3bf\",\n    \"#ffec99\",\n    \"#ffe066\",\n    \"#ffd43b\",\n    \"#fcc419\",\n    \"#fab005\",\n    \"#f59f00\",\n    \"#f08c00\",\n    \"#e67700\"\n  ],\n  \"orange\": [\n    \"#fff4e6\",\n    \"#ffe8cc\",\n    \"#ffd8a8\",\n    \"#ffc078\",\n    \"#ffa94d\",\n    \"#ff922b\",\n    \"#fd7e14\",\n    \"#f76707\",\n    \"#e8590c\",\n    \"#d9480f\"\n  ]\n}", "import type {\n  ExcalidrawElement,\n  FontFamilyValues,\n} from \"@excalidraw/element/types\";\nimport type { AppProps, AppState } from \"@excalidraw/excalidraw/types\";\n\nimport { COLOR_PALETTE } from \"./colors\";\n\nexport const isDarwin = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nexport const isWindows = /^Win/.test(navigator.platform);\nexport const isAndroid = /\\b(android)\\b/i.test(navigator.userAgent);\nexport const isFirefox =\n  \"netscape\" in window &&\n  navigator.userAgent.indexOf(\"rv:\") > 1 &&\n  navigator.userAgent.indexOf(\"Gecko\") > 1;\nexport const isChrome = navigator.userAgent.indexOf(\"Chrome\") !== -1;\nexport const isSafari =\n  !isChrome && navigator.userAgent.indexOf(\"Safari\") !== -1;\nexport const isIOS =\n  /iPad|iPhone/.test(navigator.platform) ||\n  // iPadOS 13+\n  (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document);\n// keeping function so it can be mocked in test\nexport const isBrave = () =>\n  (navigator as any).brave?.isBrave?.name === \"isBrave\";\n\nexport const supportsResizeObserver =\n  typeof window !== \"undefined\" && \"ResizeObserver\" in window;\n\nexport const APP_NAME = \"Excalidraw\";\n\n// distance when creating text before it's considered `autoResize: false`\n// we're using higher threshold so that clicks that end up being drags\n// don't unintentionally create text elements that are wrapped to a few chars\n// (happens a lot with fast clicks with the text tool)\nexport const TEXT_AUTOWRAP_THRESHOLD = 36; // px\nexport const DRAGGING_THRESHOLD = 10; // px\nexport const LINE_CONFIRM_THRESHOLD = 8; // px\nexport const ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nexport const ELEMENT_TRANSLATE_AMOUNT = 1;\nexport const TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\nexport const SHIFT_LOCKING_ANGLE = Math.PI / 12;\nexport const DEFAULT_LASER_COLOR = \"red\";\nexport const CURSOR_TYPE = {\n  TEXT: \"text\",\n  CROSSHAIR: \"crosshair\",\n  GRABBING: \"grabbing\",\n  GRAB: \"grab\",\n  POINTER: \"pointer\",\n  MOVE: \"move\",\n  AUTO: \"\",\n};\nexport const POINTER_BUTTON = {\n  MAIN: 0,\n  WHEEL: 1,\n  SECONDARY: 2,\n  TOUCH: -1,\n  ERASER: 5,\n} as const;\n\nexport const POINTER_EVENTS = {\n  enabled: \"all\",\n  disabled: \"none\",\n  // asserted as any so it can be freely assigned to React Element\n  // \"pointerEnvets\" CSS prop\n  inheritFromUI: \"var(--ui-pointerEvents)\" as any,\n} as const;\n\nexport enum EVENT {\n  COPY = \"copy\",\n  PASTE = \"paste\",\n  CUT = \"cut\",\n  KEYDOWN = \"keydown\",\n  KEYUP = \"keyup\",\n  MOUSE_MOVE = \"mousemove\",\n  RESIZE = \"resize\",\n  UNLOAD = \"unload\",\n  FOCUS = \"focus\",\n  BLUR = \"blur\",\n  DRAG_OVER = \"dragover\",\n  DROP = \"drop\",\n  GESTURE_END = \"gestureend\",\n  BEFORE_UNLOAD = \"beforeunload\",\n  GESTURE_START = \"gesturestart\",\n  GESTURE_CHANGE = \"gesturechange\",\n  POINTER_MOVE = \"pointermove\",\n  POINTER_DOWN = \"pointerdown\",\n  POINTER_UP = \"pointerup\",\n  STATE_CHANGE = \"statechange\",\n  WHEEL = \"wheel\",\n  TOUCH_START = \"touchstart\",\n  TOUCH_END = \"touchend\",\n  HASHCHANGE = \"hashchange\",\n  VISIBILITY_CHANGE = \"visibilitychange\",\n  SCROLL = \"scroll\",\n  // custom events\n  EXCALIDRAW_LINK = \"excalidraw-link\",\n  MENU_ITEM_SELECT = \"menu.itemSelect\",\n  MESSAGE = \"message\",\n  FULLSCREENCHANGE = \"fullscreenchange\",\n}\n\nexport const YOUTUBE_STATES = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5,\n} as const;\n\nexport const ENV = {\n  TEST: \"test\",\n  DEVELOPMENT: \"development\",\n};\n\nexport const CLASSES = {\n  SHAPE_ACTIONS_MENU: \"App-menu__left\",\n  ZOOM_ACTIONS: \"zoom-actions\",\n  SEARCH_MENU_INPUT_WRAPPER: \"layer-ui__search-inputWrapper\",\n};\n\nexport const CJK_HAND_DRAWN_FALLBACK_FONT = \"Xiaolai\";\nexport const WINDOWS_EMOJI_FALLBACK_FONT = \"Segoe UI Emoji\";\n\n/**\n * // TODO: shouldn't be really `const`, likely neither have integers as values, due to value for the custom fonts, which should likely be some hash.\n *\n * Let's think this through and consider:\n * - https://developer.mozilla.org/en-US/docs/Web/CSS/generic-family\n * - https://drafts.csswg.org/css-fonts-4/#font-family-prop\n * - https://learn.microsoft.com/en-us/typography/opentype/spec/ibmfc\n */\nexport const FONT_FAMILY = {\n  Virgil: 1,\n  Helvetica: 2,\n  Cascadia: 3,\n  // leave 4 unused as it was historically used for Assistant (which we don't use anymore) or custom font (Obsidian)\n  Excalifont: 5,\n  Nunito: 6,\n  \"Lilita One\": 7,\n  \"Comic Shanns\": 8,\n  \"Liberation Sans\": 9,\n};\n\nexport const FONT_FAMILY_FALLBACKS = {\n  [CJK_HAND_DRAWN_FALLBACK_FONT]: 100,\n  [WINDOWS_EMOJI_FALLBACK_FONT]: 1000,\n};\n\nexport const getFontFamilyFallbacks = (\n  fontFamily: number,\n): Array<keyof typeof FONT_FAMILY_FALLBACKS> => {\n  switch (fontFamily) {\n    case FONT_FAMILY.Excalifont:\n      return [CJK_HAND_DRAWN_FALLBACK_FONT, WINDOWS_EMOJI_FALLBACK_FONT];\n    default:\n      return [WINDOWS_EMOJI_FALLBACK_FONT];\n  }\n};\n\nexport const THEME = {\n  LIGHT: \"light\",\n  DARK: \"dark\",\n} as const;\n\nexport const FRAME_STYLE = {\n  strokeColor: \"#bbb\" as ExcalidrawElement[\"strokeColor\"],\n  strokeWidth: 2 as ExcalidrawElement[\"strokeWidth\"],\n  strokeStyle: \"solid\" as ExcalidrawElement[\"strokeStyle\"],\n  fillStyle: \"solid\" as ExcalidrawElement[\"fillStyle\"],\n  roughness: 0 as ExcalidrawElement[\"roughness\"],\n  roundness: null as ExcalidrawElement[\"roundness\"],\n  backgroundColor: \"transparent\" as ExcalidrawElement[\"backgroundColor\"],\n  radius: 8,\n  nameOffsetY: 3,\n  nameColorLightTheme: \"#999999\",\n  nameColorDarkTheme: \"#7a7a7a\",\n  nameFontSize: 14,\n  nameLineHeight: 1.25,\n};\n\nexport const MIN_FONT_SIZE = 1;\nexport const DEFAULT_FONT_SIZE = 20;\nexport const DEFAULT_FONT_FAMILY: FontFamilyValues = FONT_FAMILY.Excalifont;\nexport const DEFAULT_TEXT_ALIGN = \"left\";\nexport const DEFAULT_VERTICAL_ALIGN = \"top\";\nexport const DEFAULT_VERSION = \"{version}\";\nexport const DEFAULT_TRANSFORM_HANDLE_SPACING = 2;\n\nexport const SIDE_RESIZING_THRESHOLD = 2 * DEFAULT_TRANSFORM_HANDLE_SPACING;\n// a small epsilon to make side resizing always take precedence\n// (avoids an increase in renders and changes to tests)\nexport const EPSILON = 0.00001;\nexport const DEFAULT_COLLISION_THRESHOLD =\n  2 * SIDE_RESIZING_THRESHOLD - EPSILON;\n\nexport const COLOR_WHITE = \"#ffffff\";\nexport const COLOR_CHARCOAL_BLACK = \"#1e1e1e\";\n// keep this in sync with CSS\nexport const COLOR_VOICE_CALL = \"#a2f1a6\";\n\nexport const CANVAS_ONLY_ACTIONS = [\"selectAll\"];\n\nexport const DEFAULT_GRID_SIZE = 20;\nexport const DEFAULT_GRID_STEP = 5;\n\nexport const IMAGE_MIME_TYPES = {\n  svg: \"image/svg+xml\",\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  gif: \"image/gif\",\n  webp: \"image/webp\",\n  bmp: \"image/bmp\",\n  ico: \"image/x-icon\",\n  avif: \"image/avif\",\n  jfif: \"image/jfif\",\n} as const;\n\nexport const MIME_TYPES = {\n  text: \"text/plain\",\n  html: \"text/html\",\n  json: \"application/json\",\n  // excalidraw data\n  excalidraw: \"application/vnd.excalidraw+json\",\n  excalidrawlib: \"application/vnd.excalidrawlib+json\",\n  // image-encoded excalidraw data\n  \"excalidraw.svg\": \"image/svg+xml\",\n  \"excalidraw.png\": \"image/png\",\n  // binary\n  binary: \"application/octet-stream\",\n  // image\n  ...IMAGE_MIME_TYPES,\n} as const;\n\nexport const ALLOWED_PASTE_MIME_TYPES = [\n  MIME_TYPES.text,\n  MIME_TYPES.html,\n  ...Object.values(IMAGE_MIME_TYPES),\n] as const;\n\nexport const EXPORT_IMAGE_TYPES = {\n  png: \"png\",\n  svg: \"svg\",\n  clipboard: \"clipboard\",\n} as const;\n\nexport const EXPORT_DATA_TYPES = {\n  excalidraw: \"excalidraw\",\n  excalidrawClipboard: \"excalidraw/clipboard\",\n  excalidrawLibrary: \"excalidrawlib\",\n  excalidrawClipboardWithAPI: \"excalidraw-api/clipboard\",\n} as const;\n\nexport const EXPORT_SOURCE =\n  window.EXCALIDRAW_EXPORT_SOURCE || window.location.origin;\n\n// time in milliseconds\nexport const IMAGE_RENDER_TIMEOUT = 500;\nexport const TAP_TWICE_TIMEOUT = 300;\nexport const TOUCH_CTX_MENU_TIMEOUT = 500;\nexport const TITLE_TIMEOUT = 10000;\nexport const VERSION_TIMEOUT = 30000;\nexport const SCROLL_TIMEOUT = 100;\nexport const ZOOM_STEP = 0.1;\nexport const MIN_ZOOM = 0.1;\nexport const MAX_ZOOM = 30;\nexport const HYPERLINK_TOOLTIP_DELAY = 300;\n\n// Report a user inactive after IDLE_THRESHOLD milliseconds\nexport const IDLE_THRESHOLD = 60_000;\n// Report a user active each ACTIVE_THRESHOLD milliseconds\nexport const ACTIVE_THRESHOLD = 3_000;\n\n// duplicates --theme-filter, should be removed soon\nexport const THEME_FILTER = \"invert(93%) hue-rotate(180deg)\";\n\nexport const URL_QUERY_KEYS = {\n  addLibrary: \"addLibrary\",\n} as const;\n\nexport const URL_HASH_KEYS = {\n  addLibrary: \"addLibrary\",\n} as const;\n\nexport const DEFAULT_UI_OPTIONS: AppProps[\"UIOptions\"] = {\n  canvasActions: {\n    changeViewBackgroundColor: true,\n    clearCanvas: true,\n    export: { saveFileToDisk: true },\n    loadScene: true,\n    saveToActiveFile: true,\n    toggleTheme: null,\n    saveAsImage: true,\n  },\n  tools: {\n    image: true,\n  },\n};\n\n// breakpoints\n// -----------------------------------------------------------------------------\n// md screen\nexport const MQ_MAX_WIDTH_PORTRAIT = 730;\nexport const MQ_MAX_WIDTH_LANDSCAPE = 1000;\nexport const MQ_MAX_HEIGHT_LANDSCAPE = 500;\n// sidebar\nexport const MQ_RIGHT_SIDEBAR_MIN_WIDTH = 1229;\n// -----------------------------------------------------------------------------\n\nexport const MAX_DECIMALS_FOR_SVG_EXPORT = 2;\n\nexport const EXPORT_SCALES = [1, 2, 3];\nexport const DEFAULT_EXPORT_PADDING = 10; // px\n\nexport const DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT = 1440;\n\nexport const MAX_ALLOWED_FILE_BYTES = 4 * 1024 * 1024;\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n\nexport const ENCRYPTION_KEY_BITS = 128;\n\nexport const VERSIONS = {\n  excalidraw: 2,\n  excalidrawLibrary: 2,\n} as const;\n\nexport const BOUND_TEXT_PADDING = 5;\nexport const ARROW_LABEL_WIDTH_FRACTION = 0.7;\nexport const ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO = 11;\n\nexport const VERTICAL_ALIGN = {\n  TOP: \"top\",\n  MIDDLE: \"middle\",\n  BOTTOM: \"bottom\",\n};\n\nexport const TEXT_ALIGN = {\n  LEFT: \"left\",\n  CENTER: \"center\",\n  RIGHT: \"right\",\n};\n\nexport const ELEMENT_READY_TO_ERASE_OPACITY = 20;\n\n// Radius represented as 25% of element's largest side (width/height).\n// Used for LEGACY and PROPORTIONAL_RADIUS algorithms, or when the element is\n// below the cutoff size.\nexport const DEFAULT_PROPORTIONAL_RADIUS = 0.25;\n// Fixed radius for the ADAPTIVE_RADIUS algorithm. In pixels.\nexport const DEFAULT_ADAPTIVE_RADIUS = 32;\n// roundness type (algorithm)\nexport const ROUNDNESS = {\n  // Used for legacy rounding (rectangles), which currently works the same\n  // as PROPORTIONAL_RADIUS, but we need to differentiate for UI purposes and\n  // forwards-compat.\n  LEGACY: 1,\n\n  // Used for linear elements & diamonds\n  PROPORTIONAL_RADIUS: 2,\n\n  // Current default algorithm for rectangles, using fixed pixel radius.\n  // It's working similarly to a regular border-radius, but attemps to make\n  // radius visually similar across differnt element sizes, especially\n  // very large and very small elements.\n  //\n  // NOTE right now we don't allow configuration and use a constant radius\n  // (see DEFAULT_ADAPTIVE_RADIUS constant)\n  ADAPTIVE_RADIUS: 3,\n} as const;\n\nexport const ROUGHNESS = {\n  architect: 0,\n  artist: 1,\n  cartoonist: 2,\n} as const;\n\nexport const STROKE_WIDTH = {\n  thin: 1,\n  bold: 2,\n  extraBold: 4,\n} as const;\n\nexport const DEFAULT_ELEMENT_PROPS: {\n  strokeColor: ExcalidrawElement[\"strokeColor\"];\n  backgroundColor: ExcalidrawElement[\"backgroundColor\"];\n  fillStyle: ExcalidrawElement[\"fillStyle\"];\n  strokeWidth: ExcalidrawElement[\"strokeWidth\"];\n  strokeStyle: ExcalidrawElement[\"strokeStyle\"];\n  roughness: ExcalidrawElement[\"roughness\"];\n  opacity: ExcalidrawElement[\"opacity\"];\n  locked: ExcalidrawElement[\"locked\"];\n} = {\n  strokeColor: COLOR_PALETTE.black,\n  backgroundColor: COLOR_PALETTE.transparent,\n  fillStyle: \"solid\",\n  strokeWidth: 2,\n  strokeStyle: \"solid\",\n  roughness: ROUGHNESS.artist,\n  opacity: 100,\n  locked: false,\n};\n\nexport const LIBRARY_SIDEBAR_TAB = \"library\";\nexport const CANVAS_SEARCH_TAB = \"search\";\n\nexport const DEFAULT_SIDEBAR = {\n  name: \"default\",\n  defaultTab: LIBRARY_SIDEBAR_TAB,\n} as const;\n\nexport const LIBRARY_DISABLED_TYPES = new Set([\n  \"iframe\",\n  \"embeddable\",\n  \"image\",\n] as const);\n\n// use these constants to easily identify reference sites\nexport const TOOL_TYPE = {\n  selection: \"selection\",\n  rectangle: \"rectangle\",\n  diamond: \"diamond\",\n  ellipse: \"ellipse\",\n  arrow: \"arrow\",\n  line: \"line\",\n  freedraw: \"freedraw\",\n  text: \"text\",\n  image: \"image\",\n  eraser: \"eraser\",\n  hand: \"hand\",\n  frame: \"frame\",\n  magicframe: \"magicframe\",\n  embeddable: \"embeddable\",\n  laser: \"laser\",\n} as const;\n\nexport const EDITOR_LS_KEYS = {\n  OAI_API_KEY: \"excalidraw-oai-api-key\",\n  // legacy naming (non)scheme\n  MERMAID_TO_EXCALIDRAW: \"mermaid-to-excalidraw\",\n  PUBLISH_LIBRARY: \"publish-library-data\",\n} as const;\n\n/**\n * not translated as this is used only in public, stateless API as default value\n * where filename is optional and we can't retrieve name from app state\n */\nexport const DEFAULT_FILENAME = \"Untitled\";\n\nexport const STATS_PANELS = { generalStats: 1, elementProperties: 2 } as const;\n\nexport const MIN_WIDTH_OR_HEIGHT = 1;\n\nexport const ARROW_TYPE: { [T in AppState[\"currentItemArrowType\"]]: T } = {\n  sharp: \"sharp\",\n  round: \"round\",\n  elbow: \"elbow\",\n};\n\nexport const DEFAULT_REDUCED_GLOBAL_ALPHA = 0.3;\nexport const ELEMENT_LINK_KEY = \"element\";\n\n/** used in tests */\nexport const ORIG_ID = Symbol.for(\"__test__originalId__\");\n\nexport enum UserIdleState {\n  ACTIVE = \"active\",\n  AWAY = \"away\",\n  IDLE = \"idle\",\n}\n", "import type {\n  ExcalidrawTextElement,\n  FontFamilyValues,\n} from \"@excalidraw/element/types\";\n\nimport { FONT_FAMILY, FONT_FAMILY_FALLBACKS } from \"./constants\";\n\n/**\n * Encapsulates font metrics with additional font metadata.\n * */\nexport interface FontMetadata {\n  /** for head & hhea metrics read the woff2 with https://fontdrop.info/ */\n  metrics: {\n    /** head.unitsPerEm metric */\n    unitsPerEm: 1000 | 1024 | 2048;\n    /** hhea.ascender metric */\n    ascender: number;\n    /** hhea.descender metric */\n    descender: number;\n    /** harcoded unitless line-height, https://github.com/excalidraw/excalidraw/pull/6360#issuecomment-1477635971 */\n    lineHeight: number;\n  };\n  /** flag to indicate a deprecated font */\n  deprecated?: true;\n  /** flag to indicate a server-side only font */\n  serverSide?: true;\n  /** flag to indiccate a local-only font */\n  local?: true;\n  /** flag to indicate a fallback font */\n  fallback?: true;\n}\n\nexport const FONT_METADATA: Record<number, FontMetadata> = {\n  [FONT_FAMILY.Excalifont]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 886,\n      descender: -374,\n      lineHeight: 1.25,\n    },\n  },\n  [FONT_FAMILY.Nunito]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 1011,\n      descender: -353,\n      lineHeight: 1.35,\n    },\n  },\n  [FONT_FAMILY[\"Lilita One\"]]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 923,\n      descender: -220,\n      lineHeight: 1.15,\n    },\n  },\n  [FONT_FAMILY[\"Comic Shanns\"]]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 750,\n      descender: -250,\n      lineHeight: 1.25,\n    },\n  },\n  [FONT_FAMILY.Virgil]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 886,\n      descender: -374,\n      lineHeight: 1.25,\n    },\n    deprecated: true,\n  },\n  [FONT_FAMILY.Helvetica]: {\n    metrics: {\n      unitsPerEm: 2048,\n      ascender: 1577,\n      descender: -471,\n      lineHeight: 1.15,\n    },\n    deprecated: true,\n    local: true,\n  },\n  [FONT_FAMILY.Cascadia]: {\n    metrics: {\n      unitsPerEm: 2048,\n      ascender: 1900,\n      descender: -480,\n      lineHeight: 1.2,\n    },\n    deprecated: true,\n  },\n  [FONT_FAMILY[\"Liberation Sans\"]]: {\n    metrics: {\n      unitsPerEm: 2048,\n      ascender: 1854,\n      descender: -434,\n      lineHeight: 1.15,\n    },\n    serverSide: true,\n  },\n  [FONT_FAMILY_FALLBACKS.Xiaolai]: {\n    metrics: {\n      unitsPerEm: 1000,\n      ascender: 880,\n      descender: -144,\n      lineHeight: 1.15,\n    },\n    fallback: true,\n  },\n  [FONT_FAMILY_FALLBACKS[\"Segoe UI Emoji\"]]: {\n    metrics: {\n      // reusing Excalifont metrics\n      unitsPerEm: 1000,\n      ascender: 886,\n      descender: -374,\n      lineHeight: 1.25,\n    },\n    local: true,\n    fallback: true,\n  },\n};\n\n/** Unicode ranges defined by google fonts */\nexport const GOOGLE_FONTS_RANGES = {\n  LATIN:\n    \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\",\n  LATIN_EXT:\n    \"U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF\",\n  CYRILIC_EXT:\n    \"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F\",\n  CYRILIC: \"U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116\",\n  VIETNAMESE:\n    \"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+1EA0-1EF9, U+20AB\",\n};\n\n/** local protocol to skip the local font from registering or inlining */\nexport const LOCAL_FONT_PROTOCOL = \"local:\";\n\n/**\n * Calculates vertical offset for a text with alphabetic baseline.\n */\nexport const getVerticalOffset = (\n  fontFamily: ExcalidrawTextElement[\"fontFamily\"],\n  fontSize: ExcalidrawTextElement[\"fontSize\"],\n  lineHeightPx: number,\n) => {\n  const { unitsPerEm, ascender, descender } =\n    FONT_METADATA[fontFamily]?.metrics ||\n    FONT_METADATA[FONT_FAMILY.Excalifont].metrics;\n\n  const fontSizeEm = fontSize / unitsPerEm;\n  const lineGap =\n    (lineHeightPx - fontSizeEm * ascender + fontSizeEm * descender) / 2;\n\n  const verticalOffset = fontSizeEm * ascender + lineGap;\n  return verticalOffset;\n};\n\n/**\n * Gets line height for a selected family.\n */\nexport const getLineHeight = (fontFamily: FontFamilyValues) => {\n  const { lineHeight } =\n    FONT_METADATA[fontFamily]?.metrics ||\n    FONT_METADATA[FONT_FAMILY.Excalifont].metrics;\n\n  return lineHeight as ExcalidrawTextElement[\"lineHeight\"];\n};\n", "import { promiseTry, resolvablePromise } from \".\";\n\nimport type { ResolvablePromise } from \".\";\n\nimport type { MaybePromise } from \"./utility-types\";\n\ntype Job<T, TArgs extends unknown[]> = (...args: TArgs) => MaybePromise<T>;\n\ntype QueueJob<T, TArgs extends unknown[]> = {\n  jobFactory: Job<T, TArgs>;\n  promise: ResolvablePromise<T>;\n  args: TArgs;\n};\n\nexport class Queue {\n  private jobs: QueueJob<any, any[]>[] = [];\n  private running = false;\n\n  private tick() {\n    if (this.running) {\n      return;\n    }\n    const job = this.jobs.shift();\n    if (job) {\n      this.running = true;\n      job.promise.resolve(\n        promiseTry(job.jobFactory, ...job.args).finally(() => {\n          this.running = false;\n          this.tick();\n        }),\n      );\n    } else {\n      this.running = false;\n    }\n  }\n\n  push<TValue, TArgs extends unknown[]>(\n    jobFactory: Job<TValue, TArgs>,\n    ...args: TArgs\n  ): Promise<TValue> {\n    const promise = resolvablePromise<TValue>();\n    this.jobs.push({ jobFactory, promise, args });\n\n    this.tick();\n\n    return promise;\n  }\n}\n", "import { isDarwin } from \"./constants\";\n\nimport type { ValueOf } from \"./utility-types\";\n\nexport const CODES = {\n  EQUAL: \"Equal\",\n  MINUS: \"Minus\",\n  NUM_ADD: \"NumpadAdd\",\n  NUM_SUBTRACT: \"NumpadSubtract\",\n  NUM_ZERO: \"Numpad0\",\n  BRACKET_RIGHT: \"BracketRight\",\n  BRACKET_LEFT: \"BracketLeft\",\n  ONE: \"Digit1\",\n  TWO: \"Digit2\",\n  THREE: \"Digit3\",\n  NINE: \"Digit9\",\n  QUOTE: \"Quote\",\n  ZERO: \"Digit0\",\n  SLASH: \"Slash\",\n  C: \"KeyC\",\n  D: \"KeyD\",\n  H: \"KeyH\",\n  V: \"KeyV\",\n  Z: \"KeyZ\",\n  Y: \"KeyY\",\n  R: \"KeyR\",\n  S: \"KeyS\",\n} as const;\n\nexport const KEYS = {\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_UP: \"ArrowUp\",\n  PAGE_UP: \"PageUp\",\n  PAGE_DOWN: \"PageDown\",\n  BACKSPACE: \"Backspace\",\n  ALT: \"Alt\",\n  CTRL_OR_CMD: isDarwin ? \"metaKey\" : \"ctrlKey\",\n  DELETE: \"Delete\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  QUESTION_MARK: \"?\",\n  SPACE: \" \",\n  TAB: \"Tab\",\n  CHEVRON_LEFT: \"<\",\n  CHEVRON_RIGHT: \">\",\n  PERIOD: \".\",\n  COMMA: \",\",\n  SUBTRACT: \"-\",\n  SLASH: \"/\",\n\n  A: \"a\",\n  C: \"c\",\n  D: \"d\",\n  E: \"e\",\n  F: \"f\",\n  G: \"g\",\n  H: \"h\",\n  I: \"i\",\n  L: \"l\",\n  O: \"o\",\n  P: \"p\",\n  Q: \"q\",\n  R: \"r\",\n  S: \"s\",\n  T: \"t\",\n  V: \"v\",\n  X: \"x\",\n  Y: \"y\",\n  Z: \"z\",\n  K: \"k\",\n  W: \"w\",\n\n  0: \"0\",\n  1: \"1\",\n  2: \"2\",\n  3: \"3\",\n  4: \"4\",\n  5: \"5\",\n  6: \"6\",\n  7: \"7\",\n  8: \"8\",\n  9: \"9\",\n} as const;\n\nexport type Key = keyof typeof KEYS;\n\n// defines key code mapping for matching codes as fallback to respective keys on non-latin keyboard layouts\nexport const KeyCodeMap = new Map<ValueOf<typeof KEYS>, ValueOf<typeof CODES>>([\n  [KEYS.Z, CODES.Z],\n  [KEYS.Y, CODES.Y],\n]);\n\nexport const isLatinChar = (key: string) => /^[a-z]$/.test(key.toLowerCase());\n\n/**\n * Used to match key events for any keyboard layout, especially on Windows and Linux,\n * where non-latin character with modified (CMD) is not substituted with latin-based alternative.\n *\n * Uses `event.key` when it's latin, otherwise fallbacks to `event.code` (if mapping exists).\n *\n * Example of pressing \"z\" on different layouts, with the chosen key or code highlighted in []:\n *\n * Layout                | Code  | Key | Comment\n * --------------------- | ----- | --- | -------\n * U.S.                  |  KeyZ  | [z] |\n * Czech                 |  KeyY  | [z] |\n * Turkish               |  KeyN  | [z] |\n * French                |  KeyW  | [z] |\n * Macedonian            | [KeyZ] |  \u0437  | z with cmd; \u0437 is Cyrillic equivalent of z\n * Russian               | [KeyZ] |  \u044F  | z with cmd\n * Serbian               | [KeyZ] |  \u0455  | z with cmd\n * Greek                 | [KeyZ] |  \u03B6  | z with cmd; also \u03B6 is Greek equivalent of z\n * Hebrew                | [KeyZ] |  \u05D6  | z with cmd; also \u05D6 is Hebrew equivalent of z\n * Pinyin - Simplified   |  KeyZ  | [z] | due to IME\n * Cangije - Traditional | [KeyZ] |  \u91CD | z with cmd\n * Japanese              | [KeyZ] |  \u3064 | z with cmd\n * 2-Set Korean          | [KeyZ] |  \u314B | z with cmd\n *\n * More details in https://github.com/excalidraw/excalidraw/pull/5944\n */\nexport const matchKey = (\n  event: KeyboardEvent | React.KeyboardEvent<Element>,\n  key: ValueOf<typeof KEYS>,\n): boolean => {\n  // for latin layouts use key\n  if (key === event.key.toLowerCase()) {\n    return true;\n  }\n\n  // non-latin layouts fallback to code\n  const code = KeyCodeMap.get(key);\n  return Boolean(code && !isLatinChar(event.key) && event.code === code);\n};\n\nexport const isArrowKey = (key: string) =>\n  key === KEYS.ARROW_LEFT ||\n  key === KEYS.ARROW_RIGHT ||\n  key === KEYS.ARROW_DOWN ||\n  key === KEYS.ARROW_UP;\n\nexport const shouldResizeFromCenter = (event: MouseEvent | KeyboardEvent) =>\n  event.altKey;\n\nexport const shouldMaintainAspectRatio = (event: MouseEvent | KeyboardEvent) =>\n  event.shiftKey;\n\nexport const shouldRotateWithDiscreteAngle = (\n  event: MouseEvent | KeyboardEvent | React.PointerEvent<HTMLCanvasElement>,\n) => event.shiftKey;\n", "import {\n  pointFromPair,\n  type GlobalPoint,\n  type LocalPoint,\n} from \"@excalidraw/math\";\n\nimport type { NullableGridSize } from \"@excalidraw/excalidraw/types\";\n\nexport const getSizeFromPoints = (\n  points: readonly (GlobalPoint | LocalPoint)[],\n) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\n\n/** @arg dimension, 0 for rescaling only x, 1 for y */\nexport const rescalePoints = <Point extends GlobalPoint | LocalPoint>(\n  dimension: 0 | 1,\n  newSize: number,\n  points: readonly Point[],\n  normalize: boolean,\n): Point[] => {\n  const coordinates = points.map((point) => point[dimension]);\n  const maxCoordinate = Math.max(...coordinates);\n  const minCoordinate = Math.min(...coordinates);\n  const size = maxCoordinate - minCoordinate;\n  const scale = size === 0 ? 1 : newSize / size;\n\n  let nextMinCoordinate = Infinity;\n\n  const scaledPoints = points.map((point): Point => {\n    const newCoordinate = point[dimension] * scale;\n    const newPoint = [...point];\n    newPoint[dimension] = newCoordinate;\n    if (newCoordinate < nextMinCoordinate) {\n      nextMinCoordinate = newCoordinate;\n    }\n    return newPoint as Point;\n  });\n\n  if (!normalize) {\n    return scaledPoints;\n  }\n\n  if (scaledPoints.length === 2) {\n    // we don't translate two-point lines\n    return scaledPoints;\n  }\n\n  const translation = minCoordinate - nextMinCoordinate;\n\n  const nextPoints = scaledPoints.map((scaledPoint) =>\n    pointFromPair<Point>(\n      scaledPoint.map((value, currentDimension) => {\n        return currentDimension === dimension ? value + translation : value;\n      }) as [number, number],\n    ),\n  );\n\n  return nextPoints;\n};\n\n// TODO: Rounding this point causes some shake when free drawing\nexport const getGridPoint = (\n  x: number,\n  y: number,\n  gridSize: NullableGridSize,\n): [number, number] => {\n  if (gridSize) {\n    return [\n      Math.round(x / gridSize) * gridSize,\n      Math.round(y / gridSize) * gridSize,\n    ];\n  }\n  return [x, y];\n};\n", "export * from \"./angle\";\nexport * from \"./curve\";\nexport * from \"./line\";\nexport * from \"./point\";\nexport * from \"./polygon\";\nexport * from \"./range\";\nexport * from \"./rectangle\";\nexport * from \"./segment\";\nexport * from \"./triangle\";\nexport * from \"./types\";\nexport * from \"./vector\";\nexport * from \"./utils\";\n", "import { PRECISION } from \"./utils\";\n\nimport type {\n  Degrees,\n  GlobalPoint,\n  LocalPoint,\n  PolarCoords,\n  Radians,\n} from \"./types\";\n\n// TODO: Simplify with modulo and fix for angles beyond 4*Math.PI and - 4*Math.PI\nexport const normalizeRadians = (angle: Radians): Radians => {\n  if (angle < 0) {\n    return (angle + 2 * Math.PI) as Radians;\n  }\n  if (angle >= 2 * Math.PI) {\n    return (angle - 2 * Math.PI) as Radians;\n  }\n  return angle;\n};\n\n/**\n * Return the polar coordinates for the given cartesian point represented by\n * (x, y) for the center point 0,0 where the first number returned is the radius,\n * the second is the angle in radians.\n */\nexport const cartesian2Polar = <P extends GlobalPoint | LocalPoint>([\n  x,\n  y,\n]: P): PolarCoords => [\n  Math.hypot(x, y),\n  normalizeRadians(Math.atan2(y, x) as Radians),\n];\n\nexport function degreesToRadians(degrees: Degrees): Radians {\n  return ((degrees * Math.PI) / 180) as Radians;\n}\n\nexport function radiansToDegrees(degrees: Radians): Degrees {\n  return ((degrees * 180) / Math.PI) as Degrees;\n}\n\n/**\n * Determines if the provided angle is a right angle.\n *\n * @param rads The angle to measure\n * @returns TRUE if the provided angle is a right angle\n */\nexport function isRightAngleRads(rads: Radians): boolean {\n  return Math.abs(Math.sin(2 * rads)) < PRECISION;\n}\n", "export const PRECISION = 10e-5;\n\nexport const clamp = (value: number, min: number, max: number) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nexport const round = (\n  value: number,\n  precision: number,\n  func: \"round\" | \"floor\" | \"ceil\" = \"round\",\n) => {\n  const multiplier = Math.pow(10, precision);\n\n  return Math[func]((value + Number.EPSILON) * multiplier) / multiplier;\n};\n\nexport const roundToStep = (\n  value: number,\n  step: number,\n  func: \"round\" | \"floor\" | \"ceil\" = \"round\",\n): number => {\n  const factor = 1 / step;\n  return Math[func](value * factor) / factor;\n};\n\nexport const average = (a: number, b: number) => (a + b) / 2;\n\nexport const isFiniteNumber = (value: any): value is number => {\n  return typeof value === \"number\" && Number.isFinite(value);\n};\n\nexport const isCloseTo = (a: number, b: number, precision = PRECISION) =>\n  Math.abs(a - b) < precision;\n", "import type { Bounds } from \"@excalidraw/element/bounds\";\n\nimport { isPoint, pointDistance, pointFrom } from \"./point\";\nimport { rectangle, rectangleIntersectLineSegment } from \"./rectangle\";\n\nimport type { Curve, GlobalPoint, LineSegment, LocalPoint } from \"./types\";\n\n/**\n *\n * @param a\n * @param b\n * @param c\n * @param d\n * @returns\n */\nexport function curve<Point extends GlobalPoint | LocalPoint>(\n  a: Point,\n  b: Point,\n  c: Point,\n  d: Point,\n) {\n  return [a, b, c, d] as Curve<Point>;\n}\n\nfunction gradient(\n  f: (t: number, s: number) => number,\n  t0: number,\n  s0: number,\n  delta: number = 1e-6,\n): number[] {\n  return [\n    (f(t0 + delta, s0) - f(t0 - delta, s0)) / (2 * delta),\n    (f(t0, s0 + delta) - f(t0, s0 - delta)) / (2 * delta),\n  ];\n}\n\nfunction solve(\n  f: (t: number, s: number) => [number, number],\n  t0: number,\n  s0: number,\n  tolerance: number = 1e-3,\n  iterLimit: number = 10,\n): number[] | null {\n  let error = Infinity;\n  let iter = 0;\n\n  while (error >= tolerance) {\n    if (iter >= iterLimit) {\n      return null;\n    }\n\n    const y0 = f(t0, s0);\n    const jacobian = [\n      gradient((t, s) => f(t, s)[0], t0, s0),\n      gradient((t, s) => f(t, s)[1], t0, s0),\n    ];\n    const b = [[-y0[0]], [-y0[1]]];\n    const det =\n      jacobian[0][0] * jacobian[1][1] - jacobian[0][1] * jacobian[1][0];\n\n    if (det === 0) {\n      return null;\n    }\n\n    const iJ = [\n      [jacobian[1][1] / det, -jacobian[0][1] / det],\n      [-jacobian[1][0] / det, jacobian[0][0] / det],\n    ];\n    const h = [\n      [iJ[0][0] * b[0][0] + iJ[0][1] * b[1][0]],\n      [iJ[1][0] * b[0][0] + iJ[1][1] * b[1][0]],\n    ];\n\n    t0 = t0 + h[0][0];\n    s0 = s0 + h[1][0];\n\n    const [tErr, sErr] = f(t0, s0);\n    error = Math.max(Math.abs(tErr), Math.abs(sErr));\n    iter += 1;\n  }\n\n  return [t0, s0];\n}\n\nconst bezierEquation = <Point extends GlobalPoint | LocalPoint>(\n  c: Curve<Point>,\n  t: number,\n) =>\n  pointFrom<Point>(\n    (1 - t) ** 3 * c[0][0] +\n      3 * (1 - t) ** 2 * t * c[1][0] +\n      3 * (1 - t) * t ** 2 * c[2][0] +\n      t ** 3 * c[3][0],\n    (1 - t) ** 3 * c[0][1] +\n      3 * (1 - t) ** 2 * t * c[1][1] +\n      3 * (1 - t) * t ** 2 * c[2][1] +\n      t ** 3 * c[3][1],\n  );\n\n/**\n * Computes the intersection between a cubic spline and a line segment.\n */\nexport function curveIntersectLineSegment<\n  Point extends GlobalPoint | LocalPoint,\n>(c: Curve<Point>, l: LineSegment<Point>): Point[] {\n  // Optimize by doing a cheap bounding box check first\n  const bounds = curveBounds(c);\n  if (\n    rectangleIntersectLineSegment(\n      rectangle(\n        pointFrom(bounds[0], bounds[1]),\n        pointFrom(bounds[2], bounds[3]),\n      ),\n      l,\n    ).length === 0\n  ) {\n    return [];\n  }\n\n  const line = (s: number) =>\n    pointFrom<Point>(\n      l[0][0] + s * (l[1][0] - l[0][0]),\n      l[0][1] + s * (l[1][1] - l[0][1]),\n    );\n\n  const initial_guesses: [number, number][] = [\n    [0.5, 0],\n    [0.2, 0],\n    [0.8, 0],\n  ];\n\n  const calculate = ([t0, s0]: [number, number]) => {\n    const solution = solve(\n      (t: number, s: number) => {\n        const bezier_point = bezierEquation(c, t);\n        const line_point = line(s);\n\n        return [\n          bezier_point[0] - line_point[0],\n          bezier_point[1] - line_point[1],\n        ];\n      },\n      t0,\n      s0,\n    );\n\n    if (!solution) {\n      return null;\n    }\n\n    const [t, s] = solution;\n\n    if (t < 0 || t > 1 || s < 0 || s > 1) {\n      return null;\n    }\n\n    return bezierEquation(c, t);\n  };\n\n  let solution = calculate(initial_guesses[0]);\n  if (solution) {\n    return [solution];\n  }\n\n  solution = calculate(initial_guesses[1]);\n  if (solution) {\n    return [solution];\n  }\n\n  solution = calculate(initial_guesses[2]);\n  if (solution) {\n    return [solution];\n  }\n\n  return [];\n}\n\n/**\n * Finds the closest point on the Bezier curve from another point\n *\n * @param x\n * @param y\n * @param P0\n * @param P1\n * @param P2\n * @param P3\n * @param tolerance\n * @param maxLevel\n * @returns\n */\nexport function curveClosestPoint<Point extends GlobalPoint | LocalPoint>(\n  c: Curve<Point>,\n  p: Point,\n  tolerance: number = 1e-3,\n): Point | null {\n  const localMinimum = (\n    min: number,\n    max: number,\n    f: (t: number) => number,\n    e: number = tolerance,\n  ) => {\n    let m = min;\n    let n = max;\n    let k;\n\n    while (n - m > e) {\n      k = (n + m) / 2;\n      if (f(k - e) < f(k + e)) {\n        n = k;\n      } else {\n        m = k;\n      }\n    }\n\n    return k;\n  };\n\n  const maxSteps = 30;\n  let closestStep = 0;\n  for (let min = Infinity, step = 0; step < maxSteps; step++) {\n    const d = pointDistance(p, bezierEquation(c, step / maxSteps));\n    if (d < min) {\n      min = d;\n      closestStep = step;\n    }\n  }\n\n  const t0 = Math.max((closestStep - 1) / maxSteps, 0);\n  const t1 = Math.min((closestStep + 1) / maxSteps, 1);\n  const solution = localMinimum(t0, t1, (t) =>\n    pointDistance(p, bezierEquation(c, t)),\n  );\n\n  if (!solution) {\n    return null;\n  }\n\n  return bezierEquation(c, solution);\n}\n\n/**\n * Determines the distance between a point and the closest point on the\n * Bezier curve.\n *\n * @param c The curve to test\n * @param p The point to measure from\n */\nexport function curvePointDistance<Point extends GlobalPoint | LocalPoint>(\n  c: Curve<Point>,\n  p: Point,\n) {\n  const closest = curveClosestPoint(c, p);\n\n  if (!closest) {\n    return 0;\n  }\n\n  return pointDistance(p, closest);\n}\n\n/**\n * Determines if the parameter is a Curve\n */\nexport function isCurve<P extends GlobalPoint | LocalPoint>(\n  v: unknown,\n): v is Curve<P> {\n  return (\n    Array.isArray(v) &&\n    v.length === 4 &&\n    isPoint(v[0]) &&\n    isPoint(v[1]) &&\n    isPoint(v[2]) &&\n    isPoint(v[3])\n  );\n}\n\nfunction curveBounds<Point extends GlobalPoint | LocalPoint>(\n  c: Curve<Point>,\n): Bounds {\n  const [P0, P1, P2, P3] = c;\n  const x = [P0[0], P1[0], P2[0], P3[0]];\n  const y = [P0[1], P1[1], P2[1], P3[1]];\n  return [Math.min(...x), Math.min(...y), Math.max(...x), Math.max(...y)];\n}\n", "import { degreesToRadians } from \"./angle\";\nimport { PRECISION } from \"./utils\";\nimport { vectorFromPoint, vectorScale } from \"./vector\";\n\nimport type {\n  LocalPoint,\n  GlobalPoint,\n  Radians,\n  Degrees,\n  Vector,\n} from \"./types\";\n\n/**\n * Create a properly typed Point instance from the X and Y coordinates.\n *\n * @param x The X coordinate\n * @param y The Y coordinate\n * @returns The branded and created point\n */\nexport function pointFrom<Point extends GlobalPoint | LocalPoint>(\n  x: number,\n  y: number,\n): Point {\n  return [x, y] as Point;\n}\n\n/**\n * Converts and remaps an array containing a pair of numbers to Point.\n *\n * @param numberArray The number array to check and to convert to Point\n * @returns The point instance\n */\nexport function pointFromArray<Point extends GlobalPoint | LocalPoint>(\n  numberArray: number[],\n): Point | undefined {\n  return numberArray.length === 2\n    ? pointFrom<Point>(numberArray[0], numberArray[1])\n    : undefined;\n}\n\n/**\n * Converts and remaps a pair of numbers to Point.\n *\n * @param pair A number pair to convert to Point\n * @returns The point instance\n */\nexport function pointFromPair<Point extends GlobalPoint | LocalPoint>(\n  pair: [number, number],\n): Point {\n  return pair as Point;\n}\n\n/**\n * Convert a vector to a point.\n *\n * @param v The vector to convert\n * @returns The point the vector points at with origin 0,0\n */\nexport function pointFromVector<P extends GlobalPoint | LocalPoint>(\n  v: Vector,\n  offset: P = pointFrom(0, 0),\n): P {\n  return pointFrom<P>(offset[0] + v[0], offset[1] + v[1]);\n}\n\n/**\n * Checks if the provided value has the shape of a Point.\n *\n * @param p The value to attempt verification on\n * @returns TRUE if the provided value has the shape of a local or global point\n */\nexport function isPoint(p: unknown): p is LocalPoint | GlobalPoint {\n  return (\n    Array.isArray(p) &&\n    p.length === 2 &&\n    typeof p[0] === \"number\" &&\n    !isNaN(p[0]) &&\n    typeof p[1] === \"number\" &&\n    !isNaN(p[1])\n  );\n}\n\n/**\n * Compare two points coordinate-by-coordinate and if\n * they are closer than INVERSE_PRECISION it returns TRUE.\n *\n * @param a Point The first point to compare\n * @param b Point The second point to compare\n * @returns TRUE if the points are sufficiently close to each other\n */\nexport function pointsEqual<Point extends GlobalPoint | LocalPoint>(\n  a: Point,\n  b: Point,\n): boolean {\n  const abs = Math.abs;\n  return abs(a[0] - b[0]) < PRECISION && abs(a[1] - b[1]) < PRECISION;\n}\n\n/**\n * Rotate a point by [angle] radians.\n *\n * @param point The point to rotate\n * @param center The point to rotate around, the center point\n * @param angle The radians to rotate the point by\n * @returns The rotated point\n */\nexport function pointRotateRads<Point extends GlobalPoint | LocalPoint>(\n  [x, y]: Point,\n  [cx, cy]: Point,\n  angle: Radians,\n): Point {\n  return pointFrom(\n    (x - cx) * Math.cos(angle) - (y - cy) * Math.sin(angle) + cx,\n    (x - cx) * Math.sin(angle) + (y - cy) * Math.cos(angle) + cy,\n  );\n}\n\n/**\n * Rotate a point by [angle] degree.\n *\n * @param point The point to rotate\n * @param center The point to rotate around, the center point\n * @param angle The degree to rotate the point by\n * @returns The rotated point\n */\nexport function pointRotateDegs<Point extends GlobalPoint | LocalPoint>(\n  point: Point,\n  center: Point,\n  angle: Degrees,\n): Point {\n  return pointRotateRads(point, center, degreesToRadians(angle));\n}\n\n/**\n * Translate a point by a vector.\n *\n * WARNING: This is not for translating Excalidraw element points!\n *          You need to account for rotation on base coordinates\n *          on your own.\n *          CONSIDER USING AN APPROPRIATE ELEMENT-AWARE TRANSLATE!\n *\n * @param p The point to apply the translation on\n * @param v The vector to translate by\n * @returns\n */\n// TODO 99% of use is translating between global and local coords, which need to be formalized\nexport function pointTranslate<\n  From extends GlobalPoint | LocalPoint,\n  To extends GlobalPoint | LocalPoint,\n>(p: From, v: Vector = [0, 0] as Vector): To {\n  return pointFrom(p[0] + v[0], p[1] + v[1]);\n}\n\n/**\n * Find the center point at equal distance from both points.\n *\n * @param a One of the points to create the middle point for\n * @param b The other point to create the middle point for\n * @returns The middle point\n */\nexport function pointCenter<P extends LocalPoint | GlobalPoint>(a: P, b: P): P {\n  return pointFrom((a[0] + b[0]) / 2, (a[1] + b[1]) / 2);\n}\n\n/**\n * Calculate the distance between two points.\n *\n * @param a First point\n * @param b Second point\n * @returns The euclidean distance between the two points.\n */\nexport function pointDistance<P extends LocalPoint | GlobalPoint>(\n  a: P,\n  b: P,\n): number {\n  return Math.hypot(b[0] - a[0], b[1] - a[1]);\n}\n\n/**\n * Calculate the squared distance between two points.\n *\n * Note: Use this if you only compare distances, it saves a square root.\n *\n * @param a First point\n * @param b Second point\n * @returns The euclidean distance between the two points.\n */\nexport function pointDistanceSq<P extends LocalPoint | GlobalPoint>(\n  a: P,\n  b: P,\n): number {\n  const xDiff = b[0] - a[0];\n  const yDiff = b[1] - a[1];\n\n  return xDiff * xDiff + yDiff * yDiff;\n}\n\n/**\n * Scale a point from a given origin by the multiplier.\n *\n * @param p The point to scale\n * @param mid The origin to scale from\n * @param multiplier The scaling factor\n * @returns\n */\nexport const pointScaleFromOrigin = <P extends GlobalPoint | LocalPoint>(\n  p: P,\n  mid: P,\n  multiplier: number,\n) => pointTranslate(mid, vectorScale(vectorFromPoint(p, mid), multiplier));\n\n/**\n * Returns whether `q` lies inside the segment/rectangle defined by `p` and `r`.\n * This is an approximation to \"does `q` lie on a segment `pr`\" check.\n *\n * @param p The first point to compare against\n * @param q The actual point this function checks whether is in between\n * @param r The other point to compare against\n * @returns TRUE if q is indeed between p and r\n */\nexport const isPointWithinBounds = <P extends GlobalPoint | LocalPoint>(\n  p: P,\n  q: P,\n  r: P,\n) => {\n  return (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  );\n};\n", "import type { GlobalPoint, LocalPoint, Vector } from \"./types\";\n\n/**\n * Create a vector from the x and y coordiante elements.\n *\n * @param x The X aspect of the vector\n * @param y T Y aspect of the vector\n * @returns The constructed vector with X and Y as the coordinates\n */\nexport function vector(\n  x: number,\n  y: number,\n  originX: number = 0,\n  originY: number = 0,\n): Vector {\n  return [x - originX, y - originY] as Vector;\n}\n\n/**\n * Turn a point into a vector with the origin point.\n *\n * @param p The point to turn into a vector\n * @param origin The origin point in a given coordiante system\n * @returns The created vector from the point and the origin\n */\nexport function vectorFromPoint<Point extends GlobalPoint | LocalPoint>(\n  p: Point,\n  origin: Point = [0, 0] as Point,\n): Vector {\n  return vector(p[0] - origin[0], p[1] - origin[1]);\n}\n\n/**\n * Cross product is a binary operation on two vectors in 2D space.\n * It results in a vector that is perpendicular to both vectors.\n *\n * @param a One of the vectors to use for the directed area calculation\n * @param b The other vector to use for the directed area calculation\n * @returns The directed area value for the two vectos\n */\nexport function vectorCross(a: Vector, b: Vector): number {\n  return a[0] * b[1] - b[0] * a[1];\n}\n\n/**\n * Dot product is defined as the sum of the products of the\n * two vectors.\n *\n * @param a One of the vectors for which the sum of products is calculated\n * @param b The other vector for which the sum of products is calculated\n * @returns The sum of products of the two vectors\n */\nexport function vectorDot(a: Vector, b: Vector) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Determines if the value has the shape of a Vector.\n *\n * @param v The value to test\n * @returns TRUE if the value has the shape and components of a Vectors\n */\nexport function isVector(v: unknown): v is Vector {\n  return (\n    Array.isArray(v) &&\n    v.length === 2 &&\n    typeof v[0] === \"number\" &&\n    !isNaN(v[0]) &&\n    typeof v[1] === \"number\" &&\n    !isNaN(v[1])\n  );\n}\n\n/**\n * Add two vectors by adding their coordinates.\n *\n * @param a One of the vectors to add\n * @param b The other vector to add\n * @returns The sum vector of the two provided vectors\n */\nexport function vectorAdd(a: Readonly<Vector>, b: Readonly<Vector>): Vector {\n  return [a[0] + b[0], a[1] + b[1]] as Vector;\n}\n\n/**\n * Add two vectors by adding their coordinates.\n *\n * @param start One of the vectors to add\n * @param end The other vector to add\n * @returns The sum vector of the two provided vectors\n */\nexport function vectorSubtract(\n  start: Readonly<Vector>,\n  end: Readonly<Vector>,\n): Vector {\n  return [start[0] - end[0], start[1] - end[1]] as Vector;\n}\n\n/**\n * Scale vector by a scalar.\n *\n * @param v The vector to scale\n * @param scalar The scalar to multiply the vector components with\n * @returns The new scaled vector\n */\nexport function vectorScale(v: Vector, scalar: number): Vector {\n  return vector(v[0] * scalar, v[1] * scalar);\n}\n\n/**\n * Calculates the sqare magnitude of a vector. Use this if you compare\n * magnitudes as it saves you an SQRT.\n *\n * @param v The vector to measure\n * @returns The scalar squared magnitude of the vector\n */\nexport function vectorMagnitudeSq(v: Vector) {\n  return v[0] * v[0] + v[1] * v[1];\n}\n\n/**\n * Calculates the magnitude of a vector.\n *\n * @param v The vector to measure\n * @returns The scalar magnitude of the vector\n */\nexport function vectorMagnitude(v: Vector) {\n  return Math.sqrt(vectorMagnitudeSq(v));\n}\n\n/**\n * Normalize the vector (i.e. make the vector magnitue equal 1).\n *\n * @param v The vector to normalize\n * @returns The new normalized vector\n */\nexport const vectorNormalize = (v: Vector): Vector => {\n  const m = vectorMagnitude(v);\n\n  if (m === 0) {\n    return vector(0, 0);\n  }\n\n  return vector(v[0] / m, v[1] / m);\n};\n", "import { pointFrom } from \"./point\";\nimport { lineSegment, lineSegmentIntersectionPoints } from \"./segment\";\n\nimport type { GlobalPoint, LineSegment, LocalPoint, Rectangle } from \"./types\";\n\nexport function rectangle<P extends GlobalPoint | LocalPoint>(\n  topLeft: P,\n  bottomRight: P,\n): Rectangle<P> {\n  return [topLeft, bottomRight] as Rectangle<P>;\n}\n\nexport function rectangleIntersectLineSegment<\n  Point extends LocalPoint | GlobalPoint,\n>(r: Rectangle<Point>, l: LineSegment<Point>): Point[] {\n  return [\n    lineSegment(r[0], pointFrom(r[1][0], r[0][1])),\n    lineSegment(pointFrom(r[1][0], r[0][1]), r[1]),\n    lineSegment(r[1], pointFrom(r[0][0], r[1][1])),\n    lineSegment(pointFrom(r[0][0], r[1][1]), r[0]),\n  ]\n    .map((s) => lineSegmentIntersectionPoints(l, s))\n    .filter((i): i is Point => !!i);\n}\n", "import { line, linesIntersectAt } from \"./line\";\nimport {\n  isPoint,\n  pointCenter,\n  pointFromVector,\n  pointRotateRads,\n} from \"./point\";\nimport { PRECISION } from \"./utils\";\nimport {\n  vectorAdd,\n  vectorCross,\n  vectorFromPoint,\n  vectorScale,\n  vectorSubtract,\n} from \"./vector\";\n\nimport type { GlobalPoint, LineSegment, LocalPoint, Radians } from \"./types\";\n\n/**\n * Create a line segment from two points.\n *\n * @param points The two points delimiting the line segment on each end\n * @returns The line segment delineated by the points\n */\nexport function lineSegment<P extends GlobalPoint | LocalPoint>(\n  a: P,\n  b: P,\n): LineSegment<P> {\n  return [a, b] as LineSegment<P>;\n}\n\n/**\n *\n * @param segment\n * @returns\n */\nexport const isLineSegment = <Point extends GlobalPoint | LocalPoint>(\n  segment: unknown,\n): segment is LineSegment<Point> =>\n  Array.isArray(segment) &&\n  segment.length === 2 &&\n  isPoint(segment[0]) &&\n  isPoint(segment[0]);\n\n/**\n * Return the coordinates resulting from rotating the given line about an origin by an angle in radians\n * note that when the origin is not given, the midpoint of the given line is used as the origin.\n *\n * @param l\n * @param angle\n * @param origin\n * @returns\n */\nexport const lineSegmentRotate = <Point extends LocalPoint | GlobalPoint>(\n  l: LineSegment<Point>,\n  angle: Radians,\n  origin?: Point,\n): LineSegment<Point> => {\n  return lineSegment(\n    pointRotateRads(l[0], origin || pointCenter(l[0], l[1]), angle),\n    pointRotateRads(l[1], origin || pointCenter(l[0], l[1]), angle),\n  );\n};\n\n/**\n * Calculates the point two line segments with a definite start and end point\n * intersect at.\n */\nexport const segmentsIntersectAt = <Point extends GlobalPoint | LocalPoint>(\n  a: Readonly<LineSegment<Point>>,\n  b: Readonly<LineSegment<Point>>,\n): Point | null => {\n  const a0 = vectorFromPoint(a[0]);\n  const a1 = vectorFromPoint(a[1]);\n  const b0 = vectorFromPoint(b[0]);\n  const b1 = vectorFromPoint(b[1]);\n  const r = vectorSubtract(a1, a0);\n  const s = vectorSubtract(b1, b0);\n  const denominator = vectorCross(r, s);\n\n  if (denominator === 0) {\n    return null;\n  }\n\n  const i = vectorSubtract(vectorFromPoint(b[0]), vectorFromPoint(a[0]));\n  const u = vectorCross(i, r) / denominator;\n  const t = vectorCross(i, s) / denominator;\n\n  if (u === 0) {\n    return null;\n  }\n\n  const p = vectorAdd(a0, vectorScale(r, t));\n\n  if (t >= 0 && t < 1 && u >= 0 && u < 1) {\n    return pointFromVector<Point>(p);\n  }\n\n  return null;\n};\n\nexport const pointOnLineSegment = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  line: LineSegment<Point>,\n  threshold = PRECISION,\n) => {\n  const distance = distanceToLineSegment(point, line);\n\n  if (distance === 0) {\n    return true;\n  }\n\n  return distance < threshold;\n};\n\nexport const distanceToLineSegment = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  line: LineSegment<Point>,\n) => {\n  const [x, y] = point;\n  const [[x1, y1], [x2, y2]] = line;\n\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const len_sq = C * C + D * D;\n  let param = -1;\n  if (len_sq !== 0) {\n    param = dot / len_sq;\n  }\n\n  let xx;\n  let yy;\n\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Returns the intersection point of a segment and a line\n *\n * @param l\n * @param s\n * @returns\n */\nexport function lineSegmentIntersectionPoints<\n  Point extends GlobalPoint | LocalPoint,\n>(l: LineSegment<Point>, s: LineSegment<Point>): Point | null {\n  const candidate = linesIntersectAt(line(l[0], l[1]), line(s[0], s[1]));\n\n  if (\n    !candidate ||\n    !pointOnLineSegment(candidate, s) ||\n    !pointOnLineSegment(candidate, l)\n  ) {\n    return null;\n  }\n\n  return candidate;\n}\n", "import { pointFrom } from \"./point\";\n\nimport type { GlobalPoint, Line, LocalPoint } from \"./types\";\n\n/**\n * Create a line from two points.\n *\n * @param points The two points lying on the line\n * @returns The line on which the points lie\n */\nexport function line<P extends GlobalPoint | LocalPoint>(a: P, b: P): Line<P> {\n  return [a, b] as Line<P>;\n}\n\n/**\n * Determines the intersection point (unless the lines are parallel) of two\n * lines\n *\n * @param a\n * @param b\n * @returns\n */\nexport function linesIntersectAt<Point extends GlobalPoint | LocalPoint>(\n  a: Line<Point>,\n  b: Line<Point>,\n): Point | null {\n  const A1 = a[1][1] - a[0][1];\n  const B1 = a[0][0] - a[1][0];\n  const A2 = b[1][1] - b[0][1];\n  const B2 = b[0][0] - b[1][0];\n  const D = A1 * B2 - A2 * B1;\n  if (D !== 0) {\n    const C1 = A1 * a[0][0] + B1 * a[0][1];\n    const C2 = A2 * b[0][0] + B2 * b[0][1];\n    return pointFrom<Point>((C1 * B2 - C2 * B1) / D, (A1 * C2 - A2 * C1) / D);\n  }\n\n  return null;\n}\n", "import { pointsEqual } from \"./point\";\nimport { lineSegment, pointOnLineSegment } from \"./segment\";\nimport { PRECISION } from \"./utils\";\n\nimport type { GlobalPoint, LocalPoint, Polygon } from \"./types\";\n\nexport function polygon<Point extends GlobalPoint | LocalPoint>(\n  ...points: Point[]\n) {\n  return polygonClose(points) as Polygon<Point>;\n}\n\nexport function polygonFromPoints<Point extends GlobalPoint | LocalPoint>(\n  points: Point[],\n) {\n  return polygonClose(points) as Polygon<Point>;\n}\n\nexport const polygonIncludesPoint = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  polygon: Polygon<Point>,\n) => {\n  const x = point[0];\n  const y = point[1];\n  let inside = false;\n\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i][0];\n    const yi = polygon[i][1];\n    const xj = polygon[j][0];\n    const yj = polygon[j][1];\n\n    if (\n      ((yi > y && yj <= y) || (yi <= y && yj > y)) &&\n      x < ((xj - xi) * (y - yi)) / (yj - yi) + xi\n    ) {\n      inside = !inside;\n    }\n  }\n\n  return inside;\n};\n\nexport const pointOnPolygon = <Point extends LocalPoint | GlobalPoint>(\n  p: Point,\n  poly: Polygon<Point>,\n  threshold = PRECISION,\n) => {\n  let on = false;\n\n  for (let i = 0, l = poly.length - 1; i < l; i++) {\n    if (pointOnLineSegment(p, lineSegment(poly[i], poly[i + 1]), threshold)) {\n      on = true;\n      break;\n    }\n  }\n\n  return on;\n};\n\nfunction polygonClose<Point extends LocalPoint | GlobalPoint>(\n  polygon: Point[],\n) {\n  return polygonIsClosed(polygon)\n    ? polygon\n    : ([...polygon, polygon[0]] as Polygon<Point>);\n}\n\nfunction polygonIsClosed<Point extends LocalPoint | GlobalPoint>(\n  polygon: Point[],\n) {\n  return pointsEqual(polygon[0], polygon[polygon.length - 1]);\n}\n", "import { toBrandedType } from \"@excalidraw/common\";\n\nimport type { InclusiveRange } from \"./types\";\n\n/**\n * Create an inclusive range from the two numbers provided.\n *\n * @param start Start of the range\n * @param end End of the range\n * @returns\n */\nexport function rangeInclusive(start: number, end: number): InclusiveRange {\n  return toBrandedType<InclusiveRange>([start, end]);\n}\n\n/**\n * Turn a number pair into an inclusive range.\n *\n * @param pair The number pair to convert to an inclusive range\n * @returns The new inclusive range\n */\nexport function rangeInclusiveFromPair(pair: [start: number, end: number]) {\n  return toBrandedType<InclusiveRange>(pair);\n}\n\n/**\n * Given two ranges, return if the two ranges overlap with each other e.g.\n * [1, 3] overlaps with [2, 4] while [1, 3] does not overlap with [4, 5].\n *\n * @param param0 One of the ranges to compare\n * @param param1 The other range to compare against\n * @returns TRUE if the ranges overlap\n */\nexport const rangesOverlap = (\n  [a0, a1]: InclusiveRange,\n  [b0, b1]: InclusiveRange,\n): boolean => {\n  if (a0 <= b0) {\n    return a1 >= b0;\n  }\n\n  if (a0 >= b0) {\n    return b1 >= a0;\n  }\n\n  return false;\n};\n\n/**\n * Given two ranges,return ther intersection of the two ranges if any e.g. the\n * intersection of [1, 3] and [2, 4] is [2, 3].\n *\n * @param param0 The first range to compare\n * @param param1 The second range to compare\n * @returns The inclusive range intersection or NULL if no intersection\n */\nexport const rangeIntersection = (\n  [a0, a1]: InclusiveRange,\n  [b0, b1]: InclusiveRange,\n): InclusiveRange | null => {\n  const rangeStart = Math.max(a0, b0);\n  const rangeEnd = Math.min(a1, b1);\n\n  if (rangeStart <= rangeEnd) {\n    return toBrandedType<InclusiveRange>([rangeStart, rangeEnd]);\n  }\n\n  return null;\n};\n\n/**\n * Determine if a value is inside a range.\n *\n * @param value The value to check\n * @param range The range\n * @returns\n */\nexport const rangeIncludesValue = (\n  value: number,\n  [min, max]: InclusiveRange,\n): boolean => {\n  return value >= min && value <= max;\n};\n", "import type { GlobalPoint, LocalPoint, Triangle } from \"./types\";\n\n// Types\n\n/**\n * Tests if a point lies inside a triangle. This function\n * will return FALSE if the point lies exactly on the sides\n * of the triangle.\n *\n * @param triangle The triangle to test the point for\n * @param p The point to test whether is in the triangle\n * @returns TRUE if the point is inside of the triangle\n */\nexport function triangleIncludesPoint<P extends GlobalPoint | LocalPoint>(\n  [a, b, c]: Triangle<P>,\n  p: P,\n): boolean {\n  const triangleSign = (p1: P, p2: P, p3: P) =>\n    (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]);\n  const d1 = triangleSign(p, a, b);\n  const d2 = triangleSign(p, b, c);\n  const d3 = triangleSign(p, c, a);\n\n  const has_neg = d1 < 0 || d2 < 0 || d3 < 0;\n  const has_pos = d1 > 0 || d2 > 0 || d3 > 0;\n\n  return !(has_neg && has_pos);\n}\n", "//\n// Measurements\n//\n\n/**\n * By definition one radian is the angle subtended at the centre\n * of a circle by an arc that is equal in length to the radius.\n */\nexport type Radians = number & { _brand: \"excalimath__radian\" };\n\n/**\n * An angle measurement of a plane angle in which one full\n * rotation is 360 degrees.\n */\nexport type Degrees = number & { _brand: \"excalimath_degree\" };\n\n//\n// Range\n//\n\n/**\n * A number range which includes the start and end numbers in the range.\n */\nexport type InclusiveRange = [number, number] & { _brand: \"excalimath_degree\" };\n\n//\n// Point\n//\n\n/**\n * Represents a 2D position in world or canvas space. A\n * global coordinate.\n */\nexport type GlobalPoint = [x: number, y: number] & {\n  _brand: \"excalimath__globalpoint\";\n};\n\n/**\n * Represents a 2D position in whatever local space it's\n * needed. A local coordinate.\n */\nexport type LocalPoint = [x: number, y: number] & {\n  _brand: \"excalimath__localpoint\";\n};\n\n// Line\n\n/**\n * A line is an infinitely long object with no width, depth, or curvature.\n */\nexport type Line<P extends GlobalPoint | LocalPoint> = [p: P, q: P] & {\n  _brand: \"excalimath_line\";\n};\n\n/**\n * In geometry, a line segment is a part of a straight\n * line that is bounded by two distinct end points, and\n * contains every point on the line that is between its endpoints.\n */\nexport type LineSegment<P extends GlobalPoint | LocalPoint> = [a: P, b: P] & {\n  _brand: \"excalimath_linesegment\";\n};\n\n//\n// Vector\n//\n\n/**\n * Represents a 2D vector\n */\nexport type Vector = [u: number, v: number] & {\n  _brand: \"excalimath__vector\";\n};\n\n// Triangles\n\n/**\n * A triangle represented by 3 points\n */\nexport type Triangle<P extends GlobalPoint | LocalPoint> = [\n  a: P,\n  b: P,\n  c: P,\n] & {\n  _brand: \"excalimath__triangle\";\n};\n\n/**\n * A rectangular shape represented by 4 points at its corners\n */\nexport type Rectangle<P extends GlobalPoint | LocalPoint> = [a: P, b: P] & {\n  _brand: \"excalimath__rectangle\";\n};\n\n//\n// Polygon\n//\n\n/**\n * A polygon is a closed shape by connecting the given points\n * rectangles and diamonds are modelled by polygons\n */\nexport type Polygon<Point extends GlobalPoint | LocalPoint> = Point[] & {\n  _brand: \"excalimath_polygon\";\n};\n\n//\n// Curve\n//\n\n/**\n * Cubic bezier curve with four control points\n */\nexport type Curve<Point extends GlobalPoint | LocalPoint> = [\n  Point,\n  Point,\n  Point,\n  Point,\n] & {\n  _brand: \"excalimath_curve\";\n};\n\nexport type PolarCoords = [\n  radius: number,\n  /** angle in radians */\n  angle: number,\n];\n\n/**\n  An ellipse is specified by its center, angle, and its major and minor axes\n  but for the sake of simplicity, we've used halfWidth and halfHeight instead\n  in replace of semi major and semi minor axes\n */\nexport type Ellipse<Point extends GlobalPoint | LocalPoint> = {\n  center: Point;\n  halfWidth: number;\n  halfHeight: number;\n} & {\n  _brand: \"excalimath_ellipse\";\n};\n", "import Pool from \"es6-promise-pool\";\n\n// extending the missing types\n// relying on the [Index, T] to keep a correct order\ntype TPromisePool<T, Index = number> = Pool<[Index, T][]> & {\n  addEventListener: (\n    type: \"fulfilled\",\n    listener: (event: { data: { result: [Index, T] } }) => void,\n  ) => (event: { data: { result: [Index, T] } }) => void;\n  removeEventListener: (\n    type: \"fulfilled\",\n    listener: (event: { data: { result: [Index, T] } }) => void,\n  ) => void;\n};\n\nexport class PromisePool<T> {\n  private readonly pool: TPromisePool<T>;\n  private readonly entries: Record<number, T> = {};\n\n  constructor(\n    source: IterableIterator<Promise<void | readonly [number, T]>>,\n    concurrency: number,\n  ) {\n    this.pool = new Pool(\n      source as unknown as () => void | PromiseLike<[number, T][]>,\n      concurrency,\n    ) as TPromisePool<T>;\n  }\n\n  public all() {\n    const listener = (event: { data: { result: void | [number, T] } }) => {\n      if (event.data.result) {\n        // by default pool does not return the results, so we are gathering them manually\n        // with the correct call order (represented by the index in the tuple)\n        const [index, value] = event.data.result;\n        this.entries[index] = value;\n      }\n    };\n\n    this.pool.addEventListener(\"fulfilled\", listener);\n\n    return this.pool.start().then(() => {\n      setTimeout(() => {\n        this.pool.removeEventListener(\"fulfilled\", listener);\n      });\n\n      return Object.values(this.entries);\n    });\n  }\n}\n", "import { nanoid } from \"nanoid\";\nimport { Random } from \"roughjs/bin/math\";\n\nimport { isTestEnv } from \"./utils\";\n\nlet random = new Random(Date.now());\nlet testIdBase = 0;\n\nexport const randomInteger = () => Math.floor(random.next() * 2 ** 31);\n\nexport const reseed = (seed: number) => {\n  random = new Random(seed);\n  testIdBase = 0;\n};\n\nexport const randomId = () => (isTestEnv() ? `id${testIdBase++}` : nanoid());\n", "export function randomSeed() {\n    return Math.floor(Math.random() * 2 ** 31);\n}\nexport class Random {\n    constructor(seed) {\n        this.seed = seed;\n    }\n    next() {\n        if (this.seed) {\n            return ((2 ** 31 - 1) & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31;\n        }\n        else {\n            return Math.random();\n        }\n    }\n}\n", "import { average } from \"@excalidraw/math\";\n\nimport type {\n  ExcalidrawBindableElement,\n  FontFamilyValues,\n  FontString,\n} from \"@excalidraw/element/types\";\n\nimport type {\n  ActiveTool,\n  AppState,\n  ToolType,\n  UnsubscribeCallback,\n  Zoom,\n} from \"@excalidraw/excalidraw/types\";\n\nimport { COLOR_PALETTE } from \"./colors\";\nimport {\n  DEFAULT_VERSION,\n  ENV,\n  FONT_FAMILY,\n  getFontFamilyFallbacks,\n  isDarwin,\n  WINDOWS_EMOJI_FALLBACK_FONT,\n} from \"./constants\";\n\nimport type { MaybePromise, ResolutionType } from \"./utility-types\";\n\nimport type { EVENT } from \"./constants\";\n\nlet mockDateTime: string | null = null;\n\nexport const setDateTimeForTests = (dateTime: string) => {\n  mockDateTime = dateTime;\n};\n\nexport const getDateTime = () => {\n  if (mockDateTime) {\n    return mockDateTime;\n  }\n\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\n  const day = `${date.getDate()}`.padStart(2, \"0\");\n  const hr = `${date.getHours()}`.padStart(2, \"0\");\n  const min = `${date.getMinutes()}`.padStart(2, \"0\");\n\n  return `${year}-${month}-${day}-${hr}${min}`;\n};\n\nexport const capitalizeString = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const isToolIcon = (\n  target: Element | EventTarget | null,\n): target is HTMLElement =>\n  target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\n\nexport const isInputLike = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLSelectElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLInputElement ||\n  target instanceof HTMLTextAreaElement ||\n  target instanceof HTMLSelectElement;\n\nexport const isInteractive = (target: Element | EventTarget | null) => {\n  return (\n    isInputLike(target) ||\n    (target instanceof Element && !!target.closest(\"label, button\"))\n  );\n};\n\nexport const isWritableElement = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLTextAreaElement ||\n  (target instanceof HTMLInputElement &&\n    (target.type === \"text\" ||\n      target.type === \"number\" ||\n      target.type === \"password\"));\n\nexport const getFontFamilyString = ({\n  fontFamily,\n}: {\n  fontFamily: FontFamilyValues;\n}) => {\n  for (const [fontFamilyString, id] of Object.entries(FONT_FAMILY)) {\n    if (id === fontFamily) {\n      // TODO: we should fallback first to generic family names first\n      return `${fontFamilyString}${getFontFamilyFallbacks(id)\n        .map((x) => `, ${x}`)\n        .join(\"\")}`;\n    }\n  }\n  return WINDOWS_EMOJI_FALLBACK_FONT;\n};\n\n/** returns fontSize+fontFamily string for assignment to DOM elements */\nexport const getFontString = ({\n  fontSize,\n  fontFamily,\n}: {\n  fontSize: number;\n  fontFamily: FontFamilyValues;\n}) => {\n  return `${fontSize}px ${getFontFamilyString({ fontFamily })}` as FontString;\n};\n\nexport const debounce = <T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number,\n) => {\n  let handle = 0;\n  let lastArgs: T | null = null;\n  const ret = (...args: T) => {\n    lastArgs = args;\n    clearTimeout(handle);\n    handle = window.setTimeout(() => {\n      lastArgs = null;\n      fn(...args);\n    }, timeout);\n  };\n  ret.flush = () => {\n    clearTimeout(handle);\n    if (lastArgs) {\n      const _lastArgs = lastArgs;\n      lastArgs = null;\n      fn(..._lastArgs);\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = null;\n    clearTimeout(handle);\n  };\n  return ret;\n};\n\n// throttle callback to execute once per animation frame\nexport const throttleRAF = <T extends any[]>(\n  fn: (...args: T) => void,\n  opts?: { trailing?: boolean },\n) => {\n  let timerId: number | null = null;\n  let lastArgs: T | null = null;\n  let lastArgsTrailing: T | null = null;\n\n  const scheduleFunc = (args: T) => {\n    timerId = window.requestAnimationFrame(() => {\n      timerId = null;\n      fn(...args);\n      lastArgs = null;\n      if (lastArgsTrailing) {\n        lastArgs = lastArgsTrailing;\n        lastArgsTrailing = null;\n        scheduleFunc(lastArgs);\n      }\n    });\n  };\n\n  const ret = (...args: T) => {\n    if (isTestEnv()) {\n      fn(...args);\n      return;\n    }\n    lastArgs = args;\n    if (timerId === null) {\n      scheduleFunc(lastArgs);\n    } else if (opts?.trailing) {\n      lastArgsTrailing = args;\n    }\n  };\n  ret.flush = () => {\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n    if (lastArgs) {\n      fn(...(lastArgsTrailing || lastArgs));\n      lastArgs = lastArgsTrailing = null;\n    }\n  };\n  ret.cancel = () => {\n    lastArgs = lastArgsTrailing = null;\n    if (timerId !== null) {\n      cancelAnimationFrame(timerId);\n      timerId = null;\n    }\n  };\n  return ret;\n};\n\n/**\n * Exponential ease-out method\n *\n * @param {number} k - The value to be tweened.\n * @returns {number} The tweened value.\n */\nexport const easeOut = (k: number) => {\n  return 1 - Math.pow(1 - k, 4);\n};\n\nconst easeOutInterpolate = (from: number, to: number, progress: number) => {\n  return (to - from) * easeOut(progress) + from;\n};\n\n/**\n * Animates values from `fromValues` to `toValues` using the requestAnimationFrame API.\n * Executes the `onStep` callback on each step with the interpolated values.\n * Returns a function that can be called to cancel the animation.\n *\n * @example\n * // Example usage:\n * const fromValues = { x: 0, y: 0 };\n * const toValues = { x: 100, y: 200 };\n * const onStep = ({x, y}) => {\n *   setState(x, y)\n * };\n * const onCancel = () => {\n *   console.log(\"Animation canceled\");\n * };\n *\n * const cancelAnimation = easeToValuesRAF({\n *   fromValues,\n *   toValues,\n *   onStep,\n *   onCancel,\n * });\n *\n * // To cancel the animation:\n * cancelAnimation();\n */\nexport const easeToValuesRAF = <\n  T extends Record<keyof T, number>,\n  K extends keyof T,\n>({\n  fromValues,\n  toValues,\n  onStep,\n  duration = 250,\n  interpolateValue,\n  onStart,\n  onEnd,\n  onCancel,\n}: {\n  fromValues: T;\n  toValues: T;\n  /**\n   * Interpolate a single value.\n   * Return undefined to be handled by the default interpolator.\n   */\n  interpolateValue?: (\n    fromValue: number,\n    toValue: number,\n    /** no easing applied  */\n    progress: number,\n    key: K,\n  ) => number | undefined;\n  onStep: (values: T) => void;\n  duration?: number;\n  onStart?: () => void;\n  onEnd?: () => void;\n  onCancel?: () => void;\n}) => {\n  let canceled = false;\n  let frameId = 0;\n  let startTime: number;\n\n  function step(timestamp: number) {\n    if (canceled) {\n      return;\n    }\n    if (startTime === undefined) {\n      startTime = timestamp;\n      onStart?.();\n    }\n\n    const elapsed = Math.min(timestamp - startTime, duration);\n    const factor = easeOut(elapsed / duration);\n\n    const newValues = {} as T;\n\n    Object.keys(fromValues).forEach((key) => {\n      const _key = key as keyof T;\n      const result = ((toValues[_key] - fromValues[_key]) * factor +\n        fromValues[_key]) as T[keyof T];\n      newValues[_key] = result;\n    });\n\n    onStep(newValues);\n\n    if (elapsed < duration) {\n      const progress = elapsed / duration;\n\n      const newValues = {} as T;\n\n      Object.keys(fromValues).forEach((key) => {\n        const _key = key as K;\n        const startValue = fromValues[_key];\n        const endValue = toValues[_key];\n\n        let result;\n\n        result = interpolateValue\n          ? interpolateValue(startValue, endValue, progress, _key)\n          : easeOutInterpolate(startValue, endValue, progress);\n\n        if (result == null) {\n          result = easeOutInterpolate(startValue, endValue, progress);\n        }\n\n        newValues[_key] = result as T[K];\n      });\n      onStep(newValues);\n\n      frameId = window.requestAnimationFrame(step);\n    } else {\n      onStep(toValues);\n      onEnd?.();\n    }\n  }\n\n  frameId = window.requestAnimationFrame(step);\n\n  return () => {\n    onCancel?.();\n    canceled = true;\n    window.cancelAnimationFrame(frameId);\n  };\n};\n\n// https://github.com/lodash/lodash/blob/es/chunk.js\nexport const chunk = <T extends any>(\n  array: readonly T[],\n  size: number,\n): T[][] => {\n  if (!array.length || size < 1) {\n    return [];\n  }\n  let index = 0;\n  let resIndex = 0;\n  const result = Array(Math.ceil(array.length / size));\n  while (index < array.length) {\n    result[resIndex++] = array.slice(index, (index += size));\n  }\n  return result;\n};\n\nexport const selectNode = (node: Element) => {\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nexport const removeSelection = () => {\n  const selection = window.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n  }\n};\n\nexport const distance = (x: number, y: number) => Math.abs(x - y);\n\nexport const updateActiveTool = (\n  appState: Pick<AppState, \"activeTool\">,\n  data: ((\n    | {\n        type: ToolType;\n      }\n    | { type: \"custom\"; customType: string }\n  ) & { locked?: boolean }) & {\n    lastActiveToolBeforeEraser?: ActiveTool | null;\n  },\n): AppState[\"activeTool\"] => {\n  if (data.type === \"custom\") {\n    return {\n      ...appState.activeTool,\n      type: \"custom\",\n      customType: data.customType,\n      locked: data.locked ?? appState.activeTool.locked,\n    };\n  }\n\n  return {\n    ...appState.activeTool,\n    lastActiveTool:\n      data.lastActiveToolBeforeEraser === undefined\n        ? appState.activeTool.lastActiveTool\n        : data.lastActiveToolBeforeEraser,\n    type: data.type,\n    customType: null,\n    locked: data.locked ?? appState.activeTool.locked,\n  };\n};\n\nexport const isFullScreen = () =>\n  document.fullscreenElement?.nodeName === \"HTML\";\n\nexport const allowFullScreen = () =>\n  document.documentElement.requestFullscreen();\n\nexport const exitFullScreen = () => document.exitFullscreen();\n\nexport const getShortcutKey = (shortcut: string): string => {\n  shortcut = shortcut\n    .replace(/\\bAlt\\b/i, \"Alt\")\n    .replace(/\\bShift\\b/i, \"Shift\")\n    .replace(/\\b(Enter|Return)\\b/i, \"Enter\");\n  if (isDarwin) {\n    return shortcut\n      .replace(/\\bCtrlOrCmd\\b/gi, \"Cmd\")\n      .replace(/\\bAlt\\b/i, \"Option\");\n  }\n  return shortcut.replace(/\\bCtrlOrCmd\\b/gi, \"Ctrl\");\n};\n\nexport const viewportCoordsToSceneCoords = (\n  { clientX, clientY }: { clientX: number; clientY: number },\n  {\n    zoom,\n    offsetLeft,\n    offsetTop,\n    scrollX,\n    scrollY,\n  }: {\n    zoom: Zoom;\n    offsetLeft: number;\n    offsetTop: number;\n    scrollX: number;\n    scrollY: number;\n  },\n) => {\n  const x = (clientX - offsetLeft) / zoom.value - scrollX;\n  const y = (clientY - offsetTop) / zoom.value - scrollY;\n\n  return { x, y };\n};\n\nexport const sceneCoordsToViewportCoords = (\n  { sceneX, sceneY }: { sceneX: number; sceneY: number },\n  {\n    zoom,\n    offsetLeft,\n    offsetTop,\n    scrollX,\n    scrollY,\n  }: {\n    zoom: Zoom;\n    offsetLeft: number;\n    offsetTop: number;\n    scrollX: number;\n    scrollY: number;\n  },\n) => {\n  const x = (sceneX + scrollX) * zoom.value + offsetLeft;\n  const y = (sceneY + scrollY) * zoom.value + offsetTop;\n  return { x, y };\n};\n\nexport const getGlobalCSSVariable = (name: string) =>\n  getComputedStyle(document.documentElement).getPropertyValue(`--${name}`);\n\nconst RS_LTR_CHARS =\n  \"A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\" +\n  \"\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF\";\nconst RS_RTL_CHARS = \"\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC\";\nconst RE_RTL_CHECK = new RegExp(`^[^${RS_LTR_CHARS}]*[${RS_RTL_CHARS}]`);\n/**\n * Checks whether first directional character is RTL. Meaning whether it starts\n *  with RTL characters, or indeterminate (numbers etc.) characters followed by\n *  RTL.\n * See https://github.com/excalidraw/excalidraw/pull/1722#discussion_r436340171\n */\nexport const isRTL = (text: string) => RE_RTL_CHECK.test(text);\n\nexport const tupleToCoors = (\n  xyTuple: readonly [number, number],\n): { x: number; y: number } => {\n  const [x, y] = xyTuple;\n  return { x, y };\n};\n\n/** use as a rejectionHandler to mute filesystem Abort errors */\nexport const muteFSAbortError = (error?: Error) => {\n  if (error?.name === \"AbortError\") {\n    console.warn(error);\n    return;\n  }\n  throw error;\n};\n\nexport const findIndex = <T>(\n  array: readonly T[],\n  cb: (element: T, index: number, array: readonly T[]) => boolean,\n  fromIndex: number = 0,\n) => {\n  if (fromIndex < 0) {\n    fromIndex = array.length + fromIndex;\n  }\n  fromIndex = Math.min(array.length, Math.max(fromIndex, 0));\n  let index = fromIndex - 1;\n  while (++index < array.length) {\n    if (cb(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n\nexport const findLastIndex = <T>(\n  array: readonly T[],\n  cb: (element: T, index: number, array: readonly T[]) => boolean,\n  fromIndex: number = array.length - 1,\n) => {\n  if (fromIndex < 0) {\n    fromIndex = array.length + fromIndex;\n  }\n  fromIndex = Math.min(array.length - 1, Math.max(fromIndex, 0));\n  let index = fromIndex + 1;\n  while (--index > -1) {\n    if (cb(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n\nexport const isTransparent = (color: string) => {\n  const isRGBTransparent = color.length === 5 && color.substr(4, 1) === \"0\";\n  const isRRGGBBTransparent = color.length === 9 && color.substr(7, 2) === \"00\";\n  return (\n    isRGBTransparent ||\n    isRRGGBBTransparent ||\n    color === COLOR_PALETTE.transparent\n  );\n};\n\nexport const isBindingFallthroughEnabled = (el: ExcalidrawBindableElement) =>\n  el.fillStyle !== \"solid\" || isTransparent(el.backgroundColor);\n\nexport type ResolvablePromise<T> = Promise<T> & {\n  resolve: [T] extends [undefined]\n    ? (value?: MaybePromise<Awaited<T>>) => void\n    : (value: MaybePromise<Awaited<T>>) => void;\n  reject: (error: Error) => void;\n};\nexport const resolvablePromise = <T>() => {\n  let resolve!: any;\n  let reject!: any;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  (promise as any).resolve = resolve;\n  (promise as any).reject = reject;\n  return promise as ResolvablePromise<T>;\n};\n\n//https://stackoverflow.com/a/9462382/8418\nexport const nFormatter = (num: number, digits: number): string => {\n  const si = [\n    { value: 1, symbol: \"b\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1e6, symbol: \"M\" },\n    { value: 1e9, symbol: \"G\" },\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  let index;\n  for (index = si.length - 1; index > 0; index--) {\n    if (num >= si[index].value) {\n      break;\n    }\n  }\n  return (\n    (num / si[index].value).toFixed(digits).replace(rx, \"$1\") + si[index].symbol\n  );\n};\n\nexport const getVersion = () => {\n  return (\n    document.querySelector<HTMLMetaElement>('meta[name=\"version\"]')?.content ||\n    DEFAULT_VERSION\n  );\n};\n\n// Adapted from https://github.com/Modernizr/Modernizr/blob/master/feature-detects/emoji.js\nexport const supportsEmoji = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    return false;\n  }\n  const offset = 12;\n  ctx.fillStyle = \"#f00\";\n  ctx.textBaseline = \"top\";\n  ctx.font = \"32px Arial\";\n  // Modernizr used \uD83D\uDC28, but it is sort of supported on Windows 7.\n  // Luckily \uD83D\uDE00 isn't supported.\n  ctx.fillText(\"\uD83D\uDE00\", 0, 0);\n  return ctx.getImageData(offset, offset, 1, 1).data[0] !== 0;\n};\n\nexport const getNearestScrollableContainer = (\n  element: HTMLElement,\n): HTMLElement | Document => {\n  let parent = element.parentElement;\n  while (parent) {\n    if (parent === document.body) {\n      return document;\n    }\n    const { overflowY } = window.getComputedStyle(parent);\n    const hasScrollableContent = parent.scrollHeight > parent.clientHeight;\n    if (\n      hasScrollableContent &&\n      (overflowY === \"auto\" ||\n        overflowY === \"scroll\" ||\n        overflowY === \"overlay\")\n    ) {\n      return parent;\n    }\n    parent = parent.parentElement;\n  }\n  return document;\n};\n\nexport const focusNearestParent = (element: HTMLInputElement) => {\n  let parent = element.parentElement;\n  while (parent) {\n    if (parent.tabIndex > -1) {\n      parent.focus();\n      return;\n    }\n    parent = parent.parentElement;\n  }\n};\n\nexport const preventUnload = (event: BeforeUnloadEvent) => {\n  event.preventDefault();\n  // NOTE: modern browsers no longer allow showing a custom message here\n  event.returnValue = \"\";\n};\n\nexport const bytesToHexString = (bytes: Uint8Array) => {\n  return Array.from(bytes)\n    .map((byte) => `0${byte.toString(16)}`.slice(-2))\n    .join(\"\");\n};\n\nexport const getUpdatedTimestamp = () => (isTestEnv() ? 1 : Date.now());\n\n/**\n * Transforms array of objects containing `id` attribute,\n * or array of ids (strings), into a Map, keyd by `id`.\n */\nexport const arrayToMap = <T extends { id: string } | string>(\n  items: readonly T[] | Map<string, T>,\n) => {\n  if (items instanceof Map) {\n    return items;\n  }\n  return items.reduce((acc: Map<string, T>, element) => {\n    acc.set(typeof element === \"string\" ? element : element.id, element);\n    return acc;\n  }, new Map());\n};\n\nexport const arrayToMapWithIndex = <T extends { id: string }>(\n  elements: readonly T[],\n) =>\n  elements.reduce((acc, element: T, idx) => {\n    acc.set(element.id, [element, idx]);\n    return acc;\n  }, new Map<string, [element: T, index: number]>());\n\n/**\n * Transform array into an object, use only when array order is irrelevant.\n */\nexport const arrayToObject = <T>(\n  array: readonly T[],\n  groupBy?: (value: T) => string | number,\n) =>\n  array.reduce((acc, value) => {\n    acc[groupBy ? groupBy(value) : String(value)] = value;\n    return acc;\n  }, {} as { [key: string]: T });\n\n/** Doubly linked node */\nexport type Node<T> = T & {\n  prev: Node<T> | null;\n  next: Node<T> | null;\n};\n\n/**\n * Creates a circular doubly linked list by adding `prev` and `next` props to the existing array nodes.\n */\nexport const arrayToList = <T>(array: readonly T[]): Node<T>[] =>\n  array.reduce((acc, curr, index) => {\n    const node: Node<T> = { ...curr, prev: null, next: null };\n\n    // no-op for first item, we don't want circular references on a single item\n    if (index !== 0) {\n      const prevNode = acc[index - 1];\n      node.prev = prevNode;\n      prevNode.next = node;\n\n      if (index === array.length - 1) {\n        // make the references circular and connect head & tail\n        const firstNode = acc[0];\n        node.next = firstNode;\n        firstNode.prev = node;\n      }\n    }\n\n    acc.push(node);\n\n    return acc;\n  }, [] as Node<T>[]);\n\nexport const isTestEnv = () => import.meta.env.MODE === ENV.TEST;\n\nexport const isDevEnv = () => import.meta.env.MODE === ENV.DEVELOPMENT;\n\nexport const isServerEnv = () =>\n  typeof process !== \"undefined\" && !!process?.env?.NODE_ENV;\n\nexport const wrapEvent = <T extends Event>(name: EVENT, nativeEvent: T) => {\n  return new CustomEvent(name, {\n    detail: {\n      nativeEvent,\n    },\n    cancelable: true,\n  });\n};\n\nexport const updateObject = <T extends Record<string, any>>(\n  obj: T,\n  updates: Partial<T>,\n): T => {\n  let didChange = false;\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (obj as any)[key] === value &&\n        // if object, always update because its attrs could have changed\n        (typeof value !== \"object\" || value === null)\n      ) {\n        continue;\n      }\n      didChange = true;\n    }\n  }\n\n  if (!didChange) {\n    return obj;\n  }\n\n  return {\n    ...obj,\n    ...updates,\n  };\n};\n\nexport const isPrimitive = (val: any) => {\n  const type = typeof val;\n  return val == null || (type !== \"object\" && type !== \"function\");\n};\n\nexport const getFrame = () => {\n  try {\n    return window.self === window.top ? \"top\" : \"iframe\";\n  } catch (error) {\n    return \"iframe\";\n  }\n};\n\nexport const isRunningInIframe = () => getFrame() === \"iframe\";\n\nexport const isPromiseLike = (\n  value: any,\n): value is Promise<ResolutionType<typeof value>> => {\n  return (\n    !!value &&\n    typeof value === \"object\" &&\n    \"then\" in value &&\n    \"catch\" in value &&\n    \"finally\" in value\n  );\n};\n\nexport const queryFocusableElements = (container: HTMLElement | null) => {\n  const focusableElements = container?.querySelectorAll<HTMLElement>(\n    \"button, a, input, select, textarea, div[tabindex], label[tabindex]\",\n  );\n\n  return focusableElements\n    ? Array.from(focusableElements).filter(\n        (element) =>\n          element.tabIndex > -1 && !(element as HTMLInputElement).disabled,\n      )\n    : [];\n};\n\n/** use as a fallback after identity check (for perf reasons) */\nconst _defaultIsShallowComparatorFallback = (a: any, b: any): boolean => {\n  // consider two empty arrays equal\n  if (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === 0 &&\n    b.length === 0\n  ) {\n    return true;\n  }\n  return a === b;\n};\n\n/**\n * Returns whether object/array is shallow equal.\n * Considers empty object/arrays as equal (whether top-level or second-level).\n */\nexport const isShallowEqual = <\n  T extends Record<string, any>,\n  K extends readonly unknown[],\n>(\n  objA: T,\n  objB: T,\n  comparators?:\n    | { [key in keyof T]?: (a: T[key], b: T[key]) => boolean }\n    | (keyof T extends K[number]\n        ? K extends readonly (keyof T)[]\n          ? K\n          : {\n              _error: \"keys are either missing or include keys not in compared obj\";\n            }\n        : {\n            _error: \"keys are either missing or include keys not in compared obj\";\n          }),\n  debug = false,\n) => {\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  if (aKeys.length !== bKeys.length) {\n    if (debug) {\n      console.warn(\n        `%cisShallowEqual: objects don't have same properties ->`,\n        \"color: #8B4000\",\n        objA,\n        objB,\n      );\n    }\n    return false;\n  }\n\n  if (comparators && Array.isArray(comparators)) {\n    for (const key of comparators) {\n      const ret =\n        objA[key] === objB[key] ||\n        _defaultIsShallowComparatorFallback(objA[key], objB[key]);\n      if (!ret) {\n        if (debug) {\n          console.warn(\n            `%cisShallowEqual: ${key} not equal ->`,\n            \"color: #8B4000\",\n            objA[key],\n            objB[key],\n          );\n        }\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return aKeys.every((key) => {\n    const comparator = (\n      comparators as { [key in keyof T]?: (a: T[key], b: T[key]) => boolean }\n    )?.[key as keyof T];\n    const ret = comparator\n      ? comparator(objA[key], objB[key])\n      : objA[key] === objB[key] ||\n        _defaultIsShallowComparatorFallback(objA[key], objB[key]);\n\n    if (!ret && debug) {\n      console.warn(\n        `%cisShallowEqual: ${key} not equal ->`,\n        \"color: #8B4000\",\n        objA[key],\n        objB[key],\n      );\n    }\n    return ret;\n  });\n};\n\n// taken from Radix UI\n// https://github.com/radix-ui/primitives/blob/main/packages/core/primitive/src/primitive.tsx\nexport const composeEventHandlers = <E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {},\n) => {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (\n      !checkForDefaultPrevented ||\n      !(event as unknown as Event)?.defaultPrevented\n    ) {\n      return ourEventHandler?.(event);\n    }\n  };\n};\n\n/**\n * supply `null` as message if non-never value is valid, you just need to\n * typecheck against it\n */\nexport const assertNever = (\n  value: never,\n  message: string | null,\n  softAssert?: boolean,\n): never => {\n  if (!message) {\n    return value;\n  }\n  if (softAssert) {\n    console.error(message);\n    return value;\n  }\n\n  throw new Error(message);\n};\n\nexport function invariant(condition: any, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Memoizes on values of `opts` object (strict equality).\n */\nexport const memoize = <T extends Record<string, any>, R extends any>(\n  func: (opts: T) => R,\n) => {\n  let lastArgs: Map<string, any> | undefined;\n  let lastResult: R | undefined;\n\n  const ret = function (opts: T) {\n    const currentArgs = Object.entries(opts);\n\n    if (lastArgs) {\n      let argsAreEqual = true;\n      for (const [key, value] of currentArgs) {\n        if (lastArgs.get(key) !== value) {\n          argsAreEqual = false;\n          break;\n        }\n      }\n      if (argsAreEqual) {\n        return lastResult;\n      }\n    }\n\n    const result = func(opts);\n\n    lastArgs = new Map(currentArgs);\n    lastResult = result;\n\n    return result;\n  };\n\n  ret.clear = () => {\n    lastArgs = undefined;\n    lastResult = undefined;\n  };\n\n  return ret as typeof func & { clear: () => void };\n};\n\n/** Checks if value is inside given collection. Useful for type-safety. */\nexport const isMemberOf = <T extends string>(\n  /** Set/Map/Array/Object */\n  collection: Set<T> | readonly T[] | Record<T, any> | Map<T, any>,\n  /** value to look for */\n  value: string,\n): value is T => {\n  return collection instanceof Set || collection instanceof Map\n    ? collection.has(value as T)\n    : \"includes\" in collection\n    ? collection.includes(value as T)\n    : collection.hasOwnProperty(value);\n};\n\nexport const cloneJSON = <T>(obj: T): T => JSON.parse(JSON.stringify(obj));\n\nexport const updateStable = <T extends any[] | Record<string, any>>(\n  prevValue: T,\n  nextValue: T,\n) => {\n  if (isShallowEqual(prevValue, nextValue)) {\n    return prevValue;\n  }\n  return nextValue;\n};\n\n// Window\nexport function addEventListener<K extends keyof WindowEventMap>(\n  target: Window & typeof globalThis,\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\nexport function addEventListener(\n  target: Window & typeof globalThis,\n  type: string,\n  listener: (this: Window, ev: Event) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\n// Document\nexport function addEventListener<K extends keyof DocumentEventMap>(\n  target: Document,\n  type: K,\n  listener: (this: Document, ev: DocumentEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\nexport function addEventListener(\n  target: Document,\n  type: string,\n  listener: (this: Document, ev: Event) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\n// FontFaceSet (document.fonts)\nexport function addEventListener<K extends keyof FontFaceSetEventMap>(\n  target: FontFaceSet,\n  type: K,\n  listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\n// HTMLElement / mix\nexport function addEventListener<K extends keyof HTMLElementEventMap>(\n  target:\n    | Document\n    | (Window & typeof globalThis)\n    | HTMLElement\n    | undefined\n    | null\n    | false,\n  type: K,\n  listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback;\n// implem\nexport function addEventListener(\n  /**\n   * allows for falsy values so you don't have to type check when adding\n   * event listeners to optional elements\n   */\n  target:\n    | Document\n    | (Window & typeof globalThis)\n    | FontFaceSet\n    | HTMLElement\n    | undefined\n    | null\n    | false,\n  type: keyof WindowEventMap | keyof DocumentEventMap | string,\n  listener: (ev: Event) => any,\n  options?: boolean | AddEventListenerOptions,\n): UnsubscribeCallback {\n  if (!target) {\n    return () => {};\n  }\n  target?.addEventListener?.(type, listener, options);\n  return () => {\n    target?.removeEventListener?.(type, listener, options);\n  };\n}\n\nexport function getSvgPathFromStroke(points: number[][], closed = true) {\n  const len = points.length;\n\n  if (len < 4) {\n    return ``;\n  }\n\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(\n    2,\n  )},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(\n    b[1],\n    c[1],\n  ).toFixed(2)} T`;\n\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(\n      2,\n    )} `;\n  }\n\n  if (closed) {\n    result += \"Z\";\n  }\n\n  return result;\n}\n\nexport const normalizeEOL = (str: string) => {\n  return str.replace(/\\r?\\n|\\r/g, \"\\n\");\n};\n\n// -----------------------------------------------------------------------------\ntype HasBrand<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [K in keyof T]: K extends `~brand${infer _}` ? true : never;\n}[keyof T];\n\ntype RemoveAllBrands<T> = HasBrand<T> extends true\n  ? {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      [K in keyof T as K extends `~brand~${infer _}` ? never : K]: T[K];\n    }\n  : never;\n\n// adapted from https://github.com/colinhacks/zod/discussions/1994#discussioncomment-6068940\n// currently does not cover all types (e.g. tuples, promises...)\ntype Unbrand<T> = T extends Map<infer E, infer F>\n  ? Map<E, F>\n  : T extends Set<infer E>\n  ? Set<E>\n  : T extends Array<infer E>\n  ? Array<E>\n  : RemoveAllBrands<T>;\n\n/**\n * Makes type into a branded type, ensuring that value is assignable to\n * the base ubranded type. Optionally you can explicitly supply current value\n * type to combine both (useful for composite branded types. Make sure you\n * compose branded types which are not composite themselves.)\n */\nexport const toBrandedType = <BrandedType, CurrentType = BrandedType>(\n  value: Unbrand<BrandedType>,\n) => {\n  return value as CurrentType & BrandedType;\n};\n\n// -----------------------------------------------------------------------------\n\n// Promise.try, adapted from https://github.com/sindresorhus/p-try\nexport const promiseTry = async <TValue, TArgs extends unknown[]>(\n  fn: (...args: TArgs) => PromiseLike<TValue> | TValue,\n  ...args: TArgs\n): Promise<TValue> => {\n  return new Promise((resolve) => {\n    resolve(fn(...args));\n  });\n};\n\nexport const isAnyTrue = (...args: boolean[]): boolean =>\n  Math.max(...args.map((arg) => (arg ? 1 : 0))) > 0;\n\nexport const safelyParseJSON = (json: string): Record<string, any> | null => {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return null;\n  }\n};\n\n/**\n * use when you need to render unsafe string as HTML attribute, but MAKE SURE\n * the attribute is double-quoted when constructing the HTML string\n */\nexport const escapeDoubleQuotes = (str: string) => {\n  return str.replace(/\"/g, \"&quot;\");\n};\n\nexport const castArray = <T>(value: T | T[]): T[] =>\n  Array.isArray(value) ? value : [value];\n", "import { sanitizeUrl } from \"@braintree/sanitize-url\";\n\nimport { escapeDoubleQuotes } from \"./utils\";\n\nexport const normalizeLink = (link: string) => {\n  link = link.trim();\n  if (!link) {\n    return link;\n  }\n  return sanitizeUrl(escapeDoubleQuotes(link));\n};\n\nexport const isLocalLink = (link: string | null) => {\n  return !!(link?.includes(location.origin) || link?.startsWith(\"/\"));\n};\n\n/**\n * Returns URL sanitized and safe for usage in places such as\n * iframe's src attribute or <a> href attributes.\n */\nexport const toValidURL = (link: string) => {\n  link = normalizeLink(link);\n\n  // make relative links into fully-qualified urls\n  if (link.startsWith(\"/\")) {\n    return `${location.origin}${link}`;\n  }\n\n  try {\n    new URL(link);\n  } catch {\n    // if link does not parse as URL, assume invalid and return blank page\n    return \"about:blank\";\n  }\n\n  return link;\n};\n", "import rough from \"roughjs/bin/rough\";\n\nimport { rescalePoints, arrayToMap, invariant } from \"@excalidraw/common\";\n\nimport {\n  degreesToRadians,\n  lineSegment,\n  pointFrom,\n  pointDistance,\n  pointFromArray,\n  pointRotateRads,\n} from \"@excalidraw/math\";\n\nimport { getCurvePathOps } from \"@excalidraw/utils/shape\";\n\nimport type {\n  Degrees,\n  GlobalPoint,\n  LineSegment,\n  LocalPoint,\n  Radians,\n} from \"@excalidraw/math\";\n\nimport type { AppState } from \"@excalidraw/excalidraw/types\";\n\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport { ShapeCache } from \"./ShapeCache\";\nimport { generateRoughOptions } from \"./Shape\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { getBoundTextElement, getContainerElement } from \"./textElement\";\nimport {\n  isArrowElement,\n  isBoundToContainer,\n  isFreeDrawElement,\n  isLinearElement,\n  isTextElement,\n} from \"./typeChecks\";\n\nimport type {\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  Arrowhead,\n  ExcalidrawFreeDrawElement,\n  NonDeleted,\n  ExcalidrawTextElementWithContainer,\n  ElementsMap,\n} from \"./types\";\nimport type { Drawable, Op } from \"roughjs/bin/core\";\nimport type { Point as RoughPoint } from \"roughjs/bin/geometry\";\n\nexport type RectangleBox = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  angle: number;\n};\n\ntype MaybeQuadraticSolution = [number | null, number | null] | false;\n\n/**\n * x and y position of top left corner, x and y position of bottom right corner\n */\nexport type Bounds = readonly [\n  minX: number,\n  minY: number,\n  maxX: number,\n  maxY: number,\n];\n\nexport type SceneBounds = readonly [\n  sceneX: number,\n  sceneY: number,\n  sceneX2: number,\n  sceneY2: number,\n];\n\nexport class ElementBounds {\n  private static boundsCache = new WeakMap<\n    ExcalidrawElement,\n    {\n      bounds: Bounds;\n      version: ExcalidrawElement[\"version\"];\n    }\n  >();\n\n  static getBounds(element: ExcalidrawElement, elementsMap: ElementsMap) {\n    const cachedBounds = ElementBounds.boundsCache.get(element);\n\n    if (\n      cachedBounds?.version &&\n      cachedBounds.version === element.version &&\n      // we don't invalidate cache when we update containers and not labels,\n      // which is causing problems down the line. Fix TBA.\n      !isBoundToContainer(element)\n    ) {\n      return cachedBounds.bounds;\n    }\n    const bounds = ElementBounds.calculateBounds(element, elementsMap);\n\n    ElementBounds.boundsCache.set(element, {\n      version: element.version,\n      bounds,\n    });\n\n    return bounds;\n  }\n\n  private static calculateBounds(\n    element: ExcalidrawElement,\n    elementsMap: ElementsMap,\n  ): Bounds {\n    let bounds: Bounds;\n\n    const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n      element,\n      elementsMap,\n    );\n    if (isFreeDrawElement(element)) {\n      const [minX, minY, maxX, maxY] = getBoundsFromPoints(\n        element.points.map(([x, y]) =>\n          pointRotateRads(\n            pointFrom(x, y),\n            pointFrom(cx - element.x, cy - element.y),\n            element.angle,\n          ),\n        ),\n      );\n\n      return [\n        minX + element.x,\n        minY + element.y,\n        maxX + element.x,\n        maxY + element.y,\n      ];\n    } else if (isLinearElement(element)) {\n      bounds = getLinearElementRotatedBounds(element, cx, cy, elementsMap);\n    } else if (element.type === \"diamond\") {\n      const [x11, y11] = pointRotateRads(\n        pointFrom(cx, y1),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x12, y12] = pointRotateRads(\n        pointFrom(cx, y2),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x22, y22] = pointRotateRads(\n        pointFrom(x1, cy),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x21, y21] = pointRotateRads(\n        pointFrom(x2, cy),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const minX = Math.min(x11, x12, x22, x21);\n      const minY = Math.min(y11, y12, y22, y21);\n      const maxX = Math.max(x11, x12, x22, x21);\n      const maxY = Math.max(y11, y12, y22, y21);\n      bounds = [minX, minY, maxX, maxY];\n    } else if (element.type === \"ellipse\") {\n      const w = (x2 - x1) / 2;\n      const h = (y2 - y1) / 2;\n      const cos = Math.cos(element.angle);\n      const sin = Math.sin(element.angle);\n      const ww = Math.hypot(w * cos, h * sin);\n      const hh = Math.hypot(h * cos, w * sin);\n      bounds = [cx - ww, cy - hh, cx + ww, cy + hh];\n    } else {\n      const [x11, y11] = pointRotateRads(\n        pointFrom(x1, y1),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x12, y12] = pointRotateRads(\n        pointFrom(x1, y2),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x22, y22] = pointRotateRads(\n        pointFrom(x2, y2),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const [x21, y21] = pointRotateRads(\n        pointFrom(x2, y1),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n      const minX = Math.min(x11, x12, x22, x21);\n      const minY = Math.min(y11, y12, y22, y21);\n      const maxX = Math.max(x11, x12, x22, x21);\n      const maxY = Math.max(y11, y12, y22, y21);\n      bounds = [minX, minY, maxX, maxY];\n    }\n\n    return bounds;\n  }\n}\n\n// Scene -> Scene coords, but in x1,x2,y1,y2 format.\n//\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\nexport const getElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n  includeBoundText: boolean = false,\n): [number, number, number, number, number, number] => {\n  if (isFreeDrawElement(element)) {\n    return getFreeDrawElementAbsoluteCoords(element);\n  } else if (isLinearElement(element)) {\n    return LinearElementEditor.getElementAbsoluteCoords(\n      element,\n      elementsMap,\n      includeBoundText,\n    );\n  } else if (isTextElement(element)) {\n    const container = elementsMap\n      ? getContainerElement(element, elementsMap)\n      : null;\n    if (isArrowElement(container)) {\n      const { x, y } = LinearElementEditor.getBoundTextElementPosition(\n        container,\n        element as ExcalidrawTextElementWithContainer,\n        elementsMap,\n      );\n      return [\n        x,\n        y,\n        x + element.width,\n        y + element.height,\n        x + element.width / 2,\n        y + element.height / 2,\n      ];\n    }\n  }\n  return [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  ];\n};\n\n/*\n * for a given element, `getElementLineSegments` returns line segments\n * that can be used for visual collision detection (useful for frames)\n * as opposed to bounding box collision detection\n */\nexport const getElementLineSegments = (\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n): LineSegment<GlobalPoint>[] => {\n  const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n    element,\n    elementsMap,\n  );\n\n  const center: GlobalPoint = pointFrom(cx, cy);\n\n  if (isLinearElement(element) || isFreeDrawElement(element)) {\n    const segments: LineSegment<GlobalPoint>[] = [];\n\n    let i = 0;\n\n    while (i < element.points.length - 1) {\n      segments.push(\n        lineSegment(\n          pointRotateRads(\n            pointFrom(\n              element.points[i][0] + element.x,\n              element.points[i][1] + element.y,\n            ),\n            center,\n            element.angle,\n          ),\n          pointRotateRads(\n            pointFrom(\n              element.points[i + 1][0] + element.x,\n              element.points[i + 1][1] + element.y,\n            ),\n            center,\n            element.angle,\n          ),\n        ),\n      );\n      i++;\n    }\n\n    return segments;\n  }\n\n  const [nw, ne, sw, se, n, s, w, e] = (\n    [\n      [x1, y1],\n      [x2, y1],\n      [x1, y2],\n      [x2, y2],\n      [cx, y1],\n      [cx, y2],\n      [x1, cy],\n      [x2, cy],\n    ] as GlobalPoint[]\n  ).map((point) => pointRotateRads(point, center, element.angle));\n\n  if (element.type === \"diamond\") {\n    return [\n      lineSegment(n, w),\n      lineSegment(n, e),\n      lineSegment(s, w),\n      lineSegment(s, e),\n    ];\n  }\n\n  if (element.type === \"ellipse\") {\n    return [\n      lineSegment(n, w),\n      lineSegment(n, e),\n      lineSegment(s, w),\n      lineSegment(s, e),\n      lineSegment(n, w),\n      lineSegment(n, e),\n      lineSegment(s, w),\n      lineSegment(s, e),\n    ];\n  }\n\n  return [\n    lineSegment(nw, ne),\n    lineSegment(sw, se),\n    lineSegment(nw, sw),\n    lineSegment(ne, se),\n    lineSegment(nw, e),\n    lineSegment(sw, e),\n    lineSegment(ne, w),\n    lineSegment(se, w),\n  ];\n};\n\n/**\n * Scene -> Scene coords, but in x1,x2,y1,y2 format.\n *\n * Rectangle here means any rectangular frame, not an excalidraw element.\n */\nexport const getRectangleBoxAbsoluteCoords = (boxSceneCoords: RectangleBox) => {\n  return [\n    boxSceneCoords.x,\n    boxSceneCoords.y,\n    boxSceneCoords.x + boxSceneCoords.width,\n    boxSceneCoords.y + boxSceneCoords.height,\n    boxSceneCoords.x + boxSceneCoords.width / 2,\n    boxSceneCoords.y + boxSceneCoords.height / 2,\n  ];\n};\n\nexport const getDiamondPoints = (element: ExcalidrawElement) => {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = 0;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n};\n\n// reference: https://eliot-jones.com/2019/12/cubic-bezier-curve-bounding-boxes\nconst getBezierValueForT = (\n  t: number,\n  p0: number,\n  p1: number,\n  p2: number,\n  p3: number,\n) => {\n  const oneMinusT = 1 - t;\n  return (\n    Math.pow(oneMinusT, 3) * p0 +\n    3 * Math.pow(oneMinusT, 2) * t * p1 +\n    3 * oneMinusT * Math.pow(t, 2) * p2 +\n    Math.pow(t, 3) * p3\n  );\n};\n\nconst solveQuadratic = (\n  p0: number,\n  p1: number,\n  p2: number,\n  p3: number,\n): MaybeQuadraticSolution => {\n  const i = p1 - p0;\n  const j = p2 - p1;\n  const k = p3 - p2;\n\n  const a = 3 * i - 6 * j + 3 * k;\n  const b = 6 * j - 6 * i;\n  const c = 3 * i;\n\n  const sqrtPart = b * b - 4 * a * c;\n  const hasSolution = sqrtPart >= 0;\n\n  if (!hasSolution) {\n    return false;\n  }\n\n  let s1 = null;\n  let s2 = null;\n\n  let t1 = Infinity;\n  let t2 = Infinity;\n\n  if (a === 0) {\n    t1 = t2 = -c / b;\n  } else {\n    t1 = (-b + Math.sqrt(sqrtPart)) / (2 * a);\n    t2 = (-b - Math.sqrt(sqrtPart)) / (2 * a);\n  }\n\n  if (t1 >= 0 && t1 <= 1) {\n    s1 = getBezierValueForT(t1, p0, p1, p2, p3);\n  }\n\n  if (t2 >= 0 && t2 <= 1) {\n    s2 = getBezierValueForT(t2, p0, p1, p2, p3);\n  }\n\n  return [s1, s2];\n};\n\nconst getCubicBezierCurveBound = (\n  p0: GlobalPoint,\n  p1: GlobalPoint,\n  p2: GlobalPoint,\n  p3: GlobalPoint,\n): Bounds => {\n  const solX = solveQuadratic(p0[0], p1[0], p2[0], p3[0]);\n  const solY = solveQuadratic(p0[1], p1[1], p2[1], p3[1]);\n\n  let minX = Math.min(p0[0], p3[0]);\n  let maxX = Math.max(p0[0], p3[0]);\n\n  if (solX) {\n    const xs = solX.filter((x) => x !== null) as number[];\n    minX = Math.min(minX, ...xs);\n    maxX = Math.max(maxX, ...xs);\n  }\n\n  let minY = Math.min(p0[1], p3[1]);\n  let maxY = Math.max(p0[1], p3[1]);\n  if (solY) {\n    const ys = solY.filter((y) => y !== null) as number[];\n    minY = Math.min(minY, ...ys);\n    maxY = Math.max(maxY, ...ys);\n  }\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getMinMaxXYFromCurvePathOps = (\n  ops: Op[],\n  transformXY?: (p: GlobalPoint) => GlobalPoint,\n): Bounds => {\n  let currentP: GlobalPoint = pointFrom(0, 0);\n\n  const { minX, minY, maxX, maxY } = ops.reduce(\n    (limits, { op, data }) => {\n      // There are only four operation types:\n      // move, bcurveTo, lineTo, and curveTo\n      if (op === \"move\") {\n        // change starting point\n        const p: GlobalPoint | undefined = pointFromArray(data);\n        invariant(p != null, \"Op data is not a point\");\n        currentP = p;\n        // move operation does not draw anything; so, it always\n        // returns false\n      } else if (op === \"bcurveTo\") {\n        const _p1 = pointFrom<GlobalPoint>(data[0], data[1]);\n        const _p2 = pointFrom<GlobalPoint>(data[2], data[3]);\n        const _p3 = pointFrom<GlobalPoint>(data[4], data[5]);\n\n        const p1 = transformXY ? transformXY(_p1) : _p1;\n        const p2 = transformXY ? transformXY(_p2) : _p2;\n        const p3 = transformXY ? transformXY(_p3) : _p3;\n\n        const p0 = transformXY ? transformXY(currentP) : currentP;\n        currentP = _p3;\n\n        const [minX, minY, maxX, maxY] = getCubicBezierCurveBound(\n          p0,\n          p1,\n          p2,\n          p3,\n        );\n\n        limits.minX = Math.min(limits.minX, minX);\n        limits.minY = Math.min(limits.minY, minY);\n\n        limits.maxX = Math.max(limits.maxX, maxX);\n        limits.maxY = Math.max(limits.maxY, maxY);\n      } else if (op === \"lineTo\") {\n        // TODO: Implement this\n      } else if (op === \"qcurveTo\") {\n        // TODO: Implement this\n      }\n      return limits;\n    },\n    { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n  );\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getBoundsFromPoints = (\n  points: ExcalidrawFreeDrawElement[\"points\"],\n): Bounds => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  for (const [x, y] of points) {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n\n  return [minX, minY, maxX, maxY];\n};\n\nconst getFreeDrawElementAbsoluteCoords = (\n  element: ExcalidrawFreeDrawElement,\n): [number, number, number, number, number, number] => {\n  const [minX, minY, maxX, maxY] = getBoundsFromPoints(element.points);\n  const x1 = minX + element.x;\n  const y1 = minY + element.y;\n  const x2 = maxX + element.x;\n  const y2 = maxY + element.y;\n  return [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2];\n};\n\n/** @returns number in pixels */\nexport const getArrowheadSize = (arrowhead: Arrowhead): number => {\n  switch (arrowhead) {\n    case \"arrow\":\n      return 25;\n    case \"diamond\":\n    case \"diamond_outline\":\n      return 12;\n    case \"crowfoot_many\":\n    case \"crowfoot_one\":\n    case \"crowfoot_one_or_many\":\n      return 20;\n    default:\n      return 15;\n  }\n};\n\n/** @returns number in degrees */\nexport const getArrowheadAngle = (arrowhead: Arrowhead): Degrees => {\n  switch (arrowhead) {\n    case \"bar\":\n      return 90 as Degrees;\n    case \"arrow\":\n      return 20 as Degrees;\n    default:\n      return 25 as Degrees;\n  }\n};\n\nexport const getArrowheadPoints = (\n  element: ExcalidrawLinearElement,\n  shape: Drawable[],\n  position: \"start\" | \"end\",\n  arrowhead: Arrowhead,\n) => {\n  if (shape.length < 1) {\n    return null;\n  }\n\n  const ops = getCurvePathOps(shape[0]);\n  if (ops.length < 1) {\n    return null;\n  }\n\n  // The index of the bCurve operation to examine.\n  const index = position === \"start\" ? 1 : ops.length - 1;\n\n  const data = ops[index].data;\n\n  invariant(data.length === 6, \"Op data length is not 6\");\n\n  const p3 = pointFrom(data[4], data[5]);\n  const p2 = pointFrom(data[2], data[3]);\n  const p1 = pointFrom(data[0], data[1]);\n\n  // We need to find p0 of the bezier curve.\n  // It is typically the last point of the previous\n  // curve; it can also be the position of moveTo operation.\n  const prevOp = ops[index - 1];\n  let p0 = pointFrom(0, 0);\n  if (prevOp.op === \"move\") {\n    const p = pointFromArray(prevOp.data);\n    invariant(p != null, \"Op data is not a point\");\n    p0 = p;\n  } else if (prevOp.op === \"bcurveTo\") {\n    p0 = pointFrom(prevOp.data[4], prevOp.data[5]);\n  }\n\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\n  const equation = (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n\n  // Ee know the last point of the arrow (or the first, if start arrowhead).\n  const [x2, y2] = position === \"start\" ? p0 : p3;\n\n  // By using cubic bezier equation (B(t)) and the given parameters,\n  // we calculate a point that is closer to the last point.\n  // The value 0.3 is chosen arbitrarily and it works best for all\n  // the tested cases.\n  const [x1, y1] = [equation(0.3, 0), equation(0.3, 1)];\n\n  // Find the normalized direction vector based on the\n  // previously calculated points.\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  const nx = (x2 - x1) / distance;\n  const ny = (y2 - y1) / distance;\n\n  const size = getArrowheadSize(arrowhead);\n\n  let length = 0;\n\n  {\n    // Length for -> arrows is based on the length of the last section\n    const [cx, cy] =\n      position === \"end\"\n        ? element.points[element.points.length - 1]\n        : element.points[0];\n    const [px, py] =\n      element.points.length > 1\n        ? position === \"end\"\n          ? element.points[element.points.length - 2]\n          : element.points[1]\n        : [0, 0];\n\n    length = Math.hypot(cx - px, cy - py);\n  }\n\n  // Scale down the arrowhead until we hit a certain size so that it doesn't look weird.\n  // This value is selected by minimizing a minimum size with the last segment of the arrowhead\n  const lengthMultiplier =\n    arrowhead === \"diamond\" || arrowhead === \"diamond_outline\" ? 0.25 : 0.5;\n  const minSize = Math.min(size, length * lengthMultiplier);\n  const xs = x2 - nx * minSize;\n  const ys = y2 - ny * minSize;\n\n  if (\n    arrowhead === \"dot\" ||\n    arrowhead === \"circle\" ||\n    arrowhead === \"circle_outline\"\n  ) {\n    const diameter = Math.hypot(ys - y2, xs - x2) + element.strokeWidth - 2;\n    return [x2, y2, diameter];\n  }\n\n  const angle = getArrowheadAngle(arrowhead);\n\n  if (arrowhead === \"crowfoot_many\" || arrowhead === \"crowfoot_one_or_many\") {\n    // swap (xs, ys) with (x2, y2)\n    const [x3, y3] = pointRotateRads(\n      pointFrom(x2, y2),\n      pointFrom(xs, ys),\n      degreesToRadians(-angle as Degrees),\n    );\n    const [x4, y4] = pointRotateRads(\n      pointFrom(x2, y2),\n      pointFrom(xs, ys),\n      degreesToRadians(angle),\n    );\n    return [xs, ys, x3, y3, x4, y4];\n  }\n\n  // Return points\n  const [x3, y3] = pointRotateRads(\n    pointFrom(xs, ys),\n    pointFrom(x2, y2),\n    ((-angle * Math.PI) / 180) as Radians,\n  );\n  const [x4, y4] = pointRotateRads(\n    pointFrom(xs, ys),\n    pointFrom(x2, y2),\n    degreesToRadians(angle),\n  );\n\n  if (arrowhead === \"diamond\" || arrowhead === \"diamond_outline\") {\n    // point opposite to the arrowhead point\n    let ox;\n    let oy;\n\n    if (position === \"start\") {\n      const [px, py] = element.points.length > 1 ? element.points[1] : [0, 0];\n\n      [ox, oy] = pointRotateRads(\n        pointFrom(x2 + minSize * 2, y2),\n        pointFrom(x2, y2),\n        Math.atan2(py - y2, px - x2) as Radians,\n      );\n    } else {\n      const [px, py] =\n        element.points.length > 1\n          ? element.points[element.points.length - 2]\n          : [0, 0];\n\n      [ox, oy] = pointRotateRads(\n        pointFrom(x2 - minSize * 2, y2),\n        pointFrom(x2, y2),\n        Math.atan2(y2 - py, x2 - px) as Radians,\n      );\n    }\n\n    return [x2, y2, x3, y3, ox, oy, x4, y4];\n  }\n\n  return [x2, y2, x3, y3, x4, y4];\n};\n\nconst generateLinearElementShape = (\n  element: ExcalidrawLinearElement,\n): Drawable => {\n  const generator = rough.generator();\n  const options = generateRoughOptions(element);\n\n  const method = (() => {\n    if (element.roundness) {\n      return \"curve\";\n    }\n    if (options.fill) {\n      return \"polygon\";\n    }\n    return \"linearPath\";\n  })();\n\n  return generator[method](\n    element.points as Mutable<LocalPoint>[] as RoughPoint[],\n    options,\n  );\n};\n\nconst getLinearElementRotatedBounds = (\n  element: ExcalidrawLinearElement,\n  cx: number,\n  cy: number,\n  elementsMap: ElementsMap,\n): Bounds => {\n  const boundTextElement = getBoundTextElement(element, elementsMap);\n\n  if (element.points.length < 2) {\n    const [pointX, pointY] = element.points[0];\n    const [x, y] = pointRotateRads(\n      pointFrom(element.x + pointX, element.y + pointY),\n      pointFrom(cx, cy),\n      element.angle,\n    );\n\n    let coords: Bounds = [x, y, x, y];\n    if (boundTextElement) {\n      const coordsWithBoundText = LinearElementEditor.getMinMaxXYWithBoundText(\n        element,\n        elementsMap,\n        [x, y, x, y],\n        boundTextElement,\n      );\n      coords = [\n        coordsWithBoundText[0],\n        coordsWithBoundText[1],\n        coordsWithBoundText[2],\n        coordsWithBoundText[3],\n      ];\n    }\n    return coords;\n  }\n\n  // first element is always the curve\n  const cachedShape = ShapeCache.get(element)?.[0];\n  const shape = cachedShape ?? generateLinearElementShape(element);\n  const ops = getCurvePathOps(shape);\n  const transformXY = ([x, y]: GlobalPoint) =>\n    pointRotateRads<GlobalPoint>(\n      pointFrom(element.x + x, element.y + y),\n      pointFrom(cx, cy),\n      element.angle,\n    );\n  const res = getMinMaxXYFromCurvePathOps(ops, transformXY);\n  let coords: Bounds = [res[0], res[1], res[2], res[3]];\n  if (boundTextElement) {\n    const coordsWithBoundText = LinearElementEditor.getMinMaxXYWithBoundText(\n      element,\n      elementsMap,\n      coords,\n      boundTextElement,\n    );\n    coords = [\n      coordsWithBoundText[0],\n      coordsWithBoundText[1],\n      coordsWithBoundText[2],\n      coordsWithBoundText[3],\n    ];\n  }\n  return coords;\n};\n\nexport const getElementBounds = (\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n): Bounds => {\n  return ElementBounds.getBounds(element, elementsMap);\n};\n\nexport const getCommonBounds = (\n  elements: readonly ExcalidrawElement[],\n  elementsMap?: ElementsMap,\n): Bounds => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  const _elementsMap = elementsMap || arrayToMap(elements);\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element, _elementsMap);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getDraggedElementsBounds = (\n  elements: ExcalidrawElement[],\n  dragOffset: { x: number; y: number },\n) => {\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  return [\n    minX + dragOffset.x,\n    minY + dragOffset.y,\n    maxX + dragOffset.x,\n    maxY + dragOffset.y,\n  ];\n};\n\nexport const getResizedElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n  nextWidth: number,\n  nextHeight: number,\n  normalizePoints: boolean,\n): Bounds => {\n  if (!(isLinearElement(element) || isFreeDrawElement(element))) {\n    return [\n      element.x,\n      element.y,\n      element.x + nextWidth,\n      element.y + nextHeight,\n    ];\n  }\n\n  const points = rescalePoints(\n    0,\n    nextWidth,\n    rescalePoints(1, nextHeight, element.points, normalizePoints),\n    normalizePoints,\n  );\n\n  let bounds: Bounds;\n\n  if (isFreeDrawElement(element)) {\n    // Free Draw\n    bounds = getBoundsFromPoints(points);\n  } else {\n    // Line\n    const gen = rough.generator();\n    const curve = !element.roundness\n      ? gen.linearPath(\n          points as [number, number][],\n          generateRoughOptions(element),\n        )\n      : gen.curve(points as [number, number][], generateRoughOptions(element));\n\n    const ops = getCurvePathOps(curve);\n    bounds = getMinMaxXYFromCurvePathOps(ops);\n  }\n\n  const [minX, minY, maxX, maxY] = bounds;\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getElementPointsCoords = (\n  element: ExcalidrawLinearElement,\n  points: readonly (readonly [number, number])[],\n): Bounds => {\n  // This might be computationally heavey\n  const gen = rough.generator();\n  const curve =\n    element.roundness == null\n      ? gen.linearPath(\n          points as [number, number][],\n          generateRoughOptions(element),\n        )\n      : gen.curve(points as [number, number][], generateRoughOptions(element));\n  const ops = getCurvePathOps(curve);\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getClosestElementBounds = (\n  elements: readonly ExcalidrawElement[],\n  from: { x: number; y: number },\n): Bounds => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minDistance = Infinity;\n  let closestElement = elements[0];\n  const elementsMap = arrayToMap(elements);\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element, elementsMap);\n    const distance = pointDistance(\n      pointFrom((x1 + x2) / 2, (y1 + y2) / 2),\n      pointFrom(from.x, from.y),\n    );\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestElement = element;\n    }\n  });\n\n  return getElementBounds(closestElement, elementsMap);\n};\n\nexport interface BoundingBox {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n  midX: number;\n  midY: number;\n  width: number;\n  height: number;\n}\n\nexport const getCommonBoundingBox = (\n  elements: ExcalidrawElement[] | readonly NonDeleted<ExcalidrawElement>[],\n): BoundingBox => {\n  const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n  return {\n    minX,\n    minY,\n    maxX,\n    maxY,\n    width: maxX - minX,\n    height: maxY - minY,\n    midX: (minX + maxX) / 2,\n    midY: (minY + maxY) / 2,\n  };\n};\n\n/**\n * returns scene coords of user's editor viewport (visible canvas area) bounds\n */\nexport const getVisibleSceneBounds = ({\n  scrollX,\n  scrollY,\n  width,\n  height,\n  zoom,\n}: AppState): SceneBounds => {\n  return [\n    -scrollX,\n    -scrollY,\n    -scrollX + width / zoom.value,\n    -scrollY + height / zoom.value,\n  ];\n};\n\nexport const getCenterForBounds = (bounds: Bounds): GlobalPoint =>\n  pointFrom(\n    bounds[0] + (bounds[2] - bounds[0]) / 2,\n    bounds[1] + (bounds[3] - bounds[1]) / 2,\n  );\n\nexport const doBoundsIntersect = (\n  bounds1: Bounds | null,\n  bounds2: Bounds | null,\n): boolean => {\n  if (bounds1 == null || bounds2 == null) {\n    return false;\n  }\n\n  const [minX1, minY1, maxX1, maxY1] = bounds1;\n  const [minX2, minY2, maxX2, maxY2] = bounds2;\n\n  return minX1 < maxX2 && maxX1 > minX2 && minY1 < maxY2 && maxY1 > minY2;\n};\n", "import { RoughCanvas } from './canvas';\nimport { RoughGenerator } from './generator';\nimport { RoughSVG } from './svg';\nexport default {\n    canvas(canvas, config) {\n        return new RoughCanvas(canvas, config);\n    },\n    svg(svg, config) {\n        return new RoughSVG(svg, config);\n    },\n    generator(config) {\n        return new RoughGenerator(config);\n    },\n    newSeed() {\n        return RoughGenerator.newSeed();\n    },\n};\n", "import { RoughGenerator } from './generator';\nexport class RoughCanvas {\n    constructor(canvas, config) {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext('2d');\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const ctx = this.ctx;\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            switch (drawing.type) {\n                case 'path':\n                    ctx.save();\n                    ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n                    ctx.lineWidth = o.strokeWidth;\n                    if (o.strokeLineDash) {\n                        ctx.setLineDash(o.strokeLineDash);\n                    }\n                    if (o.strokeLineDashOffset) {\n                        ctx.lineDashOffset = o.strokeLineDashOffset;\n                    }\n                    this._drawToContext(ctx, drawing, precision);\n                    ctx.restore();\n                    break;\n                case 'fillPath': {\n                    ctx.save();\n                    ctx.fillStyle = o.fill || '';\n                    const fillRule = (drawable.shape === 'curve' || drawable.shape === 'polygon' || drawable.shape === 'path') ? 'evenodd' : 'nonzero';\n                    this._drawToContext(ctx, drawing, precision, fillRule);\n                    ctx.restore();\n                    break;\n                }\n                case 'fillSketch':\n                    this.fillSketch(ctx, drawing, o);\n                    break;\n            }\n        }\n    }\n    fillSketch(ctx, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        ctx.save();\n        if (o.fillLineDash) {\n            ctx.setLineDash(o.fillLineDash);\n        }\n        if (o.fillLineDashOffset) {\n            ctx.lineDashOffset = o.fillLineDashOffset;\n        }\n        ctx.strokeStyle = o.fill || '';\n        ctx.lineWidth = fweight;\n        this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n        ctx.restore();\n    }\n    _drawToContext(ctx, drawing, fixedDecimals, rule = 'nonzero') {\n        ctx.beginPath();\n        for (const item of drawing.ops) {\n            const data = ((typeof fixedDecimals === 'number') && fixedDecimals >= 0) ? (item.data.map((d) => +d.toFixed(fixedDecimals))) : item.data;\n            switch (item.op) {\n                case 'move':\n                    ctx.moveTo(data[0], data[1]);\n                    break;\n                case 'bcurveTo':\n                    ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n                    break;\n                case 'lineTo':\n                    ctx.lineTo(data[0], data[1]);\n                    break;\n            }\n        }\n        if (drawing.type === 'fillPath') {\n            ctx.fill(rule);\n        }\n        else {\n            ctx.stroke();\n        }\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        this.draw(d);\n        return d;\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        this.draw(d);\n        return d;\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        this.draw(d);\n        return d;\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        this.draw(d);\n        return d;\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        this.draw(d);\n        return d;\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        this.draw(d);\n        return d;\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        this.draw(drawing);\n        return drawing;\n    }\n}\n", "import { line, solidFillPolygon, patternFillPolygons, rectangle, ellipseWithParams, generateEllipseParams, linearPath, arc, patternFillArc, curve, svgPath } from './renderer.js';\nimport { randomSeed } from './math.js';\nimport { curveToBezier } from 'points-on-curve/lib/curve-to-bezier.js';\nimport { pointsOnBezierCurves } from 'points-on-curve';\nimport { pointsOnPath } from 'points-on-path';\nconst NOS = 'none';\nexport class RoughGenerator {\n    constructor(config) {\n        this.defaultOptions = {\n            maxRandomnessOffset: 2,\n            roughness: 1,\n            bowing: 1,\n            stroke: '#000',\n            strokeWidth: 1,\n            curveTightness: 0,\n            curveFitting: 0.95,\n            curveStepCount: 9,\n            fillStyle: 'hachure',\n            fillWeight: -1,\n            hachureAngle: -41,\n            hachureGap: -1,\n            dashOffset: -1,\n            dashGap: -1,\n            zigzagOffset: -1,\n            seed: 0,\n            disableMultiStroke: false,\n            disableMultiStrokeFill: false,\n            preserveVertices: false,\n            fillShapeRoughnessGain: 0.8,\n        };\n        this.config = config || {};\n        if (this.config.options) {\n            this.defaultOptions = this._o(this.config.options);\n        }\n    }\n    static newSeed() {\n        return randomSeed();\n    }\n    _o(options) {\n        return options ? Object.assign({}, this.defaultOptions, options) : this.defaultOptions;\n    }\n    _d(shape, sets, options) {\n        return { shape, sets: sets || [], options: options || this.defaultOptions };\n    }\n    line(x1, y1, x2, y2, options) {\n        const o = this._o(options);\n        return this._d('line', [line(x1, y1, x2, y2, o)], o);\n    }\n    rectangle(x, y, width, height, options) {\n        const o = this._o(options);\n        const paths = [];\n        const outline = rectangle(x, y, width, height, o);\n        if (o.fill) {\n            const points = [[x, y], [x + width, y], [x + width, y + height], [x, y + height]];\n            if (o.fillStyle === 'solid') {\n                paths.push(solidFillPolygon([points], o));\n            }\n            else {\n                paths.push(patternFillPolygons([points], o));\n            }\n        }\n        if (o.stroke !== NOS) {\n            paths.push(outline);\n        }\n        return this._d('rectangle', paths, o);\n    }\n    ellipse(x, y, width, height, options) {\n        const o = this._o(options);\n        const paths = [];\n        const ellipseParams = generateEllipseParams(width, height, o);\n        const ellipseResponse = ellipseWithParams(x, y, o, ellipseParams);\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                const shape = ellipseWithParams(x, y, o, ellipseParams).opset;\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(patternFillPolygons([ellipseResponse.estimatedPoints], o));\n            }\n        }\n        if (o.stroke !== NOS) {\n            paths.push(ellipseResponse.opset);\n        }\n        return this._d('ellipse', paths, o);\n    }\n    circle(x, y, diameter, options) {\n        const ret = this.ellipse(x, y, diameter, diameter, options);\n        ret.shape = 'circle';\n        return ret;\n    }\n    linearPath(points, options) {\n        const o = this._o(options);\n        return this._d('linearPath', [linearPath(points, false, o)], o);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const o = this._o(options);\n        const paths = [];\n        const outline = arc(x, y, width, height, start, stop, closed, true, o);\n        if (closed && o.fill) {\n            if (o.fillStyle === 'solid') {\n                const fillOptions = Object.assign({}, o);\n                fillOptions.disableMultiStroke = true;\n                const shape = arc(x, y, width, height, start, stop, true, false, fillOptions);\n                shape.type = 'fillPath';\n                paths.push(shape);\n            }\n            else {\n                paths.push(patternFillArc(x, y, width, height, start, stop, o));\n            }\n        }\n        if (o.stroke !== NOS) {\n            paths.push(outline);\n        }\n        return this._d('arc', paths, o);\n    }\n    curve(points, options) {\n        const o = this._o(options);\n        const paths = [];\n        const outline = curve(points, o);\n        if (o.fill && o.fill !== NOS && points.length >= 3) {\n            if (o.fillStyle === 'solid') {\n                const fillShape = curve(points, Object.assign(Object.assign({}, o), { disableMultiStroke: true, roughness: o.roughness ? (o.roughness + o.fillShapeRoughnessGain) : 0 }));\n                paths.push({\n                    type: 'fillPath',\n                    ops: this._mergedShape(fillShape.ops),\n                });\n            }\n            else {\n                const bcurve = curveToBezier(points);\n                const polyPoints = pointsOnBezierCurves(bcurve, 10, (1 + o.roughness) / 2);\n                paths.push(patternFillPolygons([polyPoints], o));\n            }\n        }\n        if (o.stroke !== NOS) {\n            paths.push(outline);\n        }\n        return this._d('curve', paths, o);\n    }\n    polygon(points, options) {\n        const o = this._o(options);\n        const paths = [];\n        const outline = linearPath(points, true, o);\n        if (o.fill) {\n            if (o.fillStyle === 'solid') {\n                paths.push(solidFillPolygon([points], o));\n            }\n            else {\n                paths.push(patternFillPolygons([points], o));\n            }\n        }\n        if (o.stroke !== NOS) {\n            paths.push(outline);\n        }\n        return this._d('polygon', paths, o);\n    }\n    path(d, options) {\n        const o = this._o(options);\n        const paths = [];\n        if (!d) {\n            return this._d('path', paths, o);\n        }\n        d = (d || '').replace(/\\n/g, ' ').replace(/(-\\s)/g, '-').replace('/(\\s\\s)/g', ' ');\n        const hasFill = o.fill && o.fill !== 'transparent' && o.fill !== NOS;\n        const hasStroke = o.stroke !== NOS;\n        const simplified = !!(o.simplification && (o.simplification < 1));\n        const distance = simplified ? (4 - 4 * (o.simplification || 1)) : ((1 + o.roughness) / 2);\n        const sets = pointsOnPath(d, 1, distance);\n        const shape = svgPath(d, o);\n        if (hasFill) {\n            if (o.fillStyle === 'solid') {\n                if (sets.length === 1) {\n                    const fillShape = svgPath(d, Object.assign(Object.assign({}, o), { disableMultiStroke: true, roughness: o.roughness ? (o.roughness + o.fillShapeRoughnessGain) : 0 }));\n                    paths.push({\n                        type: 'fillPath',\n                        ops: this._mergedShape(fillShape.ops),\n                    });\n                }\n                else {\n                    paths.push(solidFillPolygon(sets, o));\n                }\n            }\n            else {\n                paths.push(patternFillPolygons(sets, o));\n            }\n        }\n        if (hasStroke) {\n            if (simplified) {\n                sets.forEach((set) => {\n                    paths.push(linearPath(set, false, o));\n                });\n            }\n            else {\n                paths.push(shape);\n            }\n        }\n        return this._d('path', paths, o);\n    }\n    opsToPath(drawing, fixedDecimals) {\n        let path = '';\n        for (const item of drawing.ops) {\n            const data = ((typeof fixedDecimals === 'number') && fixedDecimals >= 0) ? (item.data.map((d) => +d.toFixed(fixedDecimals))) : item.data;\n            switch (item.op) {\n                case 'move':\n                    path += `M${data[0]} ${data[1]} `;\n                    break;\n                case 'bcurveTo':\n                    path += `C${data[0]} ${data[1]}, ${data[2]} ${data[3]}, ${data[4]} ${data[5]} `;\n                    break;\n                case 'lineTo':\n                    path += `L${data[0]} ${data[1]} `;\n                    break;\n            }\n        }\n        return path.trim();\n    }\n    toPaths(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.defaultOptions;\n        const paths = [];\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path':\n                    path = {\n                        d: this.opsToPath(drawing),\n                        stroke: o.stroke,\n                        strokeWidth: o.strokeWidth,\n                        fill: NOS,\n                    };\n                    break;\n                case 'fillPath':\n                    path = {\n                        d: this.opsToPath(drawing),\n                        stroke: NOS,\n                        strokeWidth: 0,\n                        fill: o.fill || NOS,\n                    };\n                    break;\n                case 'fillSketch':\n                    path = this.fillSketch(drawing, o);\n                    break;\n            }\n            if (path) {\n                paths.push(path);\n            }\n        }\n        return paths;\n    }\n    fillSketch(drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        return {\n            d: this.opsToPath(drawing),\n            stroke: o.fill || NOS,\n            strokeWidth: fweight,\n            fill: NOS,\n        };\n    }\n    _mergedShape(input) {\n        return input.filter((d, i) => {\n            if (i === 0) {\n                return true;\n            }\n            if (d.op === 'move') {\n                return false;\n            }\n            return true;\n        });\n    }\n}\n", "import { getFiller } from './fillers/filler.js';\nimport { Random } from './math.js';\nimport { parsePath, normalize, absolutize } from 'path-data-parser';\nconst helper = {\n    randOffset,\n    randOffsetWithRange,\n    ellipse,\n    doubleLineOps: doubleLineFillOps,\n};\nexport function line(x1, y1, x2, y2, o) {\n    return { type: 'path', ops: _doubleLine(x1, y1, x2, y2, o) };\n}\nexport function linearPath(points, close, o) {\n    const len = (points || []).length;\n    if (len > 2) {\n        const ops = [];\n        for (let i = 0; i < (len - 1); i++) {\n            ops.push(..._doubleLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], o));\n        }\n        if (close) {\n            ops.push(..._doubleLine(points[len - 1][0], points[len - 1][1], points[0][0], points[0][1], o));\n        }\n        return { type: 'path', ops };\n    }\n    else if (len === 2) {\n        return line(points[0][0], points[0][1], points[1][0], points[1][1], o);\n    }\n    return { type: 'path', ops: [] };\n}\nexport function polygon(points, o) {\n    return linearPath(points, true, o);\n}\nexport function rectangle(x, y, width, height, o) {\n    const points = [\n        [x, y],\n        [x + width, y],\n        [x + width, y + height],\n        [x, y + height],\n    ];\n    return polygon(points, o);\n}\nexport function curve(points, o) {\n    let o1 = _curveWithOffset(points, 1 * (1 + o.roughness * 0.2), o);\n    if (!o.disableMultiStroke) {\n        const o2 = _curveWithOffset(points, 1.5 * (1 + o.roughness * 0.22), cloneOptionsAlterSeed(o));\n        o1 = o1.concat(o2);\n    }\n    return { type: 'path', ops: o1 };\n}\nexport function ellipse(x, y, width, height, o) {\n    const params = generateEllipseParams(width, height, o);\n    return ellipseWithParams(x, y, o, params).opset;\n}\nexport function generateEllipseParams(width, height, o) {\n    const psq = Math.sqrt(Math.PI * 2 * Math.sqrt((Math.pow(width / 2, 2) + Math.pow(height / 2, 2)) / 2));\n    const stepCount = Math.ceil(Math.max(o.curveStepCount, (o.curveStepCount / Math.sqrt(200)) * psq));\n    const increment = (Math.PI * 2) / stepCount;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    const curveFitRandomness = 1 - o.curveFitting;\n    rx += _offsetOpt(rx * curveFitRandomness, o);\n    ry += _offsetOpt(ry * curveFitRandomness, o);\n    return { increment, rx, ry };\n}\nexport function ellipseWithParams(x, y, o, ellipseParams) {\n    const [ap1, cp1] = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1, ellipseParams.increment * _offset(0.1, _offset(0.4, 1, o), o), o);\n    let o1 = _curve(ap1, null, o);\n    if ((!o.disableMultiStroke) && (o.roughness !== 0)) {\n        const [ap2] = _computeEllipsePoints(ellipseParams.increment, x, y, ellipseParams.rx, ellipseParams.ry, 1.5, 0, o);\n        const o2 = _curve(ap2, null, o);\n        o1 = o1.concat(o2);\n    }\n    return {\n        estimatedPoints: cp1,\n        opset: { type: 'path', ops: o1 },\n    };\n}\nexport function arc(x, y, width, height, start, stop, closed, roughClosure, o) {\n    const cx = x;\n    const cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += _offsetOpt(rx * 0.01, o);\n    ry += _offsetOpt(ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n        strt += Math.PI * 2;\n        stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n        strt = 0;\n        stp = Math.PI * 2;\n    }\n    const ellipseInc = (Math.PI * 2) / o.curveStepCount;\n    const arcInc = Math.min(ellipseInc / 2, (stp - strt) / 2);\n    const ops = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1, o);\n    if (!o.disableMultiStroke) {\n        const o2 = _arc(arcInc, cx, cy, rx, ry, strt, stp, 1.5, o);\n        ops.push(...o2);\n    }\n    if (closed) {\n        if (roughClosure) {\n            ops.push(..._doubleLine(cx, cy, cx + rx * Math.cos(strt), cy + ry * Math.sin(strt), o), ..._doubleLine(cx, cy, cx + rx * Math.cos(stp), cy + ry * Math.sin(stp), o));\n        }\n        else {\n            ops.push({ op: 'lineTo', data: [cx, cy] }, { op: 'lineTo', data: [cx + rx * Math.cos(strt), cy + ry * Math.sin(strt)] });\n        }\n    }\n    return { type: 'path', ops };\n}\nexport function svgPath(path, o) {\n    const segments = normalize(absolutize(parsePath(path)));\n    const ops = [];\n    let first = [0, 0];\n    let current = [0, 0];\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M': {\n                current = [data[0], data[1]];\n                first = [data[0], data[1]];\n                break;\n            }\n            case 'L':\n                ops.push(..._doubleLine(current[0], current[1], data[0], data[1], o));\n                current = [data[0], data[1]];\n                break;\n            case 'C': {\n                const [x1, y1, x2, y2, x, y] = data;\n                ops.push(..._bezierTo(x1, y1, x2, y2, x, y, current, o));\n                current = [x, y];\n                break;\n            }\n            case 'Z':\n                ops.push(..._doubleLine(current[0], current[1], first[0], first[1], o));\n                current = [first[0], first[1]];\n                break;\n        }\n    }\n    return { type: 'path', ops };\n}\n// Fills\nexport function solidFillPolygon(polygonList, o) {\n    const ops = [];\n    for (const points of polygonList) {\n        if (points.length) {\n            const offset = o.maxRandomnessOffset || 0;\n            const len = points.length;\n            if (len > 2) {\n                ops.push({ op: 'move', data: [points[0][0] + _offsetOpt(offset, o), points[0][1] + _offsetOpt(offset, o)] });\n                for (let i = 1; i < len; i++) {\n                    ops.push({ op: 'lineTo', data: [points[i][0] + _offsetOpt(offset, o), points[i][1] + _offsetOpt(offset, o)] });\n                }\n            }\n        }\n    }\n    return { type: 'fillPath', ops };\n}\nexport function patternFillPolygons(polygonList, o) {\n    return getFiller(o, helper).fillPolygons(polygonList, o);\n}\nexport function patternFillArc(x, y, width, height, start, stop, o) {\n    const cx = x;\n    const cy = y;\n    let rx = Math.abs(width / 2);\n    let ry = Math.abs(height / 2);\n    rx += _offsetOpt(rx * 0.01, o);\n    ry += _offsetOpt(ry * 0.01, o);\n    let strt = start;\n    let stp = stop;\n    while (strt < 0) {\n        strt += Math.PI * 2;\n        stp += Math.PI * 2;\n    }\n    if ((stp - strt) > (Math.PI * 2)) {\n        strt = 0;\n        stp = Math.PI * 2;\n    }\n    const increment = (stp - strt) / o.curveStepCount;\n    const points = [];\n    for (let angle = strt; angle <= stp; angle = angle + increment) {\n        points.push([cx + rx * Math.cos(angle), cy + ry * Math.sin(angle)]);\n    }\n    points.push([cx + rx * Math.cos(stp), cy + ry * Math.sin(stp)]);\n    points.push([cx, cy]);\n    return patternFillPolygons([points], o);\n}\nexport function randOffset(x, o) {\n    return _offsetOpt(x, o);\n}\nexport function randOffsetWithRange(min, max, o) {\n    return _offset(min, max, o);\n}\nexport function doubleLineFillOps(x1, y1, x2, y2, o) {\n    return _doubleLine(x1, y1, x2, y2, o, true);\n}\n// Private helpers\nfunction cloneOptionsAlterSeed(ops) {\n    const result = Object.assign({}, ops);\n    result.randomizer = undefined;\n    if (ops.seed) {\n        result.seed = ops.seed + 1;\n    }\n    return result;\n}\nfunction random(ops) {\n    if (!ops.randomizer) {\n        ops.randomizer = new Random(ops.seed || 0);\n    }\n    return ops.randomizer.next();\n}\nfunction _offset(min, max, ops, roughnessGain = 1) {\n    return ops.roughness * roughnessGain * ((random(ops) * (max - min)) + min);\n}\nfunction _offsetOpt(x, ops, roughnessGain = 1) {\n    return _offset(-x, x, ops, roughnessGain);\n}\nfunction _doubleLine(x1, y1, x2, y2, o, filling = false) {\n    const singleStroke = filling ? o.disableMultiStrokeFill : o.disableMultiStroke;\n    const o1 = _line(x1, y1, x2, y2, o, true, false);\n    if (singleStroke) {\n        return o1;\n    }\n    const o2 = _line(x1, y1, x2, y2, o, true, true);\n    return o1.concat(o2);\n}\nfunction _line(x1, y1, x2, y2, o, move, overlay) {\n    const lengthSq = Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2);\n    const length = Math.sqrt(lengthSq);\n    let roughnessGain = 1;\n    if (length < 200) {\n        roughnessGain = 1;\n    }\n    else if (length > 500) {\n        roughnessGain = 0.4;\n    }\n    else {\n        roughnessGain = (-0.0016668) * length + 1.233334;\n    }\n    let offset = o.maxRandomnessOffset || 0;\n    if ((offset * offset * 100) > lengthSq) {\n        offset = length / 10;\n    }\n    const halfOffset = offset / 2;\n    const divergePoint = 0.2 + random(o) * 0.2;\n    let midDispX = o.bowing * o.maxRandomnessOffset * (y2 - y1) / 200;\n    let midDispY = o.bowing * o.maxRandomnessOffset * (x1 - x2) / 200;\n    midDispX = _offsetOpt(midDispX, o, roughnessGain);\n    midDispY = _offsetOpt(midDispY, o, roughnessGain);\n    const ops = [];\n    const randomHalf = () => _offsetOpt(halfOffset, o, roughnessGain);\n    const randomFull = () => _offsetOpt(offset, o, roughnessGain);\n    const preserveVertices = o.preserveVertices;\n    if (move) {\n        if (overlay) {\n            ops.push({\n                op: 'move', data: [\n                    x1 + (preserveVertices ? 0 : randomHalf()),\n                    y1 + (preserveVertices ? 0 : randomHalf()),\n                ],\n            });\n        }\n        else {\n            ops.push({\n                op: 'move', data: [\n                    x1 + (preserveVertices ? 0 : _offsetOpt(offset, o, roughnessGain)),\n                    y1 + (preserveVertices ? 0 : _offsetOpt(offset, o, roughnessGain)),\n                ],\n            });\n        }\n    }\n    if (overlay) {\n        ops.push({\n            op: 'bcurveTo',\n            data: [\n                midDispX + x1 + (x2 - x1) * divergePoint + randomHalf(),\n                midDispY + y1 + (y2 - y1) * divergePoint + randomHalf(),\n                midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomHalf(),\n                midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomHalf(),\n                x2 + (preserveVertices ? 0 : randomHalf()),\n                y2 + (preserveVertices ? 0 : randomHalf()),\n            ],\n        });\n    }\n    else {\n        ops.push({\n            op: 'bcurveTo',\n            data: [\n                midDispX + x1 + (x2 - x1) * divergePoint + randomFull(),\n                midDispY + y1 + (y2 - y1) * divergePoint + randomFull(),\n                midDispX + x1 + 2 * (x2 - x1) * divergePoint + randomFull(),\n                midDispY + y1 + 2 * (y2 - y1) * divergePoint + randomFull(),\n                x2 + (preserveVertices ? 0 : randomFull()),\n                y2 + (preserveVertices ? 0 : randomFull()),\n            ],\n        });\n    }\n    return ops;\n}\nfunction _curveWithOffset(points, offset, o) {\n    const ps = [];\n    ps.push([\n        points[0][0] + _offsetOpt(offset, o),\n        points[0][1] + _offsetOpt(offset, o),\n    ]);\n    ps.push([\n        points[0][0] + _offsetOpt(offset, o),\n        points[0][1] + _offsetOpt(offset, o),\n    ]);\n    for (let i = 1; i < points.length; i++) {\n        ps.push([\n            points[i][0] + _offsetOpt(offset, o),\n            points[i][1] + _offsetOpt(offset, o),\n        ]);\n        if (i === (points.length - 1)) {\n            ps.push([\n                points[i][0] + _offsetOpt(offset, o),\n                points[i][1] + _offsetOpt(offset, o),\n            ]);\n        }\n    }\n    return _curve(ps, null, o);\n}\nfunction _curve(points, closePoint, o) {\n    const len = points.length;\n    const ops = [];\n    if (len > 3) {\n        const b = [];\n        const s = 1 - o.curveTightness;\n        ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n        for (let i = 1; (i + 2) < len; i++) {\n            const cachedVertArray = points[i];\n            b[0] = [cachedVertArray[0], cachedVertArray[1]];\n            b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n            b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n            b[3] = [points[i + 1][0], points[i + 1][1]];\n            ops.push({ op: 'bcurveTo', data: [b[1][0], b[1][1], b[2][0], b[2][1], b[3][0], b[3][1]] });\n        }\n        if (closePoint && closePoint.length === 2) {\n            const ro = o.maxRandomnessOffset;\n            ops.push({ op: 'lineTo', data: [closePoint[0] + _offsetOpt(ro, o), closePoint[1] + _offsetOpt(ro, o)] });\n        }\n    }\n    else if (len === 3) {\n        ops.push({ op: 'move', data: [points[1][0], points[1][1]] });\n        ops.push({\n            op: 'bcurveTo',\n            data: [\n                points[1][0], points[1][1],\n                points[2][0], points[2][1],\n                points[2][0], points[2][1],\n            ],\n        });\n    }\n    else if (len === 2) {\n        ops.push(..._doubleLine(points[0][0], points[0][1], points[1][0], points[1][1], o));\n    }\n    return ops;\n}\nfunction _computeEllipsePoints(increment, cx, cy, rx, ry, offset, overlap, o) {\n    const coreOnly = o.roughness === 0;\n    const corePoints = [];\n    const allPoints = [];\n    if (coreOnly) {\n        increment = increment / 4;\n        allPoints.push([\n            cx + rx * Math.cos(-increment),\n            cy + ry * Math.sin(-increment),\n        ]);\n        for (let angle = 0; angle <= Math.PI * 2; angle = angle + increment) {\n            const p = [\n                cx + rx * Math.cos(angle),\n                cy + ry * Math.sin(angle),\n            ];\n            corePoints.push(p);\n            allPoints.push(p);\n        }\n        allPoints.push([\n            cx + rx * Math.cos(0),\n            cy + ry * Math.sin(0),\n        ]);\n        allPoints.push([\n            cx + rx * Math.cos(increment),\n            cy + ry * Math.sin(increment),\n        ]);\n    }\n    else {\n        const radOffset = _offsetOpt(0.5, o) - (Math.PI / 2);\n        allPoints.push([\n            _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n            _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment),\n        ]);\n        const endAngle = Math.PI * 2 + radOffset - 0.01;\n        for (let angle = radOffset; angle < endAngle; angle = angle + increment) {\n            const p = [\n                _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n                _offsetOpt(offset, o) + cy + ry * Math.sin(angle),\n            ];\n            corePoints.push(p);\n            allPoints.push(p);\n        }\n        allPoints.push([\n            _offsetOpt(offset, o) + cx + rx * Math.cos(radOffset + Math.PI * 2 + overlap * 0.5),\n            _offsetOpt(offset, o) + cy + ry * Math.sin(radOffset + Math.PI * 2 + overlap * 0.5),\n        ]);\n        allPoints.push([\n            _offsetOpt(offset, o) + cx + 0.98 * rx * Math.cos(radOffset + overlap),\n            _offsetOpt(offset, o) + cy + 0.98 * ry * Math.sin(radOffset + overlap),\n        ]);\n        allPoints.push([\n            _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset + overlap * 0.5),\n            _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset + overlap * 0.5),\n        ]);\n    }\n    return [allPoints, corePoints];\n}\nfunction _arc(increment, cx, cy, rx, ry, strt, stp, offset, o) {\n    const radOffset = strt + _offsetOpt(0.1, o);\n    const points = [];\n    points.push([\n        _offsetOpt(offset, o) + cx + 0.9 * rx * Math.cos(radOffset - increment),\n        _offsetOpt(offset, o) + cy + 0.9 * ry * Math.sin(radOffset - increment),\n    ]);\n    for (let angle = radOffset; angle <= stp; angle = angle + increment) {\n        points.push([\n            _offsetOpt(offset, o) + cx + rx * Math.cos(angle),\n            _offsetOpt(offset, o) + cy + ry * Math.sin(angle),\n        ]);\n    }\n    points.push([\n        cx + rx * Math.cos(stp),\n        cy + ry * Math.sin(stp),\n    ]);\n    points.push([\n        cx + rx * Math.cos(stp),\n        cy + ry * Math.sin(stp),\n    ]);\n    return _curve(points, null, o);\n}\nfunction _bezierTo(x1, y1, x2, y2, x, y, current, o) {\n    const ops = [];\n    const ros = [o.maxRandomnessOffset || 1, (o.maxRandomnessOffset || 1) + 0.3];\n    let f = [0, 0];\n    const iterations = o.disableMultiStroke ? 1 : 2;\n    const preserveVertices = o.preserveVertices;\n    for (let i = 0; i < iterations; i++) {\n        if (i === 0) {\n            ops.push({ op: 'move', data: [current[0], current[1]] });\n        }\n        else {\n            ops.push({ op: 'move', data: [current[0] + (preserveVertices ? 0 : _offsetOpt(ros[0], o)), current[1] + (preserveVertices ? 0 : _offsetOpt(ros[0], o))] });\n        }\n        f = preserveVertices ? [x, y] : [x + _offsetOpt(ros[i], o), y + _offsetOpt(ros[i], o)];\n        ops.push({\n            op: 'bcurveTo',\n            data: [\n                x1 + _offsetOpt(ros[i], o), y1 + _offsetOpt(ros[i], o),\n                x2 + _offsetOpt(ros[i], o), y2 + _offsetOpt(ros[i], o),\n                f[0], f[1],\n            ],\n        });\n    }\n    return ops;\n}\n", "import { HachureFiller } from './hachure-filler';\nimport { ZigZagFiller } from './zigzag-filler';\nimport { HatchFiller } from './hatch-filler';\nimport { DotFiller } from './dot-filler';\nimport { DashedFiller } from './dashed-filler';\nimport { ZigZagLineFiller } from './zigzag-line-filler';\nconst fillers = {};\nexport function getFiller(o, helper) {\n    let fillerName = o.fillStyle || 'hachure';\n    if (!fillers[fillerName]) {\n        switch (fillerName) {\n            case 'zigzag':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new ZigZagFiller(helper);\n                }\n                break;\n            case 'cross-hatch':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new HatchFiller(helper);\n                }\n                break;\n            case 'dots':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new DotFiller(helper);\n                }\n                break;\n            case 'dashed':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new DashedFiller(helper);\n                }\n                break;\n            case 'zigzag-line':\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new ZigZagLineFiller(helper);\n                }\n                break;\n            case 'hachure':\n            default:\n                fillerName = 'hachure';\n                if (!fillers[fillerName]) {\n                    fillers[fillerName] = new HachureFiller(helper);\n                }\n                break;\n        }\n    }\n    return fillers[fillerName];\n}\n", "import { polygonHachureLines } from './scan-line-hachure';\nexport class HachureFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        return this._fillPolygons(polygonList, o);\n    }\n    _fillPolygons(polygonList, o) {\n        const lines = polygonHachureLines(polygonList, o);\n        const ops = this.renderLines(lines, o);\n        return { type: 'fillSketch', ops };\n    }\n    renderLines(lines, o) {\n        const ops = [];\n        for (const line of lines) {\n            ops.push(...this.helper.doubleLineOps(line[0][0], line[0][1], line[1][0], line[1][1], o));\n        }\n        return ops;\n    }\n}\n", "import { hachureLines } from 'hachure-fill';\nexport function polygonHachureLines(polygonList, o) {\n    var _a;\n    const angle = o.hachureAngle + 90;\n    let gap = o.hachureGap;\n    if (gap < 0) {\n        gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    let skipOffset = 1;\n    if (o.roughness >= 1) {\n        if ((((_a = o.randomizer) === null || _a === void 0 ? void 0 : _a.next()) || Math.random()) > 0.7) {\n            skipOffset = gap;\n        }\n    }\n    return hachureLines(polygonList, gap, angle, skipOffset || 1);\n}\n", "function rotatePoints(points, center, degrees) {\n    if (points && points.length) {\n        const [cx, cy] = center;\n        const angle = (Math.PI / 180) * degrees;\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        for (const p of points) {\n            const [x, y] = p;\n            p[0] = ((x - cx) * cos) - ((y - cy) * sin) + cx;\n            p[1] = ((x - cx) * sin) + ((y - cy) * cos) + cy;\n        }\n    }\n}\nfunction rotateLines(lines, center, degrees) {\n    const points = [];\n    lines.forEach((line) => points.push(...line));\n    rotatePoints(points, center, degrees);\n}\nfunction areSamePoints(p1, p2) {\n    return p1[0] === p2[0] && p1[1] === p2[1];\n}\nexport function hachureLines(polygons, hachureGap, hachureAngle, hachureStepOffset = 1) {\n    const angle = hachureAngle;\n    const gap = Math.max(hachureGap, 0.1);\n    const polygonList = (polygons[0] && polygons[0][0] && (typeof polygons[0][0] === 'number')) ? [polygons] : polygons;\n    const rotationCenter = [0, 0];\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, angle);\n        }\n    }\n    const lines = straightHachureLines(polygonList, gap, hachureStepOffset);\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, -angle);\n        }\n        rotateLines(lines, rotationCenter, -angle);\n    }\n    return lines;\n}\nfunction straightHachureLines(polygons, gap, hachureStepOffset) {\n    const vertexArray = [];\n    for (const polygon of polygons) {\n        const vertices = [...polygon];\n        if (!areSamePoints(vertices[0], vertices[vertices.length - 1])) {\n            vertices.push([vertices[0][0], vertices[0][1]]);\n        }\n        if (vertices.length > 2) {\n            vertexArray.push(vertices);\n        }\n    }\n    const lines = [];\n    gap = Math.max(gap, 0.1);\n    // Create sorted edges table\n    const edges = [];\n    for (const vertices of vertexArray) {\n        for (let i = 0; i < vertices.length - 1; i++) {\n            const p1 = vertices[i];\n            const p2 = vertices[i + 1];\n            if (p1[1] !== p2[1]) {\n                const ymin = Math.min(p1[1], p2[1]);\n                edges.push({\n                    ymin,\n                    ymax: Math.max(p1[1], p2[1]),\n                    x: ymin === p1[1] ? p1[0] : p2[0],\n                    islope: (p2[0] - p1[0]) / (p2[1] - p1[1]),\n                });\n            }\n        }\n    }\n    edges.sort((e1, e2) => {\n        if (e1.ymin < e2.ymin) {\n            return -1;\n        }\n        if (e1.ymin > e2.ymin) {\n            return 1;\n        }\n        if (e1.x < e2.x) {\n            return -1;\n        }\n        if (e1.x > e2.x) {\n            return 1;\n        }\n        if (e1.ymax === e2.ymax) {\n            return 0;\n        }\n        return (e1.ymax - e2.ymax) / Math.abs((e1.ymax - e2.ymax));\n    });\n    if (!edges.length) {\n        return lines;\n    }\n    // Start scanning\n    let activeEdges = [];\n    let y = edges[0].ymin;\n    let iteration = 0;\n    while (activeEdges.length || edges.length) {\n        if (edges.length) {\n            let ix = -1;\n            for (let i = 0; i < edges.length; i++) {\n                if (edges[i].ymin > y) {\n                    break;\n                }\n                ix = i;\n            }\n            const removed = edges.splice(0, ix + 1);\n            removed.forEach((edge) => {\n                activeEdges.push({ s: y, edge });\n            });\n        }\n        activeEdges = activeEdges.filter((ae) => {\n            if (ae.edge.ymax <= y) {\n                return false;\n            }\n            return true;\n        });\n        activeEdges.sort((ae1, ae2) => {\n            if (ae1.edge.x === ae2.edge.x) {\n                return 0;\n            }\n            return (ae1.edge.x - ae2.edge.x) / Math.abs((ae1.edge.x - ae2.edge.x));\n        });\n        // fill between the edges\n        if ((hachureStepOffset !== 1) || (iteration % gap === 0)) {\n            if (activeEdges.length > 1) {\n                for (let i = 0; i < activeEdges.length; i = i + 2) {\n                    const nexti = i + 1;\n                    if (nexti >= activeEdges.length) {\n                        break;\n                    }\n                    const ce = activeEdges[i].edge;\n                    const ne = activeEdges[nexti].edge;\n                    lines.push([\n                        [Math.round(ce.x), y],\n                        [Math.round(ne.x), y],\n                    ]);\n                }\n            }\n        }\n        y += hachureStepOffset;\n        activeEdges.forEach((ae) => {\n            ae.edge.x = ae.edge.x + (hachureStepOffset * ae.edge.islope);\n        });\n        iteration++;\n    }\n    return lines;\n}\n", "import { HachureFiller } from './hachure-filler';\nimport { polygonHachureLines } from './scan-line-hachure';\nimport { lineLength } from '../geometry';\nexport class ZigZagFiller extends HachureFiller {\n    fillPolygons(polygonList, o) {\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        const o2 = Object.assign({}, o, { hachureGap: gap });\n        const lines = polygonHachureLines(polygonList, o2);\n        const zigZagAngle = (Math.PI / 180) * o.hachureAngle;\n        const zigzagLines = [];\n        const dgx = gap * 0.5 * Math.cos(zigZagAngle);\n        const dgy = gap * 0.5 * Math.sin(zigZagAngle);\n        for (const [p1, p2] of lines) {\n            if (lineLength([p1, p2])) {\n                zigzagLines.push([\n                    [p1[0] - dgx, p1[1] + dgy],\n                    [...p2],\n                ], [\n                    [p1[0] + dgx, p1[1] - dgy],\n                    [...p2],\n                ]);\n            }\n        }\n        const ops = this.renderLines(zigzagLines, o);\n        return { type: 'fillSketch', ops };\n    }\n}\n", "export function lineLength(line) {\n    const p1 = line[0];\n    const p2 = line[1];\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n", "import { HachureFiller } from './hachure-filler';\nexport class HatchFiller extends HachureFiller {\n    fillPolygons(polygonList, o) {\n        const set = this._fillPolygons(polygonList, o);\n        const o2 = Object.assign({}, o, { hachureAngle: o.hachureAngle + 90 });\n        const set2 = this._fillPolygons(polygonList, o2);\n        set.ops = set.ops.concat(set2.ops);\n        return set;\n    }\n}\n", "import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DotFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        o = Object.assign({}, o, { hachureAngle: 0 });\n        const lines = polygonHachureLines(polygonList, o);\n        return this.dotsOnLines(lines, o);\n    }\n    dotsOnLines(lines, o) {\n        const ops = [];\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const ro = gap / 4;\n        for (const line of lines) {\n            const length = lineLength(line);\n            const dl = length / gap;\n            const count = Math.ceil(dl) - 1;\n            const offset = length - (count * gap);\n            const x = ((line[0][0] + line[1][0]) / 2) - (gap / 4);\n            const minY = Math.min(line[0][1], line[1][1]);\n            for (let i = 0; i < count; i++) {\n                const y = minY + offset + (i * gap);\n                const cx = (x - ro) + Math.random() * 2 * ro;\n                const cy = (y - ro) + Math.random() * 2 * ro;\n                const el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n                ops.push(...el.ops);\n            }\n        }\n        return { type: 'fillSketch', ops };\n    }\n}\n", "import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DashedFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.dashedLine(lines, o) };\n    }\n    dashedLine(lines, o) {\n        const offset = o.dashOffset < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashOffset;\n        const gap = o.dashGap < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashGap;\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.floor(length / (offset + gap));\n            const startOffset = (length + gap - (count * (offset + gap))) / 2;\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * (offset + gap);\n                const lend = lstart + offset;\n                const start = [p1[0] + (lstart * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha) + (startOffset * Math.sin(alpha))];\n                const end = [p1[0] + (lend * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha)) + (startOffset * Math.sin(alpha))];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n", "import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class ZigZagLineFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const gap = o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap;\n        const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n        o = Object.assign({}, o, { hachureGap: gap + zo });\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.zigzagLines(lines, zo, o) };\n    }\n    zigzagLines(lines, zo, o) {\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.round(length / (2 * zo));\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * 2 * zo;\n                const lend = (i + 1) * 2 * zo;\n                const dz = Math.sqrt(2 * Math.pow(zo, 2));\n                const start = [p1[0] + (lstart * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha)];\n                const end = [p1[0] + (lend * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha))];\n                const middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o), ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n", "export { parsePath, serialize } from './parser.js';\nexport { absolutize } from './absolutize.js';\nexport { normalize } from './normalize.js';\n", "const COMMAND = 0;\nconst NUMBER = 1;\nconst EOD = 2;\nconst PARAMS = { A: 7, a: 7, C: 6, c: 6, H: 1, h: 1, L: 2, l: 2, M: 2, m: 2, Q: 4, q: 4, S: 4, s: 4, T: 2, t: 2, V: 1, v: 1, Z: 0, z: 0 };\nfunction tokenize(d) {\n    const tokens = new Array();\n    while (d !== '') {\n        if (d.match(/^([ \\t\\r\\n,]+)/)) {\n            d = d.substr(RegExp.$1.length);\n        }\n        else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {\n            tokens[tokens.length] = { type: COMMAND, text: RegExp.$1 };\n            d = d.substr(RegExp.$1.length);\n        }\n        else if (d.match(/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {\n            tokens[tokens.length] = { type: NUMBER, text: `${parseFloat(RegExp.$1)}` };\n            d = d.substr(RegExp.$1.length);\n        }\n        else {\n            return [];\n        }\n    }\n    tokens[tokens.length] = { type: EOD, text: '' };\n    return tokens;\n}\nfunction isType(token, type) {\n    return token.type === type;\n}\nexport function parsePath(d) {\n    const segments = [];\n    const tokens = tokenize(d);\n    let mode = 'BOD';\n    let index = 0;\n    let token = tokens[index];\n    while (!isType(token, EOD)) {\n        let paramsCount = 0;\n        const params = [];\n        if (mode === 'BOD') {\n            if (token.text === 'M' || token.text === 'm') {\n                index++;\n                paramsCount = PARAMS[token.text];\n                mode = token.text;\n            }\n            else {\n                return parsePath('M0,0' + d);\n            }\n        }\n        else if (isType(token, NUMBER)) {\n            paramsCount = PARAMS[mode];\n        }\n        else {\n            index++;\n            paramsCount = PARAMS[token.text];\n            mode = token.text;\n        }\n        if ((index + paramsCount) < tokens.length) {\n            for (let i = index; i < index + paramsCount; i++) {\n                const numbeToken = tokens[i];\n                if (isType(numbeToken, NUMBER)) {\n                    params[params.length] = +numbeToken.text;\n                }\n                else {\n                    throw new Error('Param not a number: ' + mode + ',' + numbeToken.text);\n                }\n            }\n            if (typeof PARAMS[mode] === 'number') {\n                const segment = { key: mode, data: params };\n                segments.push(segment);\n                index += paramsCount;\n                token = tokens[index];\n                if (mode === 'M')\n                    mode = 'L';\n                if (mode === 'm')\n                    mode = 'l';\n            }\n            else {\n                throw new Error('Bad segment: ' + mode);\n            }\n        }\n        else {\n            throw new Error('Path data ended short');\n        }\n    }\n    return segments;\n}\nexport function serialize(segments) {\n    const tokens = [];\n    for (const { key, data } of segments) {\n        tokens.push(key);\n        switch (key) {\n            case 'C':\n            case 'c':\n                tokens.push(data[0], `${data[1]},`, data[2], `${data[3]},`, data[4], data[5]);\n                break;\n            case 'S':\n            case 's':\n            case 'Q':\n            case 'q':\n                tokens.push(data[0], `${data[1]},`, data[2], data[3]);\n                break;\n            default:\n                tokens.push(...data);\n                break;\n        }\n    }\n    return tokens.join(' ');\n}\n", "// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    const out = [];\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'm':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'M', data: [cx, cy] });\n                subx = cx;\n                suby = cy;\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'l':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                break;\n            case 'c': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'C', data: newdata });\n                cx = newdata[4];\n                cy = newdata[5];\n                break;\n            }\n            case 'Q':\n                out.push({ key: 'Q', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 'q': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'Q', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'A':\n                out.push({ key: 'A', data: [...data] });\n                cx = data[5];\n                cy = data[6];\n                break;\n            case 'a':\n                cx += data[5];\n                cy += data[6];\n                out.push({ key: 'A', data: [data[0], data[1], data[2], data[3], data[4], cx, cy] });\n                break;\n            case 'H':\n                out.push({ key: 'H', data: [...data] });\n                cx = data[0];\n                break;\n            case 'h':\n                cx += data[0];\n                out.push({ key: 'H', data: [cx] });\n                break;\n            case 'V':\n                out.push({ key: 'V', data: [...data] });\n                cy = data[0];\n                break;\n            case 'v':\n                cy += data[0];\n                out.push({ key: 'V', data: [cy] });\n                break;\n            case 'S':\n                out.push({ key: 'S', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 's': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'S', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'T':\n                out.push({ key: 'T', data: [...data] });\n                cx = data[0];\n                cy = data[1];\n                break;\n            case 't':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'T', data: [cx, cy] });\n                break;\n            case 'Z':\n            case 'z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n    }\n    return out;\n}\n", "// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n    const out = [];\n    let lastType = '';\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    let lcx = 0, lcy = 0;\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                lcx = data[2];\n                lcy = data[3];\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'H':\n                cx = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'V':\n                cy = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'S': {\n                let cx1 = 0, cy1 = 0;\n                if (lastType === 'C' || lastType === 'S') {\n                    cx1 = cx + (cx - lcx);\n                    cy1 = cy + (cy - lcy);\n                }\n                else {\n                    cx1 = cx;\n                    cy1 = cy;\n                }\n                out.push({ key: 'C', data: [cx1, cy1, ...data] });\n                lcx = data[0];\n                lcy = data[1];\n                cx = data[2];\n                cy = data[3];\n                break;\n            }\n            case 'T': {\n                const [x, y] = data;\n                let x1 = 0, y1 = 0;\n                if (lastType === 'Q' || lastType === 'T') {\n                    x1 = cx + (cx - lcx);\n                    y1 = cy + (cy - lcy);\n                }\n                else {\n                    x1 = cx;\n                    y1 = cy;\n                }\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'Q': {\n                const [x1, y1, x, y] = data;\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'A': {\n                const r1 = Math.abs(data[0]);\n                const r2 = Math.abs(data[1]);\n                const angle = data[2];\n                const largeArcFlag = data[3];\n                const sweepFlag = data[4];\n                const x = data[5];\n                const y = data[6];\n                if (r1 === 0 || r2 === 0) {\n                    out.push({ key: 'C', data: [cx, cy, x, y, x, y] });\n                    cx = x;\n                    cy = y;\n                }\n                else {\n                    if (cx !== x || cy !== y) {\n                        const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n                        curves.forEach(function (curve) {\n                            out.push({ key: 'C', data: curve });\n                        });\n                        cx = x;\n                        cy = y;\n                    }\n                }\n                break;\n            }\n            case 'Z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n        lastType = key;\n    }\n    return out;\n}\nfunction degToRad(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nfunction rotate(x, y, angleRad) {\n    const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n    const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n    return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n    const angleRad = degToRad(angle);\n    let params = [];\n    let f1 = 0, f2 = 0, cx = 0, cy = 0;\n    if (recursive) {\n        [f1, f2, cx, cy] = recursive;\n    }\n    else {\n        [x1, y1] = rotate(x1, y1, -angleRad);\n        [x2, y2] = rotate(x2, y2, -angleRad);\n        const x = (x1 - x2) / 2;\n        const y = (y1 - y2) / 2;\n        let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            r1 = h * r1;\n            r2 = h * r2;\n        }\n        const sign = (largeArcFlag === sweepFlag) ? -1 : 1;\n        const r1Pow = r1 * r1;\n        const r2Pow = r2 * r2;\n        const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        const right = r1Pow * y * y + r2Pow * x * x;\n        const k = sign * Math.sqrt(Math.abs(left / right));\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n        if (x1 < cx) {\n            f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n            f2 = Math.PI - f2;\n        }\n        if (f1 < 0) {\n            f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n            f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n            f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n            f2 = f2 - Math.PI * 2;\n        }\n    }\n    let df = f2 - f1;\n    if (Math.abs(df) > (Math.PI * 120 / 180)) {\n        const f2old = f2;\n        const x2old = x2;\n        const y2old = y2;\n        if (sweepFlag && f2 > f1) {\n            f2 = f1 + (Math.PI * 120 / 180) * (1);\n        }\n        else {\n            f2 = f1 + (Math.PI * 120 / 180) * (-1);\n        }\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n    }\n    df = f2 - f1;\n    const c1 = Math.cos(f1);\n    const s1 = Math.sin(f1);\n    const c2 = Math.cos(f2);\n    const s2 = Math.sin(f2);\n    const t = Math.tan(df / 4);\n    const hx = 4 / 3 * r1 * t;\n    const hy = 4 / 3 * r2 * t;\n    const m1 = [x1, y1];\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\n    const m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(params);\n    }\n    else {\n        params = [m2, m3, m4].concat(params);\n        const curves = [];\n        for (let i = 0; i < params.length; i += 3) {\n            const r1 = rotate(params[i][0], params[i][1], angleRad);\n            const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n            const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n            curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n        }\n        return curves;\n    }\n}\n", "function clone(p) {\n    return [...p];\n}\nexport function curveToBezier(pointsIn, curveTightness = 0) {\n    const len = pointsIn.length;\n    if (len < 3) {\n        throw new Error('A curve must have at least three points.');\n    }\n    const out = [];\n    if (len === 3) {\n        out.push(clone(pointsIn[0]), clone(pointsIn[1]), clone(pointsIn[2]), clone(pointsIn[2]));\n    }\n    else {\n        const points = [];\n        points.push(pointsIn[0], pointsIn[0]);\n        for (let i = 1; i < pointsIn.length; i++) {\n            points.push(pointsIn[i]);\n            if (i === (pointsIn.length - 1)) {\n                points.push(pointsIn[i]);\n            }\n        }\n        const b = [];\n        const s = 1 - curveTightness;\n        out.push(clone(points[0]));\n        for (let i = 1; (i + 2) < points.length; i++) {\n            const cachedVertArray = points[i];\n            b[0] = [cachedVertArray[0], cachedVertArray[1]];\n            b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n            b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n            b[3] = [points[i + 1][0], points[i + 1][1]];\n            out.push(b[1], b[2], b[3]);\n        }\n    }\n    return out;\n}\n", "// distance between 2 points\nfunction distance(p1, p2) {\n    return Math.sqrt(distanceSq(p1, p2));\n}\n// distance between 2 points squared\nfunction distanceSq(p1, p2) {\n    return Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2);\n}\n// Sistance squared from a point p to the line segment vw\nfunction distanceToSegmentSq(p, v, w) {\n    const l2 = distanceSq(v, w);\n    if (l2 === 0) {\n        return distanceSq(p, v);\n    }\n    let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n    t = Math.max(0, Math.min(1, t));\n    return distanceSq(p, lerp(v, w, t));\n}\nfunction lerp(a, b, t) {\n    return [\n        a[0] + (b[0] - a[0]) * t,\n        a[1] + (b[1] - a[1]) * t,\n    ];\n}\n// Adapted from https://seant23.wordpress.com/2010/11/12/offset-bezier-curves/\nfunction flatness(points, offset) {\n    const p1 = points[offset + 0];\n    const p2 = points[offset + 1];\n    const p3 = points[offset + 2];\n    const p4 = points[offset + 3];\n    let ux = 3 * p2[0] - 2 * p1[0] - p4[0];\n    ux *= ux;\n    let uy = 3 * p2[1] - 2 * p1[1] - p4[1];\n    uy *= uy;\n    let vx = 3 * p3[0] - 2 * p4[0] - p1[0];\n    vx *= vx;\n    let vy = 3 * p3[1] - 2 * p4[1] - p1[1];\n    vy *= vy;\n    if (ux < vx) {\n        ux = vx;\n    }\n    if (uy < vy) {\n        uy = vy;\n    }\n    return ux + uy;\n}\nfunction getPointsOnBezierCurveWithSplitting(points, offset, tolerance, newPoints) {\n    const outPoints = newPoints || [];\n    if (flatness(points, offset) < tolerance) {\n        const p0 = points[offset + 0];\n        if (outPoints.length) {\n            const d = distance(outPoints[outPoints.length - 1], p0);\n            if (d > 1) {\n                outPoints.push(p0);\n            }\n        }\n        else {\n            outPoints.push(p0);\n        }\n        outPoints.push(points[offset + 3]);\n    }\n    else {\n        // subdivide\n        const t = .5;\n        const p1 = points[offset + 0];\n        const p2 = points[offset + 1];\n        const p3 = points[offset + 2];\n        const p4 = points[offset + 3];\n        const q1 = lerp(p1, p2, t);\n        const q2 = lerp(p2, p3, t);\n        const q3 = lerp(p3, p4, t);\n        const r1 = lerp(q1, q2, t);\n        const r2 = lerp(q2, q3, t);\n        const red = lerp(r1, r2, t);\n        getPointsOnBezierCurveWithSplitting([p1, q1, r1, red], 0, tolerance, outPoints);\n        getPointsOnBezierCurveWithSplitting([red, r2, q3, p4], 0, tolerance, outPoints);\n    }\n    return outPoints;\n}\nexport function simplify(points, distance) {\n    return simplifyPoints(points, 0, points.length, distance);\n}\n// Ramer\u2013Douglas\u2013Peucker algorithm\n// https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\nfunction simplifyPoints(points, start, end, epsilon, newPoints) {\n    const outPoints = newPoints || [];\n    // find the most distance point from the endpoints\n    const s = points[start];\n    const e = points[end - 1];\n    let maxDistSq = 0;\n    let maxNdx = 1;\n    for (let i = start + 1; i < end - 1; ++i) {\n        const distSq = distanceToSegmentSq(points[i], s, e);\n        if (distSq > maxDistSq) {\n            maxDistSq = distSq;\n            maxNdx = i;\n        }\n    }\n    // if that point is too far, split\n    if (Math.sqrt(maxDistSq) > epsilon) {\n        simplifyPoints(points, start, maxNdx + 1, epsilon, outPoints);\n        simplifyPoints(points, maxNdx, end, epsilon, outPoints);\n    }\n    else {\n        if (!outPoints.length) {\n            outPoints.push(s);\n        }\n        outPoints.push(e);\n    }\n    return outPoints;\n}\nexport function pointsOnBezierCurves(points, tolerance = 0.15, distance) {\n    const newPoints = [];\n    const numSegments = (points.length - 1) / 3;\n    for (let i = 0; i < numSegments; i++) {\n        const offset = i * 3;\n        getPointsOnBezierCurveWithSplitting(points, offset, tolerance, newPoints);\n    }\n    if (distance && distance > 0) {\n        return simplifyPoints(newPoints, 0, newPoints.length, distance);\n    }\n    return newPoints;\n}\n", "import { pointsOnBezierCurves, simplify } from 'points-on-curve';\nimport { parsePath, absolutize, normalize } from 'path-data-parser';\nexport function pointsOnPath(path, tolerance, distance) {\n    const segments = parsePath(path);\n    const normalized = normalize(absolutize(segments));\n    const sets = [];\n    let currentPoints = [];\n    let start = [0, 0];\n    let pendingCurve = [];\n    const appendPendingCurve = () => {\n        if (pendingCurve.length >= 4) {\n            currentPoints.push(...pointsOnBezierCurves(pendingCurve, tolerance));\n        }\n        pendingCurve = [];\n    };\n    const appendPendingPoints = () => {\n        appendPendingCurve();\n        if (currentPoints.length) {\n            sets.push(currentPoints);\n            currentPoints = [];\n        }\n    };\n    for (const { key, data } of normalized) {\n        switch (key) {\n            case 'M':\n                appendPendingPoints();\n                start = [data[0], data[1]];\n                currentPoints.push(start);\n                break;\n            case 'L':\n                appendPendingCurve();\n                currentPoints.push([data[0], data[1]]);\n                break;\n            case 'C':\n                if (!pendingCurve.length) {\n                    const lastPoint = currentPoints.length ? currentPoints[currentPoints.length - 1] : start;\n                    pendingCurve.push([lastPoint[0], lastPoint[1]]);\n                }\n                pendingCurve.push([data[0], data[1]]);\n                pendingCurve.push([data[2], data[3]]);\n                pendingCurve.push([data[4], data[5]]);\n                break;\n            case 'Z':\n                appendPendingCurve();\n                currentPoints.push([start[0], start[1]]);\n                break;\n        }\n    }\n    appendPendingPoints();\n    if (!distance) {\n        return sets;\n    }\n    const out = [];\n    for (const set of sets) {\n        const simplifiedSet = simplify(set, distance);\n        if (simplifiedSet.length) {\n            out.push(simplifiedSet);\n        }\n    }\n    return out;\n}\n", "import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', o.stroke);\n                    path.setAttribute('stroke-width', o.strokeWidth + '');\n                    path.setAttribute('fill', 'none');\n                    if (o.strokeLineDash) {\n                        path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                    }\n                    if (o.strokeLineDashOffset) {\n                        path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n                    }\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', 'none');\n                    path.setAttribute('stroke-width', '0');\n                    path.setAttribute('fill', o.fill || '');\n                    if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                        path.setAttribute('fill-rule', 'evenodd');\n                    }\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n        path.setAttribute('stroke', o.fill || '');\n        path.setAttribute('stroke-width', fweight + '');\n        path.setAttribute('fill', 'none');\n        if (o.fillLineDash) {\n            path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n        }\n        if (o.fillLineDashOffset) {\n            path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n        }\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing, fixedDecimalPlaceDigits) {\n        return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n", "export const SVGNS = 'http://www.w3.org/2000/svg';\n", "/**\n * this file defines pure geometric shapes\n *\n * for instance, a cubic bezier curve is specified by its four control points and\n * an ellipse is defined by its center, angle, semi major axis and semi minor axis\n * (but in semi-width and semi-height so it's more relevant to Excalidraw)\n *\n * the idea with pure shapes is so that we can provide collision and other geoemtric methods not depending on\n * the specifics of roughjs or elements in Excalidraw; instead, we can focus on the pure shapes themselves\n *\n * also included in this file are methods for converting an Excalidraw element or a Drawable from roughjs\n * to pure shapes\n */\nimport { pointsOnBezierCurves } from \"points-on-curve\";\n\nimport { invariant } from \"@excalidraw/common\";\nimport {\n  curve,\n  lineSegment,\n  pointFrom,\n  pointDistance,\n  pointFromArray,\n  pointFromVector,\n  pointRotateRads,\n  polygon,\n  polygonFromPoints,\n  PRECISION,\n  segmentsIntersectAt,\n  vector,\n  vectorAdd,\n  vectorFromPoint,\n  vectorScale,\n  type GlobalPoint,\n  type LocalPoint,\n} from \"@excalidraw/math\";\n\nimport { getElementAbsoluteCoords } from \"@excalidraw/element/bounds\";\n\nimport type {\n  ElementsMap,\n  ExcalidrawBindableElement,\n  ExcalidrawDiamondElement,\n  ExcalidrawElement,\n  ExcalidrawEllipseElement,\n  ExcalidrawEmbeddableElement,\n  ExcalidrawFrameLikeElement,\n  ExcalidrawFreeDrawElement,\n  ExcalidrawIframeElement,\n  ExcalidrawImageElement,\n  ExcalidrawLinearElement,\n  ExcalidrawRectangleElement,\n  ExcalidrawSelectionElement,\n  ExcalidrawTextElement,\n} from \"@excalidraw/element/types\";\nimport type { Curve, LineSegment, Polygon, Radians } from \"@excalidraw/math\";\n\nimport type { Drawable, Op } from \"roughjs/bin/core\";\n\n// a polyline (made up term here) is a line consisting of other line segments\n// this corresponds to a straight line element in the editor but it could also\n// be used to model other elements\nexport type Polyline<Point extends GlobalPoint | LocalPoint> =\n  LineSegment<Point>[];\n\n// a polycurve is a curve consisting of ther curves, this corresponds to a complex\n// curve on the canvas\nexport type Polycurve<Point extends GlobalPoint | LocalPoint> = Curve<Point>[];\n\n// an ellipse is specified by its center, angle, and its major and minor axes\n// but for the sake of simplicity, we've used halfWidth and halfHeight instead\n// in replace of semi major and semi minor axes\nexport type Ellipse<Point extends GlobalPoint | LocalPoint> = {\n  center: Point;\n  angle: Radians;\n  halfWidth: number;\n  halfHeight: number;\n};\n\nexport type GeometricShape<Point extends GlobalPoint | LocalPoint> =\n  | {\n      type: \"line\";\n      data: LineSegment<Point>;\n    }\n  | {\n      type: \"polygon\";\n      data: Polygon<Point>;\n    }\n  | {\n      type: \"curve\";\n      data: Curve<Point>;\n    }\n  | {\n      type: \"ellipse\";\n      data: Ellipse<Point>;\n    }\n  | {\n      type: \"polyline\";\n      data: Polyline<Point>;\n    }\n  | {\n      type: \"polycurve\";\n      data: Polycurve<Point>;\n    };\n\ntype RectangularElement =\n  | ExcalidrawRectangleElement\n  | ExcalidrawDiamondElement\n  | ExcalidrawFrameLikeElement\n  | ExcalidrawEmbeddableElement\n  | ExcalidrawImageElement\n  | ExcalidrawIframeElement\n  | ExcalidrawTextElement\n  | ExcalidrawSelectionElement;\n\n// polygon\nexport const getPolygonShape = <Point extends GlobalPoint | LocalPoint>(\n  element: RectangularElement,\n): GeometricShape<Point> => {\n  const { angle, width, height, x, y } = element;\n\n  const cx = x + width / 2;\n  const cy = y + height / 2;\n\n  const center: Point = pointFrom(cx, cy);\n\n  let data: Polygon<Point>;\n\n  if (element.type === \"diamond\") {\n    data = polygon(\n      pointRotateRads(pointFrom(cx, y), center, angle),\n      pointRotateRads(pointFrom(x + width, cy), center, angle),\n      pointRotateRads(pointFrom(cx, y + height), center, angle),\n      pointRotateRads(pointFrom(x, cy), center, angle),\n    );\n  } else {\n    data = polygon(\n      pointRotateRads(pointFrom(x, y), center, angle),\n      pointRotateRads(pointFrom(x + width, y), center, angle),\n      pointRotateRads(pointFrom(x + width, y + height), center, angle),\n      pointRotateRads(pointFrom(x, y + height), center, angle),\n    );\n  }\n\n  return {\n    type: \"polygon\",\n    data,\n  };\n};\n\n// return the selection box for an element, possibly rotated as well\nexport const getSelectionBoxShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n  padding = 10,\n) => {\n  let [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n    element,\n    elementsMap,\n    true,\n  );\n\n  x1 -= padding;\n  x2 += padding;\n  y1 -= padding;\n  y2 += padding;\n\n  //const angleInDegrees = angleToDegrees(element.angle);\n  const center = pointFrom(cx, cy);\n  const topLeft = pointRotateRads(pointFrom(x1, y1), center, element.angle);\n  const topRight = pointRotateRads(pointFrom(x2, y1), center, element.angle);\n  const bottomLeft = pointRotateRads(pointFrom(x1, y2), center, element.angle);\n  const bottomRight = pointRotateRads(pointFrom(x2, y2), center, element.angle);\n\n  return {\n    type: \"polygon\",\n    data: [topLeft, topRight, bottomRight, bottomLeft],\n  } as GeometricShape<Point>;\n};\n\n// ellipse\nexport const getEllipseShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawEllipseElement,\n): GeometricShape<Point> => {\n  const { width, height, angle, x, y } = element;\n\n  return {\n    type: \"ellipse\",\n    data: {\n      center: pointFrom(x + width / 2, y + height / 2),\n      angle,\n      halfWidth: width / 2,\n      halfHeight: height / 2,\n    },\n  };\n};\n\nexport const getCurvePathOps = (shape: Drawable): Op[] => {\n  // NOTE (mtolmacs): Temporary fix for extremely large elements\n  if (!shape) {\n    return [];\n  }\n\n  for (const set of shape.sets) {\n    if (set.type === \"path\") {\n      return set.ops;\n    }\n  }\n  return shape.sets[0].ops;\n};\n\n// linear\nexport const getCurveShape = <Point extends GlobalPoint | LocalPoint>(\n  roughShape: Drawable,\n  startingPoint: Point = pointFrom(0, 0),\n  angleInRadian: Radians,\n  center: Point,\n): GeometricShape<Point> => {\n  const transform = (p: Point): Point =>\n    pointRotateRads(\n      pointFrom(p[0] + startingPoint[0], p[1] + startingPoint[1]),\n      center,\n      angleInRadian,\n    );\n\n  const ops = getCurvePathOps(roughShape);\n  const polycurve: Polycurve<Point> = [];\n  let p0 = pointFrom<Point>(0, 0);\n\n  for (const op of ops) {\n    if (op.op === \"move\") {\n      const p = pointFromArray<Point>(op.data);\n      invariant(p != null, \"Ops data is not a point\");\n      p0 = transform(p);\n    }\n    if (op.op === \"bcurveTo\") {\n      const p1 = transform(pointFrom<Point>(op.data[0], op.data[1]));\n      const p2 = transform(pointFrom<Point>(op.data[2], op.data[3]));\n      const p3 = transform(pointFrom<Point>(op.data[4], op.data[5]));\n      polycurve.push(curve<Point>(p0, p1, p2, p3));\n      p0 = p3;\n    }\n  }\n\n  return {\n    type: \"polycurve\",\n    data: polycurve,\n  };\n};\n\nconst polylineFromPoints = <Point extends GlobalPoint | LocalPoint>(\n  points: Point[],\n): Polyline<Point> => {\n  let previousPoint: Point = points[0];\n  const polyline: LineSegment<Point>[] = [];\n\n  for (let i = 1; i < points.length; i++) {\n    const nextPoint = points[i];\n    polyline.push(lineSegment<Point>(previousPoint, nextPoint));\n    previousPoint = nextPoint;\n  }\n\n  return polyline;\n};\n\nexport const getFreedrawShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawFreeDrawElement,\n  center: Point,\n  isClosed: boolean = false,\n): GeometricShape<Point> => {\n  const transform = (p: Point) =>\n    pointRotateRads(\n      pointFromVector(\n        vectorAdd(vectorFromPoint(p), vector(element.x, element.y)),\n      ),\n      center,\n      element.angle,\n    );\n\n  const polyline = polylineFromPoints(\n    element.points.map((p) => transform(p as Point)),\n  );\n\n  return (\n    isClosed\n      ? {\n          type: \"polygon\",\n          data: polygonFromPoints(polyline.flat()),\n        }\n      : {\n          type: \"polyline\",\n          data: polyline,\n        }\n  ) as GeometricShape<Point>;\n};\n\nexport const getClosedCurveShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawLinearElement,\n  roughShape: Drawable,\n  startingPoint: Point = pointFrom<Point>(0, 0),\n  angleInRadian: Radians,\n  center: Point,\n): GeometricShape<Point> => {\n  const transform = (p: Point) =>\n    pointRotateRads(\n      pointFrom(p[0] + startingPoint[0], p[1] + startingPoint[1]),\n      center,\n      angleInRadian,\n    );\n\n  if (element.roundness === null) {\n    return {\n      type: \"polygon\",\n      data: polygonFromPoints(\n        element.points.map((p) => transform(p as Point)) as Point[],\n      ),\n    };\n  }\n\n  const ops = getCurvePathOps(roughShape);\n\n  const points: Point[] = [];\n  let odd = false;\n  for (const operation of ops) {\n    if (operation.op === \"move\") {\n      odd = !odd;\n      if (odd) {\n        points.push(pointFrom(operation.data[0], operation.data[1]));\n      }\n    } else if (operation.op === \"bcurveTo\") {\n      if (odd) {\n        points.push(pointFrom(operation.data[0], operation.data[1]));\n        points.push(pointFrom(operation.data[2], operation.data[3]));\n        points.push(pointFrom(operation.data[4], operation.data[5]));\n      }\n    } else if (operation.op === \"lineTo\") {\n      if (odd) {\n        points.push(pointFrom(operation.data[0], operation.data[1]));\n      }\n    }\n  }\n\n  const polygonPoints = pointsOnBezierCurves(points, 10, 5).map((p) =>\n    transform(p as Point),\n  ) as Point[];\n\n  return {\n    type: \"polygon\",\n    data: polygonFromPoints<Point>(polygonPoints),\n  };\n};\n\n/**\n * Determine intersection of a rectangular shaped element and a\n * line segment.\n *\n * @param element The rectangular element to test against\n * @param segment The segment intersecting the element\n * @param gap Optional value to inflate the shape before testing\n * @returns An array of intersections\n */\n// TODO: Replace with final rounded rectangle code\nexport const segmentIntersectRectangleElement = <\n  Point extends LocalPoint | GlobalPoint,\n>(\n  element: ExcalidrawBindableElement,\n  segment: LineSegment<Point>,\n  gap: number = 0,\n): Point[] => {\n  const bounds = [\n    element.x - gap,\n    element.y - gap,\n    element.x + element.width + gap,\n    element.y + element.height + gap,\n  ];\n  const center = pointFrom(\n    (bounds[0] + bounds[2]) / 2,\n    (bounds[1] + bounds[3]) / 2,\n  );\n\n  return [\n    lineSegment(\n      pointRotateRads(pointFrom(bounds[0], bounds[1]), center, element.angle),\n      pointRotateRads(pointFrom(bounds[2], bounds[1]), center, element.angle),\n    ),\n    lineSegment(\n      pointRotateRads(pointFrom(bounds[2], bounds[1]), center, element.angle),\n      pointRotateRads(pointFrom(bounds[2], bounds[3]), center, element.angle),\n    ),\n    lineSegment(\n      pointRotateRads(pointFrom(bounds[2], bounds[3]), center, element.angle),\n      pointRotateRads(pointFrom(bounds[0], bounds[3]), center, element.angle),\n    ),\n    lineSegment(\n      pointRotateRads(pointFrom(bounds[0], bounds[3]), center, element.angle),\n      pointRotateRads(pointFrom(bounds[0], bounds[1]), center, element.angle),\n    ),\n  ]\n    .map((s) => segmentsIntersectAt(segment, s))\n    .filter((i): i is Point => !!i);\n};\n\nconst distanceToEllipse = <Point extends LocalPoint | GlobalPoint>(\n  p: Point,\n  ellipse: Ellipse<Point>,\n) => {\n  const { angle, halfWidth, halfHeight, center } = ellipse;\n  const a = halfWidth;\n  const b = halfHeight;\n  const translatedPoint = vectorAdd(\n    vectorFromPoint(p),\n    vectorScale(vectorFromPoint(center), -1),\n  );\n  const [rotatedPointX, rotatedPointY] = pointRotateRads(\n    pointFromVector(translatedPoint),\n    pointFrom(0, 0),\n    -angle as Radians,\n  );\n\n  const px = Math.abs(rotatedPointX);\n  const py = Math.abs(rotatedPointY);\n\n  let tx = 0.707;\n  let ty = 0.707;\n\n  for (let i = 0; i < 3; i++) {\n    const x = a * tx;\n    const y = b * ty;\n\n    const ex = ((a * a - b * b) * tx ** 3) / a;\n    const ey = ((b * b - a * a) * ty ** 3) / b;\n\n    const rx = x - ex;\n    const ry = y - ey;\n\n    const qx = px - ex;\n    const qy = py - ey;\n\n    const r = Math.hypot(ry, rx);\n    const q = Math.hypot(qy, qx);\n\n    tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n    ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n    const t = Math.hypot(ty, tx);\n    tx /= t;\n    ty /= t;\n  }\n\n  const [minX, minY] = [\n    a * tx * Math.sign(rotatedPointX),\n    b * ty * Math.sign(rotatedPointY),\n  ];\n\n  return pointDistance(\n    pointFrom(rotatedPointX, rotatedPointY),\n    pointFrom(minX, minY),\n  );\n};\n\nexport const pointOnEllipse = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  ellipse: Ellipse<Point>,\n  threshold = PRECISION,\n) => {\n  return distanceToEllipse(point, ellipse) <= threshold;\n};\n\nexport const pointInEllipse = <Point extends LocalPoint | GlobalPoint>(\n  p: Point,\n  ellipse: Ellipse<Point>,\n) => {\n  const { center, angle, halfWidth, halfHeight } = ellipse;\n  const translatedPoint = vectorAdd(\n    vectorFromPoint(p),\n    vectorScale(vectorFromPoint(center), -1),\n  );\n  const [rotatedPointX, rotatedPointY] = pointRotateRads(\n    pointFromVector(translatedPoint),\n    pointFrom(0, 0),\n    -angle as Radians,\n  );\n\n  return (\n    (rotatedPointX / halfWidth) * (rotatedPointX / halfWidth) +\n      (rotatedPointY / halfHeight) * (rotatedPointY / halfHeight) <=\n    1\n  );\n};\n\nexport const ellipseAxes = <Point extends LocalPoint | GlobalPoint>(\n  ellipse: Ellipse<Point>,\n) => {\n  const widthGreaterThanHeight = ellipse.halfWidth > ellipse.halfHeight;\n\n  const majorAxis = widthGreaterThanHeight\n    ? ellipse.halfWidth * 2\n    : ellipse.halfHeight * 2;\n  const minorAxis = widthGreaterThanHeight\n    ? ellipse.halfHeight * 2\n    : ellipse.halfWidth * 2;\n\n  return {\n    majorAxis,\n    minorAxis,\n  };\n};\n\nexport const ellipseFocusToCenter = <Point extends LocalPoint | GlobalPoint>(\n  ellipse: Ellipse<Point>,\n) => {\n  const { majorAxis, minorAxis } = ellipseAxes(ellipse);\n\n  return Math.sqrt(majorAxis ** 2 - minorAxis ** 2);\n};\n\nexport const ellipseExtremes = <Point extends LocalPoint | GlobalPoint>(\n  ellipse: Ellipse<Point>,\n) => {\n  const { center, angle } = ellipse;\n  const { majorAxis, minorAxis } = ellipseAxes(ellipse);\n\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n\n  const sqSum = majorAxis ** 2 + minorAxis ** 2;\n  const sqDiff = (majorAxis ** 2 - minorAxis ** 2) * Math.cos(2 * angle);\n\n  const yMax = Math.sqrt((sqSum - sqDiff) / 2);\n  const xAtYMax =\n    (yMax * sqSum * sin * cos) /\n    (majorAxis ** 2 * sin ** 2 + minorAxis ** 2 * cos ** 2);\n\n  const xMax = Math.sqrt((sqSum + sqDiff) / 2);\n  const yAtXMax =\n    (xMax * sqSum * sin * cos) /\n    (majorAxis ** 2 * cos ** 2 + minorAxis ** 2 * sin ** 2);\n  const centerVector = vectorFromPoint(center);\n\n  return [\n    vectorAdd(vector(xAtYMax, yMax), centerVector),\n    vectorAdd(vectorScale(vector(xAtYMax, yMax), -1), centerVector),\n    vectorAdd(vector(xMax, yAtXMax), centerVector),\n    vectorAdd(vector(xMax, yAtXMax), centerVector),\n  ];\n};\n", "import { RoughGenerator } from \"roughjs/bin/generator\";\n\nimport { COLOR_PALETTE } from \"@excalidraw/common\";\n\nimport type {\n  AppState,\n  EmbedsValidationStatus,\n} from \"@excalidraw/excalidraw/types\";\nimport type {\n  ElementShape,\n  ElementShapes,\n} from \"@excalidraw/excalidraw/scene/types\";\n\nimport { _generateElementShape } from \"./Shape\";\n\nimport { elementWithCanvasCache } from \"./renderElement\";\n\nimport type { ExcalidrawElement, ExcalidrawSelectionElement } from \"./types\";\n\nimport type { Drawable } from \"roughjs/bin/core\";\n\nexport class ShapeCache {\n  private static rg = new RoughGenerator();\n  private static cache = new WeakMap<ExcalidrawElement, ElementShape>();\n\n  /**\n   * Retrieves shape from cache if available. Use this only if shape\n   * is optional and you have a fallback in case it's not cached.\n   */\n  public static get = <T extends ExcalidrawElement>(element: T) => {\n    return ShapeCache.cache.get(\n      element,\n    ) as T[\"type\"] extends keyof ElementShapes\n      ? ElementShapes[T[\"type\"]] | undefined\n      : ElementShape | undefined;\n  };\n\n  public static set = <T extends ExcalidrawElement>(\n    element: T,\n    shape: T[\"type\"] extends keyof ElementShapes\n      ? ElementShapes[T[\"type\"]]\n      : Drawable,\n  ) => ShapeCache.cache.set(element, shape);\n\n  public static delete = (element: ExcalidrawElement) =>\n    ShapeCache.cache.delete(element);\n\n  public static destroy = () => {\n    ShapeCache.cache = new WeakMap();\n  };\n\n  /**\n   * Generates & caches shape for element if not already cached, otherwise\n   * returns cached shape.\n   */\n  public static generateElementShape = <\n    T extends Exclude<ExcalidrawElement, ExcalidrawSelectionElement>,\n  >(\n    element: T,\n    renderConfig: {\n      isExporting: boolean;\n      canvasBackgroundColor: AppState[\"viewBackgroundColor\"];\n      embedsValidationStatus: EmbedsValidationStatus;\n    } | null,\n  ) => {\n    // when exporting, always regenerated to guarantee the latest shape\n    const cachedShape = renderConfig?.isExporting\n      ? undefined\n      : ShapeCache.get(element);\n\n    // `null` indicates no rc shape applicable for this element type,\n    // but it's considered a valid cache value (= do not regenerate)\n    if (cachedShape !== undefined) {\n      return cachedShape;\n    }\n\n    elementWithCanvasCache.delete(element);\n\n    const shape = _generateElementShape(\n      element,\n      ShapeCache.rg,\n      renderConfig || {\n        isExporting: false,\n        canvasBackgroundColor: COLOR_PALETTE.white,\n        embedsValidationStatus: null,\n      },\n    ) as T[\"type\"] extends keyof ElementShapes\n      ? ElementShapes[T[\"type\"]]\n      : Drawable | null;\n\n    ShapeCache.cache.set(element, shape);\n\n    return shape;\n  };\n}\n", "import { simplify } from \"points-on-curve\";\n\nimport { pointFrom, pointDistance, type LocalPoint } from \"@excalidraw/math\";\nimport { ROUGHNESS, isTransparent, assertNever } from \"@excalidraw/common\";\n\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport type { EmbedsValidationStatus } from \"@excalidraw/excalidraw/types\";\nimport type { ElementShapes } from \"@excalidraw/excalidraw/scene/types\";\n\nimport {\n  isElbowArrow,\n  isEmbeddableElement,\n  isIframeElement,\n  isIframeLikeElement,\n  isLinearElement,\n} from \"./typeChecks\";\nimport { getCornerRadius, isPathALoop } from \"./shapes\";\nimport { headingForPointIsHorizontal } from \"./heading\";\n\nimport { canChangeRoundness } from \"./comparisons\";\nimport { generateFreeDrawShape } from \"./renderElement\";\nimport { getArrowheadPoints, getDiamondPoints } from \"./bounds\";\n\nimport type {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  ExcalidrawSelectionElement,\n  ExcalidrawLinearElement,\n  Arrowhead,\n} from \"./types\";\n\nimport type { Drawable, Options } from \"roughjs/bin/core\";\nimport type { RoughGenerator } from \"roughjs/bin/generator\";\nimport type { Point as RoughPoint } from \"roughjs/bin/geometry\";\n\nconst getDashArrayDashed = (strokeWidth: number) => [8, 8 + strokeWidth];\n\nconst getDashArrayDotted = (strokeWidth: number) => [1.5, 6 + strokeWidth];\n\nfunction adjustRoughness(element: ExcalidrawElement): number {\n  const roughness = element.roughness;\n\n  const maxSize = Math.max(element.width, element.height);\n  const minSize = Math.min(element.width, element.height);\n\n  // don't reduce roughness if\n  if (\n    // both sides relatively big\n    (minSize >= 20 && maxSize >= 50) ||\n    // is round & both sides above 15px\n    (minSize >= 15 &&\n      !!element.roundness &&\n      canChangeRoundness(element.type)) ||\n    // relatively long linear element\n    (isLinearElement(element) && maxSize >= 50)\n  ) {\n    return roughness;\n  }\n\n  return Math.min(roughness / (maxSize < 10 ? 3 : 2), 2.5);\n}\n\nexport const generateRoughOptions = (\n  element: ExcalidrawElement,\n  continuousPath = false,\n): Options => {\n  const options: Options = {\n    seed: element.seed,\n    strokeLineDash:\n      element.strokeStyle === \"dashed\"\n        ? getDashArrayDashed(element.strokeWidth)\n        : element.strokeStyle === \"dotted\"\n        ? getDashArrayDotted(element.strokeWidth)\n        : undefined,\n    // for non-solid strokes, disable multiStroke because it tends to make\n    // dashes/dots overlay each other\n    disableMultiStroke: element.strokeStyle !== \"solid\",\n    // for non-solid strokes, increase the width a bit to make it visually\n    // similar to solid strokes, because we're also disabling multiStroke\n    strokeWidth:\n      element.strokeStyle !== \"solid\"\n        ? element.strokeWidth + 0.5\n        : element.strokeWidth,\n    // when increasing strokeWidth, we must explicitly set fillWeight and\n    // hachureGap because if not specified, roughjs uses strokeWidth to\n    // calculate them (and we don't want the fills to be modified)\n    fillWeight: element.strokeWidth / 2,\n    hachureGap: element.strokeWidth * 4,\n    roughness: adjustRoughness(element),\n    stroke: element.strokeColor,\n    preserveVertices:\n      continuousPath || element.roughness < ROUGHNESS.cartoonist,\n  };\n\n  switch (element.type) {\n    case \"rectangle\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"diamond\":\n    case \"ellipse\": {\n      options.fillStyle = element.fillStyle;\n      options.fill = isTransparent(element.backgroundColor)\n        ? undefined\n        : element.backgroundColor;\n      if (element.type === \"ellipse\") {\n        options.curveFitting = 1;\n      }\n      return options;\n    }\n    case \"line\":\n    case \"freedraw\": {\n      if (isPathALoop(element.points)) {\n        options.fillStyle = element.fillStyle;\n        options.fill =\n          element.backgroundColor === \"transparent\"\n            ? undefined\n            : element.backgroundColor;\n      }\n      return options;\n    }\n    case \"arrow\":\n      return options;\n    default: {\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nconst modifyIframeLikeForRoughOptions = (\n  element: NonDeletedExcalidrawElement,\n  isExporting: boolean,\n  embedsValidationStatus: EmbedsValidationStatus | null,\n) => {\n  if (\n    isIframeLikeElement(element) &&\n    (isExporting ||\n      (isEmbeddableElement(element) &&\n        embedsValidationStatus?.get(element.id) !== true)) &&\n    isTransparent(element.backgroundColor) &&\n    isTransparent(element.strokeColor)\n  ) {\n    return {\n      ...element,\n      roughness: 0,\n      backgroundColor: \"#d3d3d3\",\n      fillStyle: \"solid\",\n    } as const;\n  } else if (isIframeElement(element)) {\n    return {\n      ...element,\n      strokeColor: isTransparent(element.strokeColor)\n        ? \"#000000\"\n        : element.strokeColor,\n      backgroundColor: isTransparent(element.backgroundColor)\n        ? \"#f4f4f6\"\n        : element.backgroundColor,\n    };\n  }\n  return element;\n};\n\nconst getArrowheadShapes = (\n  element: ExcalidrawLinearElement,\n  shape: Drawable[],\n  position: \"start\" | \"end\",\n  arrowhead: Arrowhead,\n  generator: RoughGenerator,\n  options: Options,\n  canvasBackgroundColor: string,\n) => {\n  const arrowheadPoints = getArrowheadPoints(\n    element,\n    shape,\n    position,\n    arrowhead,\n  );\n\n  if (arrowheadPoints === null) {\n    return [];\n  }\n\n  const generateCrowfootOne = (\n    arrowheadPoints: number[] | null,\n    options: Options,\n  ) => {\n    if (arrowheadPoints === null) {\n      return [];\n    }\n\n    const [, , x3, y3, x4, y4] = arrowheadPoints;\n\n    return [generator.line(x3, y3, x4, y4, options)];\n  };\n\n  switch (arrowhead) {\n    case \"dot\":\n    case \"circle\":\n    case \"circle_outline\": {\n      const [x, y, diameter] = arrowheadPoints;\n\n      // always use solid stroke for arrowhead\n      delete options.strokeLineDash;\n\n      return [\n        generator.circle(x, y, diameter, {\n          ...options,\n          fill:\n            arrowhead === \"circle_outline\"\n              ? canvasBackgroundColor\n              : element.strokeColor,\n\n          fillStyle: \"solid\",\n          stroke: element.strokeColor,\n          roughness: Math.min(0.5, options.roughness || 0),\n        }),\n      ];\n    }\n    case \"triangle\":\n    case \"triangle_outline\": {\n      const [x, y, x2, y2, x3, y3] = arrowheadPoints;\n\n      // always use solid stroke for arrowhead\n      delete options.strokeLineDash;\n\n      return [\n        generator.polygon(\n          [\n            [x, y],\n            [x2, y2],\n            [x3, y3],\n            [x, y],\n          ],\n          {\n            ...options,\n            fill:\n              arrowhead === \"triangle_outline\"\n                ? canvasBackgroundColor\n                : element.strokeColor,\n            fillStyle: \"solid\",\n            roughness: Math.min(1, options.roughness || 0),\n          },\n        ),\n      ];\n    }\n    case \"diamond\":\n    case \"diamond_outline\": {\n      const [x, y, x2, y2, x3, y3, x4, y4] = arrowheadPoints;\n\n      // always use solid stroke for arrowhead\n      delete options.strokeLineDash;\n\n      return [\n        generator.polygon(\n          [\n            [x, y],\n            [x2, y2],\n            [x3, y3],\n            [x4, y4],\n            [x, y],\n          ],\n          {\n            ...options,\n            fill:\n              arrowhead === \"diamond_outline\"\n                ? canvasBackgroundColor\n                : element.strokeColor,\n            fillStyle: \"solid\",\n            roughness: Math.min(1, options.roughness || 0),\n          },\n        ),\n      ];\n    }\n    case \"crowfoot_one\":\n      return generateCrowfootOne(arrowheadPoints, options);\n    case \"bar\":\n    case \"arrow\":\n    case \"crowfoot_many\":\n    case \"crowfoot_one_or_many\":\n    default: {\n      const [x2, y2, x3, y3, x4, y4] = arrowheadPoints;\n\n      if (element.strokeStyle === \"dotted\") {\n        // for dotted arrows caps, reduce gap to make it more legible\n        const dash = getDashArrayDotted(element.strokeWidth - 1);\n        options.strokeLineDash = [dash[0], dash[1] - 1];\n      } else {\n        // for solid/dashed, keep solid arrow cap\n        delete options.strokeLineDash;\n      }\n      options.roughness = Math.min(1, options.roughness || 0);\n      return [\n        generator.line(x3, y3, x2, y2, options),\n        generator.line(x4, y4, x2, y2, options),\n        ...(arrowhead === \"crowfoot_one_or_many\"\n          ? generateCrowfootOne(\n              getArrowheadPoints(element, shape, position, \"crowfoot_one\"),\n              options,\n            )\n          : []),\n      ];\n    }\n  }\n};\n\n/**\n * Generates the roughjs shape for given element.\n *\n * Low-level. Use `ShapeCache.generateElementShape` instead.\n *\n * @private\n */\nexport const _generateElementShape = (\n  element: Exclude<NonDeletedExcalidrawElement, ExcalidrawSelectionElement>,\n  generator: RoughGenerator,\n  {\n    isExporting,\n    canvasBackgroundColor,\n    embedsValidationStatus,\n  }: {\n    isExporting: boolean;\n    canvasBackgroundColor: string;\n    embedsValidationStatus: EmbedsValidationStatus | null;\n  },\n): Drawable | Drawable[] | null => {\n  switch (element.type) {\n    case \"rectangle\":\n    case \"iframe\":\n    case \"embeddable\": {\n      let shape: ElementShapes[typeof element.type];\n      // this is for rendering the stroke/bg of the embeddable, especially\n      // when the src url is not set\n\n      if (element.roundness) {\n        const w = element.width;\n        const h = element.height;\n        const r = getCornerRadius(Math.min(w, h), element);\n        shape = generator.path(\n          `M ${r} 0 L ${w - r} 0 Q ${w} 0, ${w} ${r} L ${w} ${\n            h - r\n          } Q ${w} ${h}, ${w - r} ${h} L ${r} ${h} Q 0 ${h}, 0 ${\n            h - r\n          } L 0 ${r} Q 0 0, ${r} 0`,\n          generateRoughOptions(\n            modifyIframeLikeForRoughOptions(\n              element,\n              isExporting,\n              embedsValidationStatus,\n            ),\n            true,\n          ),\n        );\n      } else {\n        shape = generator.rectangle(\n          0,\n          0,\n          element.width,\n          element.height,\n          generateRoughOptions(\n            modifyIframeLikeForRoughOptions(\n              element,\n              isExporting,\n              embedsValidationStatus,\n            ),\n            false,\n          ),\n        );\n      }\n      return shape;\n    }\n    case \"diamond\": {\n      let shape: ElementShapes[typeof element.type];\n\n      const [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY] =\n        getDiamondPoints(element);\n      if (element.roundness) {\n        const verticalRadius = getCornerRadius(Math.abs(topX - leftX), element);\n\n        const horizontalRadius = getCornerRadius(\n          Math.abs(rightY - topY),\n          element,\n        );\n\n        shape = generator.path(\n          `M ${topX + verticalRadius} ${topY + horizontalRadius} L ${\n            rightX - verticalRadius\n          } ${rightY - horizontalRadius}\n            C ${rightX} ${rightY}, ${rightX} ${rightY}, ${\n            rightX - verticalRadius\n          } ${rightY + horizontalRadius}\n            L ${bottomX + verticalRadius} ${bottomY - horizontalRadius}\n            C ${bottomX} ${bottomY}, ${bottomX} ${bottomY}, ${\n            bottomX - verticalRadius\n          } ${bottomY - horizontalRadius}\n            L ${leftX + verticalRadius} ${leftY + horizontalRadius}\n            C ${leftX} ${leftY}, ${leftX} ${leftY}, ${leftX + verticalRadius} ${\n            leftY - horizontalRadius\n          }\n            L ${topX - verticalRadius} ${topY + horizontalRadius}\n            C ${topX} ${topY}, ${topX} ${topY}, ${topX + verticalRadius} ${\n            topY + horizontalRadius\n          }`,\n          generateRoughOptions(element, true),\n        );\n      } else {\n        shape = generator.polygon(\n          [\n            [topX, topY],\n            [rightX, rightY],\n            [bottomX, bottomY],\n            [leftX, leftY],\n          ],\n          generateRoughOptions(element),\n        );\n      }\n      return shape;\n    }\n    case \"ellipse\": {\n      const shape: ElementShapes[typeof element.type] = generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        generateRoughOptions(element),\n      );\n      return shape;\n    }\n    case \"line\":\n    case \"arrow\": {\n      let shape: ElementShapes[typeof element.type];\n      const options = generateRoughOptions(element);\n\n      // points array can be empty in the beginning, so it is important to add\n      // initial position to it\n      const points = element.points.length\n        ? element.points\n        : [pointFrom<LocalPoint>(0, 0)];\n\n      if (isElbowArrow(element)) {\n        // NOTE (mtolmacs): Temporary fix for extremely big arrow shapes\n        if (\n          !points.every(\n            (point) => Math.abs(point[0]) <= 1e6 && Math.abs(point[1]) <= 1e6,\n          )\n        ) {\n          console.error(\n            `Elbow arrow with extreme point positions detected. Arrow not rendered.`,\n            element.id,\n            JSON.stringify(points),\n          );\n          shape = [];\n        } else {\n          shape = [\n            generator.path(\n              generateElbowArrowShape(points, 16),\n              generateRoughOptions(element, true),\n            ),\n          ];\n        }\n      } else if (!element.roundness) {\n        // curve is always the first element\n        // this simplifies finding the curve for an element\n        if (options.fill) {\n          shape = [\n            generator.polygon(points as unknown as RoughPoint[], options),\n          ];\n        } else {\n          shape = [\n            generator.linearPath(points as unknown as RoughPoint[], options),\n          ];\n        }\n      } else {\n        shape = [generator.curve(points as unknown as RoughPoint[], options)];\n      }\n\n      // add lines only in arrow\n      if (element.type === \"arrow\") {\n        const { startArrowhead = null, endArrowhead = \"arrow\" } = element;\n\n        if (startArrowhead !== null) {\n          const shapes = getArrowheadShapes(\n            element,\n            shape,\n            \"start\",\n            startArrowhead,\n            generator,\n            options,\n            canvasBackgroundColor,\n          );\n          shape.push(...shapes);\n        }\n\n        if (endArrowhead !== null) {\n          if (endArrowhead === undefined) {\n            // Hey, we have an old arrow here!\n          }\n\n          const shapes = getArrowheadShapes(\n            element,\n            shape,\n            \"end\",\n            endArrowhead,\n            generator,\n            options,\n            canvasBackgroundColor,\n          );\n          shape.push(...shapes);\n        }\n      }\n      return shape;\n    }\n    case \"freedraw\": {\n      let shape: ElementShapes[typeof element.type];\n      generateFreeDrawShape(element);\n\n      if (isPathALoop(element.points)) {\n        // generate rough polygon to fill freedraw shape\n        const simplifiedPoints = simplify(\n          element.points as Mutable<LocalPoint[]>,\n          0.75,\n        );\n        shape = generator.curve(simplifiedPoints as [number, number][], {\n          ...generateRoughOptions(element),\n          stroke: \"none\",\n        });\n      } else {\n        shape = null;\n      }\n      return shape;\n    }\n    case \"frame\":\n    case \"magicframe\":\n    case \"text\":\n    case \"image\": {\n      const shape: ElementShapes[typeof element.type] = null;\n      // we return (and cache) `null` to make sure we don't regenerate\n      // `element.canvas` on rerenders\n      return shape;\n    }\n    default: {\n      assertNever(\n        element,\n        `generateElementShape(): Unimplemented type ${(element as any)?.type}`,\n      );\n      return null;\n    }\n  }\n};\n\nconst generateElbowArrowShape = (\n  points: readonly LocalPoint[],\n  radius: number,\n) => {\n  const subpoints = [] as [number, number][];\n  for (let i = 1; i < points.length - 1; i += 1) {\n    const prev = points[i - 1];\n    const next = points[i + 1];\n    const point = points[i];\n    const prevIsHorizontal = headingForPointIsHorizontal(point, prev);\n    const nextIsHorizontal = headingForPointIsHorizontal(next, point);\n    const corner = Math.min(\n      radius,\n      pointDistance(points[i], next) / 2,\n      pointDistance(points[i], prev) / 2,\n    );\n\n    if (prevIsHorizontal) {\n      if (prev[0] < point[0]) {\n        // LEFT\n        subpoints.push([points[i][0] - corner, points[i][1]]);\n      } else {\n        // RIGHT\n        subpoints.push([points[i][0] + corner, points[i][1]]);\n      }\n    } else if (prev[1] < point[1]) {\n      // UP\n      subpoints.push([points[i][0], points[i][1] - corner]);\n    } else {\n      subpoints.push([points[i][0], points[i][1] + corner]);\n    }\n\n    subpoints.push(points[i] as [number, number]);\n\n    if (nextIsHorizontal) {\n      if (next[0] < point[0]) {\n        // LEFT\n        subpoints.push([points[i][0] - corner, points[i][1]]);\n      } else {\n        // RIGHT\n        subpoints.push([points[i][0] + corner, points[i][1]]);\n      }\n    } else if (next[1] < point[1]) {\n      // UP\n      subpoints.push([points[i][0], points[i][1] - corner]);\n    } else {\n      // DOWN\n      subpoints.push([points[i][0], points[i][1] + corner]);\n    }\n  }\n\n  const d = [`M ${points[0][0]} ${points[0][1]}`];\n  for (let i = 0; i < subpoints.length; i += 3) {\n    d.push(`L ${subpoints[i][0]} ${subpoints[i][1]}`);\n    d.push(\n      `Q ${subpoints[i + 1][0]} ${subpoints[i + 1][1]}, ${\n        subpoints[i + 2][0]\n      } ${subpoints[i + 2][1]}`,\n    );\n  }\n  d.push(`L ${points[points.length - 1][0]} ${points[points.length - 1][1]}`);\n\n  return d.join(\" \");\n};\n", "import { ROUNDNESS, assertNever } from \"@excalidraw/common\";\n\nimport type { ElementOrToolType } from \"@excalidraw/excalidraw/types\";\n\nimport type { MarkNonNullable } from \"@excalidraw/common/utility-types\";\n\nimport type { Bounds } from \"./bounds\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawEmbeddableElement,\n  ExcalidrawLinearElement,\n  ExcalidrawBindableElement,\n  ExcalidrawFreeDrawElement,\n  InitializedExcalidrawImageElement,\n  ExcalidrawImageElement,\n  ExcalidrawTextElementWithContainer,\n  ExcalidrawTextContainer,\n  ExcalidrawFrameElement,\n  RoundnessType,\n  ExcalidrawFrameLikeElement,\n  ExcalidrawElementType,\n  ExcalidrawIframeElement,\n  ExcalidrawIframeLikeElement,\n  ExcalidrawMagicFrameElement,\n  ExcalidrawArrowElement,\n  ExcalidrawElbowArrowElement,\n  PointBinding,\n  FixedPointBinding,\n  ExcalidrawFlowchartNodeElement,\n} from \"./types\";\n\nexport const isInitializedImageElement = (\n  element: ExcalidrawElement | null,\n): element is InitializedExcalidrawImageElement => {\n  return !!element && element.type === \"image\" && !!element.fileId;\n};\n\nexport const isImageElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawImageElement => {\n  return !!element && element.type === \"image\";\n};\n\nexport const isEmbeddableElement = (\n  element: ExcalidrawElement | null | undefined,\n): element is ExcalidrawEmbeddableElement => {\n  return !!element && element.type === \"embeddable\";\n};\n\nexport const isIframeElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawIframeElement => {\n  return !!element && element.type === \"iframe\";\n};\n\nexport const isIframeLikeElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawIframeLikeElement => {\n  return (\n    !!element && (element.type === \"iframe\" || element.type === \"embeddable\")\n  );\n};\n\nexport const isTextElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElement => {\n  return element != null && element.type === \"text\";\n};\n\nexport const isFrameElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawFrameElement => {\n  return element != null && element.type === \"frame\";\n};\n\nexport const isMagicFrameElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawMagicFrameElement => {\n  return element != null && element.type === \"magicframe\";\n};\n\nexport const isFrameLikeElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawFrameLikeElement => {\n  return (\n    element != null &&\n    (element.type === \"frame\" || element.type === \"magicframe\")\n  );\n};\n\nexport const isFreeDrawElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawFreeDrawElement => {\n  return element != null && isFreeDrawElementType(element.type);\n};\n\nexport const isFreeDrawElementType = (\n  elementType: ExcalidrawElementType,\n): boolean => {\n  return elementType === \"freedraw\";\n};\n\nexport const isLinearElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return element != null && isLinearElementType(element.type);\n};\n\nexport const isArrowElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawArrowElement => {\n  return element != null && element.type === \"arrow\";\n};\n\nexport const isElbowArrow = (\n  element?: ExcalidrawElement,\n): element is ExcalidrawElbowArrowElement => {\n  return isArrowElement(element) && element.elbowed;\n};\n\nexport const isLinearElementType = (\n  elementType: ElementOrToolType,\n): boolean => {\n  return (\n    elementType === \"arrow\" || elementType === \"line\" // || elementType === \"freedraw\"\n  );\n};\n\nexport const isBindingElement = (\n  element?: ExcalidrawElement | null,\n  includeLocked = true,\n): element is ExcalidrawLinearElement => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    isBindingElementType(element.type)\n  );\n};\n\nexport const isBindingElementType = (\n  elementType: ElementOrToolType,\n): boolean => {\n  return elementType === \"arrow\";\n};\n\nexport const isBindableElement = (\n  element: ExcalidrawElement | null | undefined,\n  includeLocked = true,\n): element is ExcalidrawBindableElement => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\" ||\n      element.type === \"image\" ||\n      element.type === \"iframe\" ||\n      element.type === \"embeddable\" ||\n      element.type === \"frame\" ||\n      element.type === \"magicframe\" ||\n      (element.type === \"text\" && !element.containerId))\n  );\n};\n\nexport const isRectanguloidElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawBindableElement => {\n  return (\n    element != null &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"image\" ||\n      element.type === \"iframe\" ||\n      element.type === \"embeddable\" ||\n      element.type === \"frame\" ||\n      element.type === \"magicframe\" ||\n      (element.type === \"text\" && !element.containerId))\n  );\n};\n\n// TODO: Remove this when proper distance calculation is introduced\n// @see binding.ts:distanceToBindableElement()\nexport const isRectangularElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawBindableElement => {\n  return (\n    element != null &&\n    (element.type === \"rectangle\" ||\n      element.type === \"image\" ||\n      element.type === \"text\" ||\n      element.type === \"iframe\" ||\n      element.type === \"embeddable\" ||\n      element.type === \"frame\" ||\n      element.type === \"magicframe\" ||\n      element.type === \"freedraw\")\n  );\n};\n\nexport const isTextBindableContainer = (\n  element: ExcalidrawElement | null,\n  includeLocked = true,\n): element is ExcalidrawTextContainer => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\" ||\n      isArrowElement(element))\n  );\n};\n\nexport const isExcalidrawElement = (\n  element: any,\n): element is ExcalidrawElement => {\n  const type: ExcalidrawElementType | undefined = element?.type;\n  if (!type) {\n    return false;\n  }\n  switch (type) {\n    case \"text\":\n    case \"diamond\":\n    case \"rectangle\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"ellipse\":\n    case \"arrow\":\n    case \"freedraw\":\n    case \"line\":\n    case \"frame\":\n    case \"magicframe\":\n    case \"image\":\n    case \"selection\": {\n      return true;\n    }\n    default: {\n      assertNever(type, null);\n      return false;\n    }\n  }\n};\n\nexport const isFlowchartNodeElement = (\n  element: ExcalidrawElement,\n): element is ExcalidrawFlowchartNodeElement => {\n  return (\n    element.type === \"rectangle\" ||\n    element.type === \"ellipse\" ||\n    element.type === \"diamond\"\n  );\n};\n\nexport const hasBoundTextElement = (\n  element: ExcalidrawElement | null,\n): element is MarkNonNullable<ExcalidrawBindableElement, \"boundElements\"> => {\n  return (\n    isTextBindableContainer(element) &&\n    !!element.boundElements?.some(({ type }) => type === \"text\")\n  );\n};\n\nexport const isBoundToContainer = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElementWithContainer => {\n  return (\n    element !== null &&\n    \"containerId\" in element &&\n    element.containerId !== null &&\n    isTextElement(element)\n  );\n};\n\nexport const isUsingAdaptiveRadius = (type: string) =>\n  type === \"rectangle\" ||\n  type === \"embeddable\" ||\n  type === \"iframe\" ||\n  type === \"image\";\n\nexport const isUsingProportionalRadius = (type: string) =>\n  type === \"line\" || type === \"arrow\" || type === \"diamond\";\n\nexport const canApplyRoundnessTypeToElement = (\n  roundnessType: RoundnessType,\n  element: ExcalidrawElement,\n) => {\n  if (\n    (roundnessType === ROUNDNESS.ADAPTIVE_RADIUS ||\n      // if legacy roundness, it can be applied to elements that currently\n      // use adaptive radius\n      roundnessType === ROUNDNESS.LEGACY) &&\n    isUsingAdaptiveRadius(element.type)\n  ) {\n    return true;\n  }\n  if (\n    roundnessType === ROUNDNESS.PROPORTIONAL_RADIUS &&\n    isUsingProportionalRadius(element.type)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getDefaultRoundnessTypeForElement = (\n  element: ExcalidrawElement,\n) => {\n  if (isUsingProportionalRadius(element.type)) {\n    return {\n      type: ROUNDNESS.PROPORTIONAL_RADIUS,\n    };\n  }\n\n  if (isUsingAdaptiveRadius(element.type)) {\n    return {\n      type: ROUNDNESS.ADAPTIVE_RADIUS,\n    };\n  }\n\n  return null;\n};\n\nexport const isFixedPointBinding = (\n  binding: PointBinding | FixedPointBinding,\n): binding is FixedPointBinding => {\n  return (\n    Object.hasOwn(binding, \"fixedPoint\") &&\n    (binding as FixedPointBinding).fixedPoint != null\n  );\n};\n\n// TODO: Move this to @excalidraw/math\nexport const isBounds = (box: unknown): box is Bounds =>\n  Array.isArray(box) &&\n  box.length === 4 &&\n  typeof box[0] === \"number\" &&\n  typeof box[1] === \"number\" &&\n  typeof box[2] === \"number\" &&\n  typeof box[3] === \"number\";\n", "import {\n  DEFAULT_ADAPTIVE_RADIUS,\n  DEFAULT_PROPORTIONAL_RADIUS,\n  LINE_CONFIRM_THRESHOLD,\n  ROUNDNESS,\n  invariant,\n} from \"@excalidraw/common\";\nimport {\n  isPoint,\n  pointFrom,\n  pointDistance,\n  pointFromPair,\n  pointRotateRads,\n  pointsEqual,\n  type GlobalPoint,\n  type LocalPoint,\n} from \"@excalidraw/math\";\nimport {\n  getClosedCurveShape,\n  getCurvePathOps,\n  getCurveShape,\n  getEllipseShape,\n  getFreedrawShape,\n  getPolygonShape,\n  type GeometricShape,\n} from \"@excalidraw/utils/shape\";\n\nimport type { NormalizedZoomValue, Zoom } from \"@excalidraw/excalidraw/types\";\n\nimport { shouldTestInside } from \"./collision\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { getBoundTextElement } from \"./textElement\";\nimport { ShapeCache } from \"./ShapeCache\";\n\nimport { getElementAbsoluteCoords, type Bounds } from \"./bounds\";\n\nimport type {\n  ElementsMap,\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  NonDeleted,\n} from \"./types\";\n\n/**\n * get the pure geometric shape of an excalidraw elementw\n * which is then used for hit detection\n */\nexport const getElementShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n): GeometricShape<Point> => {\n  switch (element.type) {\n    case \"rectangle\":\n    case \"diamond\":\n    case \"frame\":\n    case \"magicframe\":\n    case \"embeddable\":\n    case \"image\":\n    case \"iframe\":\n    case \"text\":\n    case \"selection\":\n      return getPolygonShape(element);\n    case \"arrow\":\n    case \"line\": {\n      const roughShape =\n        ShapeCache.get(element)?.[0] ??\n        ShapeCache.generateElementShape(element, null)[0];\n      const [, , , , cx, cy] = getElementAbsoluteCoords(element, elementsMap);\n\n      return shouldTestInside(element)\n        ? getClosedCurveShape<Point>(\n            element,\n            roughShape,\n            pointFrom<Point>(element.x, element.y),\n            element.angle,\n            pointFrom(cx, cy),\n          )\n        : getCurveShape<Point>(\n            roughShape,\n            pointFrom<Point>(element.x, element.y),\n            element.angle,\n            pointFrom(cx, cy),\n          );\n    }\n\n    case \"ellipse\":\n      return getEllipseShape(element);\n\n    case \"freedraw\": {\n      const [, , , , cx, cy] = getElementAbsoluteCoords(element, elementsMap);\n      return getFreedrawShape(\n        element,\n        pointFrom(cx, cy),\n        shouldTestInside(element),\n      );\n    }\n  }\n};\n\nexport const getBoundTextShape = <Point extends GlobalPoint | LocalPoint>(\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n): GeometricShape<Point> | null => {\n  const boundTextElement = getBoundTextElement(element, elementsMap);\n\n  if (boundTextElement) {\n    if (element.type === \"arrow\") {\n      return getElementShape(\n        {\n          ...boundTextElement,\n          // arrow's bound text accurate position is not stored in the element's property\n          // but rather calculated and returned from the following static method\n          ...LinearElementEditor.getBoundTextElementPosition(\n            element,\n            boundTextElement,\n            elementsMap,\n          ),\n        },\n        elementsMap,\n      );\n    }\n    return getElementShape(boundTextElement, elementsMap);\n  }\n\n  return null;\n};\n\nexport const getControlPointsForBezierCurve = <\n  P extends GlobalPoint | LocalPoint,\n>(\n  element: NonDeleted<ExcalidrawLinearElement>,\n  endPoint: P,\n) => {\n  const shape = ShapeCache.generateElementShape(element, null);\n  if (!shape) {\n    return null;\n  }\n\n  const ops = getCurvePathOps(shape[0]);\n  let currentP = pointFrom<P>(0, 0);\n  let index = 0;\n  let minDistance = Infinity;\n  let controlPoints: P[] | null = null;\n\n  while (index < ops.length) {\n    const { op, data } = ops[index];\n    if (op === \"move\") {\n      invariant(\n        isPoint(data),\n        \"The returned ops is not compatible with a point\",\n      );\n      currentP = pointFromPair(data);\n    }\n    if (op === \"bcurveTo\") {\n      const p0 = currentP;\n      const p1 = pointFrom<P>(data[0], data[1]);\n      const p2 = pointFrom<P>(data[2], data[3]);\n      const p3 = pointFrom<P>(data[4], data[5]);\n      const distance = pointDistance(p3, endPoint);\n      if (distance < minDistance) {\n        minDistance = distance;\n        controlPoints = [p0, p1, p2, p3];\n      }\n      currentP = p3;\n    }\n    index++;\n  }\n\n  return controlPoints;\n};\n\nexport const getBezierXY = <P extends GlobalPoint | LocalPoint>(\n  p0: P,\n  p1: P,\n  p2: P,\n  p3: P,\n  t: number,\n): P => {\n  const equation = (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n  const tx = equation(t, 0);\n  const ty = equation(t, 1);\n  return pointFrom(tx, ty);\n};\n\nconst getPointsInBezierCurve = <P extends GlobalPoint | LocalPoint>(\n  element: NonDeleted<ExcalidrawLinearElement>,\n  endPoint: P,\n) => {\n  const controlPoints: P[] = getControlPointsForBezierCurve(element, endPoint)!;\n  if (!controlPoints) {\n    return [];\n  }\n  const pointsOnCurve: P[] = [];\n  let t = 1;\n  // Take 20 points on curve for better accuracy\n  while (t > 0) {\n    const p = getBezierXY(\n      controlPoints[0],\n      controlPoints[1],\n      controlPoints[2],\n      controlPoints[3],\n      t,\n    );\n    pointsOnCurve.push(pointFrom(p[0], p[1]));\n    t -= 0.05;\n  }\n  if (pointsOnCurve.length) {\n    if (pointsEqual(pointsOnCurve.at(-1)!, endPoint)) {\n      pointsOnCurve.push(pointFrom(endPoint[0], endPoint[1]));\n    }\n  }\n  return pointsOnCurve;\n};\n\nconst getBezierCurveArcLengths = <P extends GlobalPoint | LocalPoint>(\n  element: NonDeleted<ExcalidrawLinearElement>,\n  endPoint: P,\n) => {\n  const arcLengths: number[] = [];\n  arcLengths[0] = 0;\n  const points = getPointsInBezierCurve(element, endPoint);\n  let index = 0;\n  let distance = 0;\n  while (index < points.length - 1) {\n    const segmentDistance = pointDistance(points[index], points[index + 1]);\n    distance += segmentDistance;\n    arcLengths.push(distance);\n    index++;\n  }\n\n  return arcLengths;\n};\n\nexport const getBezierCurveLength = <P extends GlobalPoint | LocalPoint>(\n  element: NonDeleted<ExcalidrawLinearElement>,\n  endPoint: P,\n) => {\n  const arcLengths = getBezierCurveArcLengths(element, endPoint);\n  return arcLengths.at(-1) as number;\n};\n\n// This maps interval to actual interval t on the curve so that when t = 0.5, its actually the point at 50% of the length\nexport const mapIntervalToBezierT = <P extends GlobalPoint | LocalPoint>(\n  element: NonDeleted<ExcalidrawLinearElement>,\n  endPoint: P,\n  interval: number, // The interval between 0 to 1 for which you want to find the point on the curve,\n) => {\n  const arcLengths = getBezierCurveArcLengths(element, endPoint);\n  const pointsCount = arcLengths.length - 1;\n  const curveLength = arcLengths.at(-1) as number;\n  const targetLength = interval * curveLength;\n  let low = 0;\n  let high = pointsCount;\n  let index = 0;\n  // Doing a binary search to find the largest length that is less than the target length\n  while (low < high) {\n    index = Math.floor(low + (high - low) / 2);\n    if (arcLengths[index] < targetLength) {\n      low = index + 1;\n    } else {\n      high = index;\n    }\n  }\n  if (arcLengths[index] > targetLength) {\n    index--;\n  }\n  if (arcLengths[index] === targetLength) {\n    return index / pointsCount;\n  }\n\n  return (\n    1 -\n    (index +\n      (targetLength - arcLengths[index]) /\n        (arcLengths[index + 1] - arcLengths[index])) /\n      pointsCount\n  );\n};\n\n/**\n * Get the axis-aligned bounding box for a given element\n */\nexport const aabbForElement = (\n  element: Readonly<ExcalidrawElement>,\n  offset?: [number, number, number, number],\n) => {\n  const bbox = {\n    minX: element.x,\n    minY: element.y,\n    maxX: element.x + element.width,\n    maxY: element.y + element.height,\n    midX: element.x + element.width / 2,\n    midY: element.y + element.height / 2,\n  };\n\n  const center = pointFrom(bbox.midX, bbox.midY);\n  const [topLeftX, topLeftY] = pointRotateRads(\n    pointFrom(bbox.minX, bbox.minY),\n    center,\n    element.angle,\n  );\n  const [topRightX, topRightY] = pointRotateRads(\n    pointFrom(bbox.maxX, bbox.minY),\n    center,\n    element.angle,\n  );\n  const [bottomRightX, bottomRightY] = pointRotateRads(\n    pointFrom(bbox.maxX, bbox.maxY),\n    center,\n    element.angle,\n  );\n  const [bottomLeftX, bottomLeftY] = pointRotateRads(\n    pointFrom(bbox.minX, bbox.maxY),\n    center,\n    element.angle,\n  );\n\n  const bounds = [\n    Math.min(topLeftX, topRightX, bottomRightX, bottomLeftX),\n    Math.min(topLeftY, topRightY, bottomRightY, bottomLeftY),\n    Math.max(topLeftX, topRightX, bottomRightX, bottomLeftX),\n    Math.max(topLeftY, topRightY, bottomRightY, bottomLeftY),\n  ] as Bounds;\n\n  if (offset) {\n    const [topOffset, rightOffset, downOffset, leftOffset] = offset;\n    return [\n      bounds[0] - leftOffset,\n      bounds[1] - topOffset,\n      bounds[2] + rightOffset,\n      bounds[3] + downOffset,\n    ] as Bounds;\n  }\n\n  return bounds;\n};\n\nexport const pointInsideBounds = <P extends GlobalPoint | LocalPoint>(\n  p: P,\n  bounds: Bounds,\n): boolean =>\n  p[0] > bounds[0] && p[0] < bounds[2] && p[1] > bounds[1] && p[1] < bounds[3];\n\nexport const aabbsOverlapping = (a: Bounds, b: Bounds) =>\n  pointInsideBounds(pointFrom(a[0], a[1]), b) ||\n  pointInsideBounds(pointFrom(a[2], a[1]), b) ||\n  pointInsideBounds(pointFrom(a[2], a[3]), b) ||\n  pointInsideBounds(pointFrom(a[0], a[3]), b) ||\n  pointInsideBounds(pointFrom(b[0], b[1]), a) ||\n  pointInsideBounds(pointFrom(b[2], b[1]), a) ||\n  pointInsideBounds(pointFrom(b[2], b[3]), a) ||\n  pointInsideBounds(pointFrom(b[0], b[3]), a);\n\nexport const getCornerRadius = (x: number, element: ExcalidrawElement) => {\n  if (\n    element.roundness?.type === ROUNDNESS.PROPORTIONAL_RADIUS ||\n    element.roundness?.type === ROUNDNESS.LEGACY\n  ) {\n    return x * DEFAULT_PROPORTIONAL_RADIUS;\n  }\n\n  if (element.roundness?.type === ROUNDNESS.ADAPTIVE_RADIUS) {\n    const fixedRadiusSize = element.roundness?.value ?? DEFAULT_ADAPTIVE_RADIUS;\n\n    const CUTOFF_SIZE = fixedRadiusSize / DEFAULT_PROPORTIONAL_RADIUS;\n\n    if (x <= CUTOFF_SIZE) {\n      return x * DEFAULT_PROPORTIONAL_RADIUS;\n    }\n\n    return fixedRadiusSize;\n  }\n\n  return 0;\n};\n\n// Checks if the first and last point are close enough\n// to be considered a loop\nexport const isPathALoop = (\n  points: ExcalidrawLinearElement[\"points\"],\n  /** supply if you want the loop detection to account for current zoom */\n  zoomValue: Zoom[\"value\"] = 1 as NormalizedZoomValue,\n): boolean => {\n  if (points.length >= 3) {\n    const [first, last] = [points[0], points[points.length - 1]];\n    const distance = pointDistance(first, last);\n\n    // Adjusting LINE_CONFIRM_THRESHOLD to current zoom so that when zoomed in\n    // really close we make the threshold smaller, and vice versa.\n    return distance <= LINE_CONFIRM_THRESHOLD / zoomValue;\n  }\n  return false;\n};\n", "import { isTransparent } from \"@excalidraw/common\";\nimport {\n  curveIntersectLineSegment,\n  isPointWithinBounds,\n  line,\n  lineSegment,\n  lineSegmentIntersectionPoints,\n  pointFrom,\n  pointRotateRads,\n  pointsEqual,\n} from \"@excalidraw/math\";\n\nimport {\n  ellipse,\n  ellipseLineIntersectionPoints,\n} from \"@excalidraw/math/ellipse\";\n\nimport { isPointInShape, isPointOnShape } from \"@excalidraw/utils/collision\";\nimport { getPolygonShape } from \"@excalidraw/utils/shape\";\n\nimport type {\n  GlobalPoint,\n  LineSegment,\n  LocalPoint,\n  Polygon,\n  Radians,\n} from \"@excalidraw/math\";\n\nimport type { GeometricShape } from \"@excalidraw/utils/shape\";\n\nimport type { FrameNameBounds } from \"@excalidraw/excalidraw/types\";\n\nimport { getBoundTextShape, isPathALoop } from \"./shapes\";\nimport { getElementBounds } from \"./bounds\";\nimport {\n  hasBoundTextElement,\n  isIframeLikeElement,\n  isImageElement,\n  isTextElement,\n} from \"./typeChecks\";\nimport {\n  deconstructDiamondElement,\n  deconstructRectanguloidElement,\n} from \"./utils\";\n\nimport type {\n  ElementsMap,\n  ExcalidrawDiamondElement,\n  ExcalidrawElement,\n  ExcalidrawEllipseElement,\n  ExcalidrawRectangleElement,\n  ExcalidrawRectanguloidElement,\n} from \"./types\";\n\nexport const shouldTestInside = (element: ExcalidrawElement) => {\n  if (element.type === \"arrow\") {\n    return false;\n  }\n\n  const isDraggableFromInside =\n    !isTransparent(element.backgroundColor) ||\n    hasBoundTextElement(element) ||\n    isIframeLikeElement(element) ||\n    isTextElement(element);\n\n  if (element.type === \"line\") {\n    return isDraggableFromInside && isPathALoop(element.points);\n  }\n\n  if (element.type === \"freedraw\") {\n    return isDraggableFromInside && isPathALoop(element.points);\n  }\n\n  return isDraggableFromInside || isImageElement(element);\n};\n\nexport type HitTestArgs<Point extends GlobalPoint | LocalPoint> = {\n  x: number;\n  y: number;\n  element: ExcalidrawElement;\n  shape: GeometricShape<Point>;\n  threshold?: number;\n  frameNameBound?: FrameNameBounds | null;\n};\n\nexport const hitElementItself = <Point extends GlobalPoint | LocalPoint>({\n  x,\n  y,\n  element,\n  shape,\n  threshold = 10,\n  frameNameBound = null,\n}: HitTestArgs<Point>) => {\n  let hit = shouldTestInside(element)\n    ? // Since `inShape` tests STRICTLY againt the insides of a shape\n      // we would need `onShape` as well to include the \"borders\"\n      isPointInShape(pointFrom(x, y), shape) ||\n      isPointOnShape(pointFrom(x, y), shape, threshold)\n    : isPointOnShape(pointFrom(x, y), shape, threshold);\n\n  // hit test against a frame's name\n  if (!hit && frameNameBound) {\n    hit = isPointInShape(pointFrom(x, y), {\n      type: \"polygon\",\n      data: getPolygonShape(frameNameBound as ExcalidrawRectangleElement)\n        .data as Polygon<Point>,\n    });\n  }\n\n  return hit;\n};\n\nexport const hitElementBoundingBox = (\n  x: number,\n  y: number,\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n  tolerance = 0,\n) => {\n  let [x1, y1, x2, y2] = getElementBounds(element, elementsMap);\n  x1 -= tolerance;\n  y1 -= tolerance;\n  x2 += tolerance;\n  y2 += tolerance;\n  return isPointWithinBounds(\n    pointFrom(x1, y1),\n    pointFrom(x, y),\n    pointFrom(x2, y2),\n  );\n};\n\nexport const hitElementBoundingBoxOnly = <\n  Point extends GlobalPoint | LocalPoint,\n>(\n  hitArgs: HitTestArgs<Point>,\n  elementsMap: ElementsMap,\n) => {\n  return (\n    !hitElementItself(hitArgs) &&\n    // bound text is considered part of the element (even if it's outside the bounding box)\n    !hitElementBoundText(\n      hitArgs.x,\n      hitArgs.y,\n      getBoundTextShape(hitArgs.element, elementsMap),\n    ) &&\n    hitElementBoundingBox(hitArgs.x, hitArgs.y, hitArgs.element, elementsMap)\n  );\n};\n\nexport const hitElementBoundText = <Point extends GlobalPoint | LocalPoint>(\n  x: number,\n  y: number,\n  textShape: GeometricShape<Point> | null,\n): boolean => {\n  return !!textShape && isPointInShape(pointFrom(x, y), textShape);\n};\n\n/**\n * Intersect a line with an element for binding test\n *\n * @param element\n * @param line\n * @param offset\n * @returns\n */\nexport const intersectElementWithLineSegment = (\n  element: ExcalidrawElement,\n  line: LineSegment<GlobalPoint>,\n  offset: number = 0,\n): GlobalPoint[] => {\n  switch (element.type) {\n    case \"rectangle\":\n    case \"image\":\n    case \"text\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"frame\":\n    case \"magicframe\":\n      return intersectRectanguloidWithLineSegment(element, line, offset);\n    case \"diamond\":\n      return intersectDiamondWithLineSegment(element, line, offset);\n    case \"ellipse\":\n      return intersectEllipseWithLineSegment(element, line, offset);\n    default:\n      throw new Error(`Unimplemented element type '${element.type}'`);\n  }\n};\n\nconst intersectRectanguloidWithLineSegment = (\n  element: ExcalidrawRectanguloidElement,\n  l: LineSegment<GlobalPoint>,\n  offset: number = 0,\n): GlobalPoint[] => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n  // To emulate a rotated rectangle we rotate the point in the inverse angle\n  // instead. It's all the same distance-wise.\n  const rotatedA = pointRotateRads<GlobalPoint>(\n    l[0],\n    center,\n    -element.angle as Radians,\n  );\n  const rotatedB = pointRotateRads<GlobalPoint>(\n    l[1],\n    center,\n    -element.angle as Radians,\n  );\n\n  // Get the element's building components we can test against\n  const [sides, corners] = deconstructRectanguloidElement(element, offset);\n\n  return (\n    // Test intersection against the sides, keep only the valid\n    // intersection points and rotate them back to scene space\n    sides\n      .map((s) =>\n        lineSegmentIntersectionPoints(\n          lineSegment<GlobalPoint>(rotatedA, rotatedB),\n          s,\n        ),\n      )\n      .filter((x) => x != null)\n      .map((j) => pointRotateRads<GlobalPoint>(j!, center, element.angle))\n      // Test intersection against the corners which are cubic bezier curves,\n      // keep only the valid intersection points and rotate them back to scene\n      // space\n      .concat(\n        corners\n          .flatMap((t) =>\n            curveIntersectLineSegment(t, lineSegment(rotatedA, rotatedB)),\n          )\n          .filter((i) => i != null)\n          .map((j) => pointRotateRads(j, center, element.angle)),\n      )\n      // Remove duplicates\n      .filter(\n        (p, idx, points) => points.findIndex((d) => pointsEqual(p, d)) === idx,\n      )\n  );\n};\n\n/**\n *\n * @param element\n * @param a\n * @param b\n * @returns\n */\nconst intersectDiamondWithLineSegment = (\n  element: ExcalidrawDiamondElement,\n  l: LineSegment<GlobalPoint>,\n  offset: number = 0,\n): GlobalPoint[] => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  // Rotate the point to the inverse direction to simulate the rotated diamond\n  // points. It's all the same distance-wise.\n  const rotatedA = pointRotateRads(l[0], center, -element.angle as Radians);\n  const rotatedB = pointRotateRads(l[1], center, -element.angle as Radians);\n\n  const [sides, curves] = deconstructDiamondElement(element, offset);\n\n  return (\n    sides\n      .map((s) =>\n        lineSegmentIntersectionPoints(\n          lineSegment<GlobalPoint>(rotatedA, rotatedB),\n          s,\n        ),\n      )\n      .filter((p): p is GlobalPoint => p != null)\n      // Rotate back intersection points\n      .map((p) => pointRotateRads<GlobalPoint>(p!, center, element.angle))\n      .concat(\n        curves\n          .flatMap((p) =>\n            curveIntersectLineSegment(p, lineSegment(rotatedA, rotatedB)),\n          )\n          .filter((p) => p != null)\n          // Rotate back intersection points\n          .map((p) => pointRotateRads(p, center, element.angle)),\n      )\n      // Remove duplicates\n      .filter(\n        (p, idx, points) => points.findIndex((d) => pointsEqual(p, d)) === idx,\n      )\n  );\n};\n\n/**\n *\n * @param element\n * @param a\n * @param b\n * @returns\n */\nconst intersectEllipseWithLineSegment = (\n  element: ExcalidrawEllipseElement,\n  l: LineSegment<GlobalPoint>,\n  offset: number = 0,\n): GlobalPoint[] => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  const rotatedA = pointRotateRads(l[0], center, -element.angle as Radians);\n  const rotatedB = pointRotateRads(l[1], center, -element.angle as Radians);\n\n  return ellipseLineIntersectionPoints(\n    ellipse(center, element.width / 2 + offset, element.height / 2 + offset),\n    line(rotatedA, rotatedB),\n  ).map((p) => pointRotateRads(p, center, element.angle));\n};\n", "import {\n  pointFrom,\n  pointDistance,\n  pointFromVector,\n  pointsEqual,\n} from \"./point\";\nimport { PRECISION } from \"./utils\";\nimport {\n  vector,\n  vectorAdd,\n  vectorDot,\n  vectorFromPoint,\n  vectorScale,\n} from \"./vector\";\n\nimport type {\n  Ellipse,\n  GlobalPoint,\n  Line,\n  LineSegment,\n  LocalPoint,\n} from \"./types\";\n\n/**\n * Construct an Ellipse object from the parameters\n *\n * @param center The center of the ellipse\n * @param angle The slanting of the ellipse in radians\n * @param halfWidth Half of the width of a non-slanted version of the ellipse\n * @param halfHeight Half of the height of a non-slanted version of the ellipse\n * @returns The constructed Ellipse object\n */\nexport function ellipse<Point extends GlobalPoint | LocalPoint>(\n  center: Point,\n  halfWidth: number,\n  halfHeight: number,\n): Ellipse<Point> {\n  return {\n    center,\n    halfWidth,\n    halfHeight,\n  } as Ellipse<Point>;\n}\n\n/**\n * Determines if a point is inside or on the ellipse outline\n *\n * @param p The point to test\n * @param ellipse The ellipse to compare against\n * @returns TRUE if the point is inside or on the outline of the ellipse\n */\nexport const ellipseIncludesPoint = <Point extends GlobalPoint | LocalPoint>(\n  p: Point,\n  ellipse: Ellipse<Point>,\n) => {\n  const { center, halfWidth, halfHeight } = ellipse;\n  const normalizedX = (p[0] - center[0]) / halfWidth;\n  const normalizedY = (p[1] - center[1]) / halfHeight;\n\n  return normalizedX * normalizedX + normalizedY * normalizedY <= 1;\n};\n\n/**\n * Tests whether a point lies on the outline of the ellipse within a given\n * tolerance\n *\n * @param point The point to test\n * @param ellipse The ellipse to compare against\n * @param threshold The distance to consider a point close enough to be \"on\" the outline\n * @returns TRUE if the point is on the ellise outline\n */\nexport const ellipseTouchesPoint = <Point extends GlobalPoint | LocalPoint>(\n  point: Point,\n  ellipse: Ellipse<Point>,\n  threshold = PRECISION,\n) => {\n  return ellipseDistanceFromPoint(point, ellipse) <= threshold;\n};\n\n/**\n * Determine the shortest euclidean distance from a point to the\n * outline of the ellipse\n *\n * @param p The point to consider\n * @param ellipse The ellipse to calculate the distance to\n * @returns The eucledian distance\n */\nexport const ellipseDistanceFromPoint = <\n  Point extends GlobalPoint | LocalPoint,\n>(\n  p: Point,\n  ellipse: Ellipse<Point>,\n): number => {\n  const { halfWidth, halfHeight, center } = ellipse;\n  const a = halfWidth;\n  const b = halfHeight;\n  const translatedPoint = vectorAdd(\n    vectorFromPoint(p),\n    vectorScale(vectorFromPoint(center), -1),\n  );\n\n  const px = Math.abs(translatedPoint[0]);\n  const py = Math.abs(translatedPoint[1]);\n\n  let tx = 0.707;\n  let ty = 0.707;\n\n  for (let i = 0; i < 3; i++) {\n    const x = a * tx;\n    const y = b * ty;\n\n    const ex = ((a * a - b * b) * tx ** 3) / a;\n    const ey = ((b * b - a * a) * ty ** 3) / b;\n\n    const rx = x - ex;\n    const ry = y - ey;\n\n    const qx = px - ex;\n    const qy = py - ey;\n\n    const r = Math.hypot(ry, rx);\n    const q = Math.hypot(qy, qx);\n\n    tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n    ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n    const t = Math.hypot(ty, tx);\n    tx /= t;\n    ty /= t;\n  }\n\n  const [minX, minY] = [\n    a * tx * Math.sign(translatedPoint[0]),\n    b * ty * Math.sign(translatedPoint[1]),\n  ];\n\n  return pointDistance(pointFromVector(translatedPoint), pointFrom(minX, minY));\n};\n\n/**\n * Calculate a maximum of two intercept points for a line going throug an\n * ellipse.\n */\nexport function ellipseSegmentInterceptPoints<\n  Point extends GlobalPoint | LocalPoint,\n>(e: Readonly<Ellipse<Point>>, s: Readonly<LineSegment<Point>>): Point[] {\n  const rx = e.halfWidth;\n  const ry = e.halfHeight;\n\n  const dir = vectorFromPoint(s[1], s[0]);\n  const diff = vector(s[0][0] - e.center[0], s[0][1] - e.center[1]);\n  const mDir = vector(dir[0] / (rx * rx), dir[1] / (ry * ry));\n  const mDiff = vector(diff[0] / (rx * rx), diff[1] / (ry * ry));\n\n  const a = vectorDot(dir, mDir);\n  const b = vectorDot(dir, mDiff);\n  const c = vectorDot(diff, mDiff) - 1.0;\n  const d = b * b - a * c;\n\n  const intersections: Point[] = [];\n\n  if (d > 0) {\n    const t_a = (-b - Math.sqrt(d)) / a;\n    const t_b = (-b + Math.sqrt(d)) / a;\n\n    if (0 <= t_a && t_a <= 1) {\n      intersections.push(\n        pointFrom(\n          s[0][0] + (s[1][0] - s[0][0]) * t_a,\n          s[0][1] + (s[1][1] - s[0][1]) * t_a,\n        ),\n      );\n    }\n\n    if (0 <= t_b && t_b <= 1) {\n      intersections.push(\n        pointFrom(\n          s[0][0] + (s[1][0] - s[0][0]) * t_b,\n          s[0][1] + (s[1][1] - s[0][1]) * t_b,\n        ),\n      );\n    }\n  } else if (d === 0) {\n    const t = -b / a;\n    if (0 <= t && t <= 1) {\n      intersections.push(\n        pointFrom(\n          s[0][0] + (s[1][0] - s[0][0]) * t,\n          s[0][1] + (s[1][1] - s[0][1]) * t,\n        ),\n      );\n    }\n  }\n\n  return intersections;\n}\n\nexport function ellipseLineIntersectionPoints<\n  Point extends GlobalPoint | LocalPoint,\n>(\n  { center, halfWidth, halfHeight }: Ellipse<Point>,\n  [g, h]: Line<Point>,\n): Point[] {\n  const [cx, cy] = center;\n  const x1 = g[0] - cx;\n  const y1 = g[1] - cy;\n  const x2 = h[0] - cx;\n  const y2 = h[1] - cy;\n  const a =\n    Math.pow(x2 - x1, 2) / Math.pow(halfWidth, 2) +\n    Math.pow(y2 - y1, 2) / Math.pow(halfHeight, 2);\n  const b =\n    2 *\n    ((x1 * (x2 - x1)) / Math.pow(halfWidth, 2) +\n      (y1 * (y2 - y1)) / Math.pow(halfHeight, 2));\n  const c =\n    Math.pow(x1, 2) / Math.pow(halfWidth, 2) +\n    Math.pow(y1, 2) / Math.pow(halfHeight, 2) -\n    1;\n  const t1 = (-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);\n  const t2 = (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);\n  const candidates = [\n    pointFrom<Point>(x1 + t1 * (x2 - x1) + cx, y1 + t1 * (y2 - y1) + cy),\n    pointFrom<Point>(x1 + t2 * (x2 - x1) + cx, y1 + t2 * (y2 - y1) + cy),\n  ].filter((p) => !isNaN(p[0]) && !isNaN(p[1]));\n\n  if (candidates.length === 2 && pointsEqual(candidates[0], candidates[1])) {\n    return [candidates[0]];\n  }\n\n  return candidates;\n}\n", "import {\n  lineSegment,\n  pointFrom,\n  polygonIncludesPoint,\n  pointOnLineSegment,\n  pointOnPolygon,\n  polygonFromPoints,\n  type GlobalPoint,\n  type LocalPoint,\n  type Polygon,\n} from \"@excalidraw/math\";\n\nimport type { Curve } from \"@excalidraw/math\";\n\nimport { pointInEllipse, pointOnEllipse } from \"./shape\";\n\nimport type { Polycurve, Polyline, GeometricShape } from \"./shape\";\n\n// check if the given point is considered on the given shape's border\nexport const isPointOnShape = <Point extends GlobalPoint | LocalPoint>(\n  point: Point,\n  shape: GeometricShape<Point>,\n  tolerance = 0,\n) => {\n  // get the distance from the given point to the given element\n  // check if the distance is within the given epsilon range\n  switch (shape.type) {\n    case \"polygon\":\n      return pointOnPolygon(point, shape.data, tolerance);\n    case \"ellipse\":\n      return pointOnEllipse(point, shape.data, tolerance);\n    case \"line\":\n      return pointOnLineSegment(point, shape.data, tolerance);\n    case \"polyline\":\n      return pointOnPolyline(point, shape.data, tolerance);\n    case \"curve\":\n      return pointOnCurve(point, shape.data, tolerance);\n    case \"polycurve\":\n      return pointOnPolycurve(point, shape.data, tolerance);\n    default:\n      throw Error(`shape ${shape} is not implemented`);\n  }\n};\n\n// check if the given point is considered inside the element's border\nexport const isPointInShape = <Point extends GlobalPoint | LocalPoint>(\n  point: Point,\n  shape: GeometricShape<Point>,\n) => {\n  switch (shape.type) {\n    case \"polygon\":\n      return polygonIncludesPoint(point, shape.data);\n    case \"line\":\n      return false;\n    case \"curve\":\n      return false;\n    case \"ellipse\":\n      return pointInEllipse(point, shape.data);\n    case \"polyline\": {\n      const polygon = polygonFromPoints(shape.data.flat());\n      return polygonIncludesPoint(point, polygon);\n    }\n    case \"polycurve\": {\n      return false;\n    }\n    default:\n      throw Error(`shape ${shape} is not implemented`);\n  }\n};\n\n// check if the given element is in the given bounds\nexport const isPointInBounds = <Point extends GlobalPoint | LocalPoint>(\n  point: Point,\n  bounds: Polygon<Point>,\n) => {\n  return polygonIncludesPoint(point, bounds);\n};\n\nconst pointOnPolycurve = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  polycurve: Polycurve<Point>,\n  tolerance: number,\n) => {\n  return polycurve.some((curve) => pointOnCurve(point, curve, tolerance));\n};\n\nconst cubicBezierEquation = <Point extends LocalPoint | GlobalPoint>(\n  curve: Curve<Point>,\n) => {\n  const [p0, p1, p2, p3] = curve;\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\n  return (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n};\n\nconst polyLineFromCurve = <Point extends LocalPoint | GlobalPoint>(\n  curve: Curve<Point>,\n  segments = 10,\n): Polyline<Point> => {\n  const equation = cubicBezierEquation(curve);\n  let startingPoint = [equation(0, 0), equation(0, 1)] as Point;\n  const lineSegments: Polyline<Point> = [];\n  let t = 0;\n  const increment = 1 / segments;\n\n  for (let i = 0; i < segments; i++) {\n    t += increment;\n    if (t <= 1) {\n      const nextPoint: Point = pointFrom(equation(t, 0), equation(t, 1));\n      lineSegments.push(lineSegment(startingPoint, nextPoint));\n      startingPoint = nextPoint;\n    }\n  }\n\n  return lineSegments;\n};\n\nexport const pointOnCurve = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  curve: Curve<Point>,\n  threshold: number,\n) => {\n  return pointOnPolyline(point, polyLineFromCurve(curve), threshold);\n};\n\nexport const pointOnPolyline = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  polyline: Polyline<Point>,\n  threshold = 10e-5,\n) => {\n  return polyline.some((line) => pointOnLineSegment(point, line, threshold));\n};\n", "import {\n  curve,\n  lineSegment,\n  pointFrom,\n  pointFromVector,\n  rectangle,\n  vectorFromPoint,\n  vectorNormalize,\n  vectorScale,\n  type GlobalPoint,\n} from \"@excalidraw/math\";\n\nimport type { Curve, LineSegment } from \"@excalidraw/math\";\n\nimport { getCornerRadius } from \"./shapes\";\n\nimport { getDiamondPoints } from \"./bounds\";\n\nimport type {\n  ExcalidrawDiamondElement,\n  ExcalidrawRectanguloidElement,\n} from \"./types\";\n\n/**\n * Get the building components of a rectanguloid element in the form of\n * line segments and curves.\n *\n * @param element Target rectanguloid element\n * @param offset Optional offset to expand the rectanguloid shape\n * @returns Tuple of line segments (0) and curves (1)\n */\nexport function deconstructRectanguloidElement(\n  element: ExcalidrawRectanguloidElement,\n  offset: number = 0,\n): [LineSegment<GlobalPoint>[], Curve<GlobalPoint>[]] {\n  const roundness = getCornerRadius(\n    Math.min(element.width, element.height),\n    element,\n  );\n\n  if (roundness <= 0) {\n    const r = rectangle(\n      pointFrom(element.x - offset, element.y - offset),\n      pointFrom(\n        element.x + element.width + offset,\n        element.y + element.height + offset,\n      ),\n    );\n\n    const top = lineSegment<GlobalPoint>(\n      pointFrom<GlobalPoint>(r[0][0] + roundness, r[0][1]),\n      pointFrom<GlobalPoint>(r[1][0] - roundness, r[0][1]),\n    );\n    const right = lineSegment<GlobalPoint>(\n      pointFrom<GlobalPoint>(r[1][0], r[0][1] + roundness),\n      pointFrom<GlobalPoint>(r[1][0], r[1][1] - roundness),\n    );\n    const bottom = lineSegment<GlobalPoint>(\n      pointFrom<GlobalPoint>(r[0][0] + roundness, r[1][1]),\n      pointFrom<GlobalPoint>(r[1][0] - roundness, r[1][1]),\n    );\n    const left = lineSegment<GlobalPoint>(\n      pointFrom<GlobalPoint>(r[0][0], r[1][1] - roundness),\n      pointFrom<GlobalPoint>(r[0][0], r[0][1] + roundness),\n    );\n    const sides = [top, right, bottom, left];\n\n    return [sides, []];\n  }\n\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  const r = rectangle(\n    pointFrom(element.x, element.y),\n    pointFrom(element.x + element.width, element.y + element.height),\n  );\n\n  const top = lineSegment<GlobalPoint>(\n    pointFrom<GlobalPoint>(r[0][0] + roundness, r[0][1]),\n    pointFrom<GlobalPoint>(r[1][0] - roundness, r[0][1]),\n  );\n  const right = lineSegment<GlobalPoint>(\n    pointFrom<GlobalPoint>(r[1][0], r[0][1] + roundness),\n    pointFrom<GlobalPoint>(r[1][0], r[1][1] - roundness),\n  );\n  const bottom = lineSegment<GlobalPoint>(\n    pointFrom<GlobalPoint>(r[0][0] + roundness, r[1][1]),\n    pointFrom<GlobalPoint>(r[1][0] - roundness, r[1][1]),\n  );\n  const left = lineSegment<GlobalPoint>(\n    pointFrom<GlobalPoint>(r[0][0], r[1][1] - roundness),\n    pointFrom<GlobalPoint>(r[0][0], r[0][1] + roundness),\n  );\n\n  const offsets = [\n    vectorScale(\n      vectorNormalize(\n        vectorFromPoint(pointFrom(r[0][0] - offset, r[0][1] - offset), center),\n      ),\n      offset,\n    ), // TOP LEFT\n    vectorScale(\n      vectorNormalize(\n        vectorFromPoint(pointFrom(r[1][0] + offset, r[0][1] - offset), center),\n      ),\n      offset,\n    ), //TOP RIGHT\n    vectorScale(\n      vectorNormalize(\n        vectorFromPoint(pointFrom(r[1][0] + offset, r[1][1] + offset), center),\n      ),\n      offset,\n    ), // BOTTOM RIGHT\n    vectorScale(\n      vectorNormalize(\n        vectorFromPoint(pointFrom(r[0][0] - offset, r[1][1] + offset), center),\n      ),\n      offset,\n    ), // BOTTOM LEFT\n  ];\n\n  const corners = [\n    curve(\n      pointFromVector(offsets[0], left[1]),\n      pointFromVector(\n        offsets[0],\n        pointFrom<GlobalPoint>(\n          left[1][0] + (2 / 3) * (r[0][0] - left[1][0]),\n          left[1][1] + (2 / 3) * (r[0][1] - left[1][1]),\n        ),\n      ),\n      pointFromVector(\n        offsets[0],\n        pointFrom<GlobalPoint>(\n          top[0][0] + (2 / 3) * (r[0][0] - top[0][0]),\n          top[0][1] + (2 / 3) * (r[0][1] - top[0][1]),\n        ),\n      ),\n      pointFromVector(offsets[0], top[0]),\n    ), // TOP LEFT\n    curve(\n      pointFromVector(offsets[1], top[1]),\n      pointFromVector(\n        offsets[1],\n        pointFrom<GlobalPoint>(\n          top[1][0] + (2 / 3) * (r[1][0] - top[1][0]),\n          top[1][1] + (2 / 3) * (r[0][1] - top[1][1]),\n        ),\n      ),\n      pointFromVector(\n        offsets[1],\n        pointFrom<GlobalPoint>(\n          right[0][0] + (2 / 3) * (r[1][0] - right[0][0]),\n          right[0][1] + (2 / 3) * (r[0][1] - right[0][1]),\n        ),\n      ),\n      pointFromVector(offsets[1], right[0]),\n    ), // TOP RIGHT\n    curve(\n      pointFromVector(offsets[2], right[1]),\n      pointFromVector(\n        offsets[2],\n        pointFrom<GlobalPoint>(\n          right[1][0] + (2 / 3) * (r[1][0] - right[1][0]),\n          right[1][1] + (2 / 3) * (r[1][1] - right[1][1]),\n        ),\n      ),\n      pointFromVector(\n        offsets[2],\n        pointFrom<GlobalPoint>(\n          bottom[1][0] + (2 / 3) * (r[1][0] - bottom[1][0]),\n          bottom[1][1] + (2 / 3) * (r[1][1] - bottom[1][1]),\n        ),\n      ),\n      pointFromVector(offsets[2], bottom[1]),\n    ), // BOTTOM RIGHT\n    curve(\n      pointFromVector(offsets[3], bottom[0]),\n      pointFromVector(\n        offsets[3],\n        pointFrom<GlobalPoint>(\n          bottom[0][0] + (2 / 3) * (r[0][0] - bottom[0][0]),\n          bottom[0][1] + (2 / 3) * (r[1][1] - bottom[0][1]),\n        ),\n      ),\n      pointFromVector(\n        offsets[3],\n        pointFrom<GlobalPoint>(\n          left[0][0] + (2 / 3) * (r[0][0] - left[0][0]),\n          left[0][1] + (2 / 3) * (r[1][1] - left[0][1]),\n        ),\n      ),\n      pointFromVector(offsets[3], left[0]),\n    ), // BOTTOM LEFT\n  ];\n\n  const sides = [\n    lineSegment<GlobalPoint>(corners[0][3], corners[1][0]),\n    lineSegment<GlobalPoint>(corners[1][3], corners[2][0]),\n    lineSegment<GlobalPoint>(corners[2][3], corners[3][0]),\n    lineSegment<GlobalPoint>(corners[3][3], corners[0][0]),\n  ];\n\n  return [sides, corners];\n}\n\n/**\n * Get the building components of a diamond element in the form of\n * line segments and curves as a tuple, in this order.\n *\n * @param element The element to deconstruct\n * @param offset An optional offset\n * @returns Tuple of line segments (0) and curves (1)\n */\nexport function deconstructDiamondElement(\n  element: ExcalidrawDiamondElement,\n  offset: number = 0,\n): [LineSegment<GlobalPoint>[], Curve<GlobalPoint>[]] {\n  const [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY] =\n    getDiamondPoints(element);\n  const verticalRadius = getCornerRadius(Math.abs(topX - leftX), element);\n  const horizontalRadius = getCornerRadius(Math.abs(rightY - topY), element);\n\n  if (element.roundness?.type == null) {\n    const [top, right, bottom, left]: GlobalPoint[] = [\n      pointFrom(element.x + topX, element.y + topY - offset),\n      pointFrom(element.x + rightX + offset, element.y + rightY),\n      pointFrom(element.x + bottomX, element.y + bottomY + offset),\n      pointFrom(element.x + leftX - offset, element.y + leftY),\n    ];\n\n    // Create the line segment parts of the diamond\n    // NOTE: Horizontal and vertical seems to be flipped here\n    const topRight = lineSegment<GlobalPoint>(\n      pointFrom(top[0] + verticalRadius, top[1] + horizontalRadius),\n      pointFrom(right[0] - verticalRadius, right[1] - horizontalRadius),\n    );\n    const bottomRight = lineSegment<GlobalPoint>(\n      pointFrom(right[0] - verticalRadius, right[1] + horizontalRadius),\n      pointFrom(bottom[0] + verticalRadius, bottom[1] - horizontalRadius),\n    );\n    const bottomLeft = lineSegment<GlobalPoint>(\n      pointFrom(bottom[0] - verticalRadius, bottom[1] - horizontalRadius),\n      pointFrom(left[0] + verticalRadius, left[1] + horizontalRadius),\n    );\n    const topLeft = lineSegment<GlobalPoint>(\n      pointFrom(left[0] + verticalRadius, left[1] - horizontalRadius),\n      pointFrom(top[0] - verticalRadius, top[1] + horizontalRadius),\n    );\n\n    return [[topRight, bottomRight, bottomLeft, topLeft], []];\n  }\n\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  const [top, right, bottom, left]: GlobalPoint[] = [\n    pointFrom(element.x + topX, element.y + topY),\n    pointFrom(element.x + rightX, element.y + rightY),\n    pointFrom(element.x + bottomX, element.y + bottomY),\n    pointFrom(element.x + leftX, element.y + leftY),\n  ];\n\n  const offsets = [\n    vectorScale(vectorNormalize(vectorFromPoint(right, center)), offset), // RIGHT\n    vectorScale(vectorNormalize(vectorFromPoint(bottom, center)), offset), // BOTTOM\n    vectorScale(vectorNormalize(vectorFromPoint(left, center)), offset), // LEFT\n    vectorScale(vectorNormalize(vectorFromPoint(top, center)), offset), // TOP\n  ];\n\n  const corners = [\n    curve(\n      pointFromVector(\n        offsets[0],\n        pointFrom<GlobalPoint>(\n          right[0] - verticalRadius,\n          right[1] - horizontalRadius,\n        ),\n      ),\n      pointFromVector(offsets[0], right),\n      pointFromVector(offsets[0], right),\n      pointFromVector(\n        offsets[0],\n        pointFrom<GlobalPoint>(\n          right[0] - verticalRadius,\n          right[1] + horizontalRadius,\n        ),\n      ),\n    ), // RIGHT\n    curve(\n      pointFromVector(\n        offsets[1],\n        pointFrom<GlobalPoint>(\n          bottom[0] + verticalRadius,\n          bottom[1] - horizontalRadius,\n        ),\n      ),\n      pointFromVector(offsets[1], bottom),\n      pointFromVector(offsets[1], bottom),\n      pointFromVector(\n        offsets[1],\n        pointFrom<GlobalPoint>(\n          bottom[0] - verticalRadius,\n          bottom[1] - horizontalRadius,\n        ),\n      ),\n    ), // BOTTOM\n    curve(\n      pointFromVector(\n        offsets[2],\n        pointFrom<GlobalPoint>(\n          left[0] + verticalRadius,\n          left[1] + horizontalRadius,\n        ),\n      ),\n      pointFromVector(offsets[2], left),\n      pointFromVector(offsets[2], left),\n      pointFromVector(\n        offsets[2],\n        pointFrom<GlobalPoint>(\n          left[0] + verticalRadius,\n          left[1] - horizontalRadius,\n        ),\n      ),\n    ), // LEFT\n    curve(\n      pointFromVector(\n        offsets[3],\n        pointFrom<GlobalPoint>(\n          top[0] - verticalRadius,\n          top[1] + horizontalRadius,\n        ),\n      ),\n      pointFromVector(offsets[3], top),\n      pointFromVector(offsets[3], top),\n      pointFromVector(\n        offsets[3],\n        pointFrom<GlobalPoint>(\n          top[0] + verticalRadius,\n          top[1] + horizontalRadius,\n        ),\n      ),\n    ), // TOP\n  ];\n\n  const sides = [\n    lineSegment<GlobalPoint>(corners[0][3], corners[1][0]),\n    lineSegment<GlobalPoint>(corners[1][3], corners[2][0]),\n    lineSegment<GlobalPoint>(corners[2][3], corners[3][0]),\n    lineSegment<GlobalPoint>(corners[3][3], corners[0][0]),\n  ];\n\n  return [sides, corners];\n}\n", "import {\n  pointCenter,\n  pointFrom,\n  pointRotateRads,\n  pointsEqual,\n  type GlobalPoint,\n  type LocalPoint,\n  pointDistance,\n  vectorFromPoint,\n} from \"@excalidraw/math\";\n\nimport { getCurvePathOps } from \"@excalidraw/utils/shape\";\n\nimport {\n  DRAGGING_THRESHOLD,\n  KEYS,\n  shouldRotateWithDiscreteAngle,\n  getGridPoint,\n  invariant,\n  tupleToCoors,\n} from \"@excalidraw/common\";\n\n// TODO: remove direct dependency on the scene, should be passed in or injected instead\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport Scene from \"@excalidraw/excalidraw/scene/Scene\";\n\nimport type { Store } from \"@excalidraw/excalidraw/store\";\n\nimport type { Radians } from \"@excalidraw/math\";\n\nimport type {\n  AppState,\n  PointerCoords,\n  InteractiveCanvasAppState,\n  AppClassProperties,\n  NullableGridSize,\n  Zoom,\n} from \"@excalidraw/excalidraw/types\";\n\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport {\n  bindOrUnbindLinearElement,\n  getHoveredElementForBinding,\n  isBindingEnabled,\n} from \"./binding\";\nimport {\n  getElementAbsoluteCoords,\n  getElementPointsCoords,\n  getMinMaxXYFromCurvePathOps,\n} from \"./bounds\";\n\nimport { updateElbowArrowPoints } from \"./elbowArrow\";\n\nimport { headingIsHorizontal, vectorToHeading } from \"./heading\";\nimport { bumpVersion, mutateElement } from \"./mutateElement\";\nimport { getBoundTextElement, handleBindTextResize } from \"./textElement\";\nimport {\n  isBindingElement,\n  isElbowArrow,\n  isFixedPointBinding,\n} from \"./typeChecks\";\n\nimport { ShapeCache } from \"./ShapeCache\";\n\nimport {\n  isPathALoop,\n  getBezierCurveLength,\n  getControlPointsForBezierCurve,\n  mapIntervalToBezierT,\n  getBezierXY,\n} from \"./shapes\";\n\nimport { getLockedLinearCursorAlignSize } from \"./sizeHelpers\";\n\nimport type { Bounds } from \"./bounds\";\nimport type {\n  NonDeleted,\n  ExcalidrawLinearElement,\n  ExcalidrawElement,\n  PointBinding,\n  ExcalidrawBindableElement,\n  ExcalidrawTextElementWithContainer,\n  ElementsMap,\n  NonDeletedSceneElementsMap,\n  FixedPointBinding,\n  SceneElementsMap,\n  FixedSegment,\n  ExcalidrawElbowArrowElement,\n} from \"./types\";\n\nconst editorMidPointsCache: {\n  version: number | null;\n  points: (GlobalPoint | null)[];\n  zoom: number | null;\n} = { version: null, points: [], zoom: null };\nexport class LinearElementEditor {\n  public readonly elementId: ExcalidrawElement[\"id\"] & {\n    _brand: \"excalidrawLinearElementId\";\n  };\n  /** indices */\n  public readonly selectedPointsIndices: readonly number[] | null;\n\n  public readonly pointerDownState: Readonly<{\n    prevSelectedPointsIndices: readonly number[] | null;\n    /** index */\n    lastClickedPoint: number;\n    lastClickedIsEndPoint: boolean;\n    origin: Readonly<{ x: number; y: number }> | null;\n    segmentMidpoint: {\n      value: GlobalPoint | null;\n      index: number | null;\n      added: boolean;\n    };\n  }>;\n\n  /** whether you're dragging a point */\n  public readonly isDragging: boolean;\n  public readonly lastUncommittedPoint: LocalPoint | null;\n  public readonly pointerOffset: Readonly<{ x: number; y: number }>;\n  public readonly startBindingElement:\n    | ExcalidrawBindableElement\n    | null\n    | \"keep\";\n  public readonly endBindingElement: ExcalidrawBindableElement | null | \"keep\";\n  public readonly hoverPointIndex: number;\n  public readonly segmentMidPointHoveredCoords: GlobalPoint | null;\n  public readonly elbowed: boolean;\n\n  constructor(element: NonDeleted<ExcalidrawLinearElement>) {\n    this.elementId = element.id as string & {\n      _brand: \"excalidrawLinearElementId\";\n    };\n    if (!pointsEqual(element.points[0], pointFrom(0, 0))) {\n      console.error(\"Linear element is not normalized\", Error().stack);\n    }\n\n    this.selectedPointsIndices = null;\n    this.lastUncommittedPoint = null;\n    this.isDragging = false;\n    this.pointerOffset = { x: 0, y: 0 };\n    this.startBindingElement = \"keep\";\n    this.endBindingElement = \"keep\";\n    this.pointerDownState = {\n      prevSelectedPointsIndices: null,\n      lastClickedPoint: -1,\n      lastClickedIsEndPoint: false,\n      origin: null,\n\n      segmentMidpoint: {\n        value: null,\n        index: null,\n        added: false,\n      },\n    };\n    this.hoverPointIndex = -1;\n    this.segmentMidPointHoveredCoords = null;\n    this.elbowed = isElbowArrow(element) && element.elbowed;\n  }\n\n  // ---------------------------------------------------------------------------\n  // static methods\n  // ---------------------------------------------------------------------------\n\n  static POINT_HANDLE_SIZE = 10;\n  /**\n   * @param id the `elementId` from the instance of this class (so that we can\n   *  statically guarantee this method returns an ExcalidrawLinearElement)\n   */\n  static getElement<T extends ExcalidrawLinearElement>(\n    id: InstanceType<typeof LinearElementEditor>[\"elementId\"],\n    elementsMap: ElementsMap,\n  ): T | null {\n    const element = elementsMap.get(id);\n    if (element) {\n      return element as NonDeleted<T>;\n    }\n    return null;\n  }\n\n  static handleBoxSelection(\n    event: PointerEvent,\n    appState: AppState,\n    setState: React.Component<any, AppState>[\"setState\"],\n    elementsMap: NonDeletedSceneElementsMap,\n  ) {\n    if (!appState.editingLinearElement || !appState.selectionElement) {\n      return false;\n    }\n    const { editingLinearElement } = appState;\n    const { selectedPointsIndices, elementId } = editingLinearElement;\n\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n    if (!element) {\n      return false;\n    }\n\n    const [selectionX1, selectionY1, selectionX2, selectionY2] =\n      getElementAbsoluteCoords(appState.selectionElement, elementsMap);\n\n    const pointsSceneCoords = LinearElementEditor.getPointsGlobalCoordinates(\n      element,\n      elementsMap,\n    );\n\n    const nextSelectedPoints = pointsSceneCoords\n      .reduce((acc: number[], point, index) => {\n        if (\n          (point[0] >= selectionX1 &&\n            point[0] <= selectionX2 &&\n            point[1] >= selectionY1 &&\n            point[1] <= selectionY2) ||\n          (event.shiftKey && selectedPointsIndices?.includes(index))\n        ) {\n          acc.push(index);\n        }\n\n        return acc;\n      }, [])\n      .filter((index) => {\n        if (\n          isElbowArrow(element) &&\n          index !== 0 &&\n          index !== element.points.length - 1\n        ) {\n          return false;\n        }\n        return true;\n      });\n\n    setState({\n      editingLinearElement: {\n        ...editingLinearElement,\n        selectedPointsIndices: nextSelectedPoints.length\n          ? nextSelectedPoints\n          : null,\n      },\n    });\n  }\n\n  /**\n   * @returns whether point was dragged\n   */\n  static handlePointDragging(\n    event: PointerEvent,\n    app: AppClassProperties,\n    scenePointerX: number,\n    scenePointerY: number,\n    maybeSuggestBinding: (\n      element: NonDeleted<ExcalidrawLinearElement>,\n      pointSceneCoords: { x: number; y: number }[],\n    ) => void,\n    linearElementEditor: LinearElementEditor,\n    scene: Scene,\n  ): LinearElementEditor | null {\n    if (!linearElementEditor) {\n      return null;\n    }\n    const { elementId } = linearElementEditor;\n    const elementsMap = scene.getNonDeletedElementsMap();\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n    if (!element) {\n      return null;\n    }\n\n    if (\n      isElbowArrow(element) &&\n      !linearElementEditor.pointerDownState.lastClickedIsEndPoint &&\n      linearElementEditor.pointerDownState.lastClickedPoint !== 0\n    ) {\n      return null;\n    }\n\n    const selectedPointsIndices = isElbowArrow(element)\n      ? [\n          !!linearElementEditor.selectedPointsIndices?.includes(0)\n            ? 0\n            : undefined,\n          !!linearElementEditor.selectedPointsIndices?.find((idx) => idx > 0)\n            ? element.points.length - 1\n            : undefined,\n        ].filter((idx): idx is number => idx !== undefined)\n      : linearElementEditor.selectedPointsIndices;\n    const lastClickedPoint = isElbowArrow(element)\n      ? linearElementEditor.pointerDownState.lastClickedPoint > 0\n        ? element.points.length - 1\n        : 0\n      : linearElementEditor.pointerDownState.lastClickedPoint;\n\n    // point that's being dragged (out of all selected points)\n    const draggingPoint = element.points[lastClickedPoint];\n\n    if (selectedPointsIndices && draggingPoint) {\n      if (\n        shouldRotateWithDiscreteAngle(event) &&\n        selectedPointsIndices.length === 1 &&\n        element.points.length > 1\n      ) {\n        const selectedIndex = selectedPointsIndices[0];\n        const referencePoint =\n          element.points[selectedIndex === 0 ? 1 : selectedIndex - 1];\n\n        const [width, height] = LinearElementEditor._getShiftLockedDelta(\n          element,\n          elementsMap,\n          referencePoint,\n          pointFrom(scenePointerX, scenePointerY),\n          event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize(),\n        );\n\n        LinearElementEditor.movePoints(element, [\n          {\n            index: selectedIndex,\n            point: pointFrom(\n              width + referencePoint[0],\n              height + referencePoint[1],\n            ),\n            isDragging: selectedIndex === lastClickedPoint,\n          },\n        ]);\n      } else {\n        const newDraggingPointPosition = LinearElementEditor.createPointAt(\n          element,\n          elementsMap,\n          scenePointerX - linearElementEditor.pointerOffset.x,\n          scenePointerY - linearElementEditor.pointerOffset.y,\n          event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize(),\n        );\n\n        const deltaX = newDraggingPointPosition[0] - draggingPoint[0];\n        const deltaY = newDraggingPointPosition[1] - draggingPoint[1];\n\n        LinearElementEditor.movePoints(\n          element,\n          selectedPointsIndices.map((pointIndex) => {\n            const newPointPosition: LocalPoint =\n              pointIndex === lastClickedPoint\n                ? LinearElementEditor.createPointAt(\n                    element,\n                    elementsMap,\n                    scenePointerX - linearElementEditor.pointerOffset.x,\n                    scenePointerY - linearElementEditor.pointerOffset.y,\n                    event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize(),\n                  )\n                : pointFrom(\n                    element.points[pointIndex][0] + deltaX,\n                    element.points[pointIndex][1] + deltaY,\n                  );\n            return {\n              index: pointIndex,\n              point: newPointPosition,\n              isDragging: pointIndex === lastClickedPoint,\n            };\n          }),\n        );\n      }\n\n      const boundTextElement = getBoundTextElement(element, elementsMap);\n      if (boundTextElement) {\n        handleBindTextResize(element, elementsMap, false);\n      }\n\n      // suggest bindings for first and last point if selected\n      if (isBindingElement(element, false)) {\n        const coords: { x: number; y: number }[] = [];\n\n        const firstSelectedIndex = selectedPointsIndices[0];\n        if (firstSelectedIndex === 0) {\n          coords.push(\n            tupleToCoors(\n              LinearElementEditor.getPointGlobalCoordinates(\n                element,\n                element.points[0],\n                elementsMap,\n              ),\n            ),\n          );\n        }\n\n        const lastSelectedIndex =\n          selectedPointsIndices[selectedPointsIndices.length - 1];\n        if (lastSelectedIndex === element.points.length - 1) {\n          coords.push(\n            tupleToCoors(\n              LinearElementEditor.getPointGlobalCoordinates(\n                element,\n                element.points[lastSelectedIndex],\n                elementsMap,\n              ),\n            ),\n          );\n        }\n\n        if (coords.length) {\n          maybeSuggestBinding(element, coords);\n        }\n      }\n\n      return {\n        ...linearElementEditor,\n        selectedPointsIndices,\n        segmentMidPointHoveredCoords:\n          lastClickedPoint !== 0 &&\n          lastClickedPoint !== element.points.length - 1\n            ? this.getPointGlobalCoordinates(\n                element,\n                draggingPoint,\n                elementsMap,\n              )\n            : null,\n        hoverPointIndex:\n          lastClickedPoint === 0 ||\n          lastClickedPoint === element.points.length - 1\n            ? lastClickedPoint\n            : -1,\n        isDragging: true,\n      };\n    }\n\n    return null;\n  }\n\n  static handlePointerUp(\n    event: PointerEvent,\n    editingLinearElement: LinearElementEditor,\n    appState: AppState,\n    scene: Scene,\n  ): LinearElementEditor {\n    const elementsMap = scene.getNonDeletedElementsMap();\n    const elements = scene.getNonDeletedElements();\n\n    const { elementId, selectedPointsIndices, isDragging, pointerDownState } =\n      editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n    if (!element) {\n      return editingLinearElement;\n    }\n\n    const bindings: Mutable<\n      Partial<\n        Pick<\n          InstanceType<typeof LinearElementEditor>,\n          \"startBindingElement\" | \"endBindingElement\"\n        >\n      >\n    > = {};\n\n    if (isDragging && selectedPointsIndices) {\n      for (const selectedPoint of selectedPointsIndices) {\n        if (\n          selectedPoint === 0 ||\n          selectedPoint === element.points.length - 1\n        ) {\n          if (isPathALoop(element.points, appState.zoom.value)) {\n            LinearElementEditor.movePoints(element, [\n              {\n                index: selectedPoint,\n                point:\n                  selectedPoint === 0\n                    ? element.points[element.points.length - 1]\n                    : element.points[0],\n              },\n            ]);\n          }\n\n          const bindingElement = isBindingEnabled(appState)\n            ? getHoveredElementForBinding(\n                tupleToCoors(\n                  LinearElementEditor.getPointAtIndexGlobalCoordinates(\n                    element,\n                    selectedPoint!,\n                    elementsMap,\n                  ),\n                ),\n                elements,\n                elementsMap,\n                appState.zoom,\n                isElbowArrow(element),\n                isElbowArrow(element),\n              )\n            : null;\n\n          bindings[\n            selectedPoint === 0 ? \"startBindingElement\" : \"endBindingElement\"\n          ] = bindingElement;\n        }\n      }\n    }\n\n    return {\n      ...editingLinearElement,\n      ...bindings,\n      // if clicking without previously dragging a point(s), and not holding\n      // shift, deselect all points except the one clicked. If holding shift,\n      // toggle the point.\n      selectedPointsIndices:\n        isDragging || event.shiftKey\n          ? !isDragging &&\n            event.shiftKey &&\n            pointerDownState.prevSelectedPointsIndices?.includes(\n              pointerDownState.lastClickedPoint,\n            )\n            ? selectedPointsIndices &&\n              selectedPointsIndices.filter(\n                (pointIndex) =>\n                  pointIndex !== pointerDownState.lastClickedPoint,\n              )\n            : selectedPointsIndices\n          : selectedPointsIndices?.includes(pointerDownState.lastClickedPoint)\n          ? [pointerDownState.lastClickedPoint]\n          : selectedPointsIndices,\n      isDragging: false,\n      pointerOffset: { x: 0, y: 0 },\n    };\n  }\n\n  static getEditorMidPoints = (\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n    appState: InteractiveCanvasAppState,\n  ): typeof editorMidPointsCache[\"points\"] => {\n    const boundText = getBoundTextElement(element, elementsMap);\n\n    // Since its not needed outside editor unless 2 pointer lines or bound text\n    if (\n      !isElbowArrow(element) &&\n      !appState.editingLinearElement &&\n      element.points.length > 2 &&\n      !boundText\n    ) {\n      return [];\n    }\n    if (\n      editorMidPointsCache.version === element.version &&\n      editorMidPointsCache.zoom === appState.zoom.value\n    ) {\n      return editorMidPointsCache.points;\n    }\n    LinearElementEditor.updateEditorMidPointsCache(\n      element,\n      elementsMap,\n      appState,\n    );\n    return editorMidPointsCache.points!;\n  };\n\n  static updateEditorMidPointsCache = (\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n    appState: InteractiveCanvasAppState,\n  ) => {\n    const points = LinearElementEditor.getPointsGlobalCoordinates(\n      element,\n      elementsMap,\n    );\n\n    let index = 0;\n    const midpoints: (GlobalPoint | null)[] = [];\n    while (index < points.length - 1) {\n      if (\n        LinearElementEditor.isSegmentTooShort(\n          element,\n          element.points[index],\n          element.points[index + 1],\n          index,\n          appState.zoom,\n        )\n      ) {\n        midpoints.push(null);\n        index++;\n        continue;\n      }\n      const segmentMidPoint = LinearElementEditor.getSegmentMidPoint(\n        element,\n        points[index],\n        points[index + 1],\n        index + 1,\n        elementsMap,\n      );\n      midpoints.push(segmentMidPoint);\n      index++;\n    }\n    editorMidPointsCache.points = midpoints;\n    editorMidPointsCache.version = element.version;\n    editorMidPointsCache.zoom = appState.zoom.value;\n  };\n\n  static getSegmentMidpointHitCoords = (\n    linearElementEditor: LinearElementEditor,\n    scenePointer: { x: number; y: number },\n    appState: AppState,\n    elementsMap: ElementsMap,\n  ): GlobalPoint | null => {\n    const { elementId } = linearElementEditor;\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n    if (!element) {\n      return null;\n    }\n    const clickedPointIndex = LinearElementEditor.getPointIndexUnderCursor(\n      element,\n      elementsMap,\n      appState.zoom,\n      scenePointer.x,\n      scenePointer.y,\n    );\n    if (!isElbowArrow(element) && clickedPointIndex >= 0) {\n      return null;\n    }\n    const points = LinearElementEditor.getPointsGlobalCoordinates(\n      element,\n      elementsMap,\n    );\n    if (\n      points.length >= 3 &&\n      !appState.editingLinearElement &&\n      !isElbowArrow(element)\n    ) {\n      return null;\n    }\n\n    const threshold =\n      (LinearElementEditor.POINT_HANDLE_SIZE + 1) / appState.zoom.value;\n\n    const existingSegmentMidpointHitCoords =\n      linearElementEditor.segmentMidPointHoveredCoords;\n    if (existingSegmentMidpointHitCoords) {\n      const distance = pointDistance(\n        pointFrom(\n          existingSegmentMidpointHitCoords[0],\n          existingSegmentMidpointHitCoords[1],\n        ),\n        pointFrom(scenePointer.x, scenePointer.y),\n      );\n      if (distance <= threshold) {\n        return existingSegmentMidpointHitCoords;\n      }\n    }\n    let index = 0;\n    const midPoints: typeof editorMidPointsCache[\"points\"] =\n      LinearElementEditor.getEditorMidPoints(element, elementsMap, appState);\n\n    while (index < midPoints.length) {\n      if (midPoints[index] !== null) {\n        const distance = pointDistance(\n          midPoints[index]!,\n          pointFrom(scenePointer.x, scenePointer.y),\n        );\n        if (distance <= threshold) {\n          return midPoints[index];\n        }\n      }\n\n      index++;\n    }\n    return null;\n  };\n\n  static isSegmentTooShort<P extends GlobalPoint | LocalPoint>(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    startPoint: P,\n    endPoint: P,\n    index: number,\n    zoom: Zoom,\n  ) {\n    if (isElbowArrow(element)) {\n      if (index >= 0 && index < element.points.length) {\n        return (\n          pointDistance(startPoint, endPoint) * zoom.value <\n          LinearElementEditor.POINT_HANDLE_SIZE / 2\n        );\n      }\n\n      return false;\n    }\n\n    let distance = pointDistance(startPoint, endPoint);\n    if (element.points.length > 2 && element.roundness) {\n      distance = getBezierCurveLength(element, endPoint);\n    }\n\n    return distance * zoom.value < LinearElementEditor.POINT_HANDLE_SIZE * 4;\n  }\n\n  static getSegmentMidPoint(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    startPoint: GlobalPoint,\n    endPoint: GlobalPoint,\n    endPointIndex: number,\n    elementsMap: ElementsMap,\n  ): GlobalPoint {\n    let segmentMidPoint = pointCenter(startPoint, endPoint);\n    if (element.points.length > 2 && element.roundness) {\n      const controlPoints = getControlPointsForBezierCurve(\n        element,\n        element.points[endPointIndex],\n      );\n      if (controlPoints) {\n        const t = mapIntervalToBezierT(\n          element,\n          element.points[endPointIndex],\n          0.5,\n        );\n\n        segmentMidPoint = LinearElementEditor.getPointGlobalCoordinates(\n          element,\n          getBezierXY(\n            controlPoints[0],\n            controlPoints[1],\n            controlPoints[2],\n            controlPoints[3],\n            t,\n          ),\n          elementsMap,\n        );\n      }\n    }\n\n    return segmentMidPoint;\n  }\n\n  static getSegmentMidPointIndex(\n    linearElementEditor: LinearElementEditor,\n    appState: AppState,\n    midPoint: GlobalPoint,\n    elementsMap: ElementsMap,\n  ) {\n    const element = LinearElementEditor.getElement(\n      linearElementEditor.elementId,\n      elementsMap,\n    );\n    if (!element) {\n      return -1;\n    }\n    const midPoints = LinearElementEditor.getEditorMidPoints(\n      element,\n      elementsMap,\n      appState,\n    );\n    let index = 0;\n    while (index < midPoints.length) {\n      if (LinearElementEditor.arePointsEqual(midPoint, midPoints[index])) {\n        return index + 1;\n      }\n      index++;\n    }\n    return -1;\n  }\n\n  static handlePointerDown(\n    event: React.PointerEvent<HTMLElement>,\n    app: AppClassProperties,\n    store: Store,\n    scenePointer: { x: number; y: number },\n    linearElementEditor: LinearElementEditor,\n    scene: Scene,\n  ): {\n    didAddPoint: boolean;\n    hitElement: NonDeleted<ExcalidrawElement> | null;\n    linearElementEditor: LinearElementEditor | null;\n  } {\n    const appState = app.state;\n    const elementsMap = scene.getNonDeletedElementsMap();\n    const elements = scene.getNonDeletedElements();\n\n    const ret: ReturnType<typeof LinearElementEditor[\"handlePointerDown\"]> = {\n      didAddPoint: false,\n      hitElement: null,\n      linearElementEditor: null,\n    };\n\n    if (!linearElementEditor) {\n      return ret;\n    }\n\n    const { elementId } = linearElementEditor;\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n\n    if (!element) {\n      return ret;\n    }\n    const segmentMidpoint = LinearElementEditor.getSegmentMidpointHitCoords(\n      linearElementEditor,\n      scenePointer,\n      appState,\n      elementsMap,\n    );\n    let segmentMidpointIndex = null;\n    if (segmentMidpoint) {\n      segmentMidpointIndex = LinearElementEditor.getSegmentMidPointIndex(\n        linearElementEditor,\n        appState,\n        segmentMidpoint,\n        elementsMap,\n      );\n    } else if (event.altKey && appState.editingLinearElement) {\n      if (linearElementEditor.lastUncommittedPoint == null) {\n        mutateElement(element, {\n          points: [\n            ...element.points,\n            LinearElementEditor.createPointAt(\n              element,\n              elementsMap,\n              scenePointer.x,\n              scenePointer.y,\n              event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize(),\n            ),\n          ],\n        });\n        ret.didAddPoint = true;\n      }\n      store.shouldCaptureIncrement();\n      ret.linearElementEditor = {\n        ...linearElementEditor,\n        pointerDownState: {\n          prevSelectedPointsIndices: linearElementEditor.selectedPointsIndices,\n          lastClickedPoint: -1,\n          lastClickedIsEndPoint: false,\n          origin: { x: scenePointer.x, y: scenePointer.y },\n          segmentMidpoint: {\n            value: segmentMidpoint,\n            index: segmentMidpointIndex,\n            added: false,\n          },\n        },\n        selectedPointsIndices: [element.points.length - 1],\n        lastUncommittedPoint: null,\n        endBindingElement: getHoveredElementForBinding(\n          scenePointer,\n          elements,\n          elementsMap,\n          app.state.zoom,\n          linearElementEditor.elbowed,\n        ),\n      };\n\n      ret.didAddPoint = true;\n      return ret;\n    }\n\n    const clickedPointIndex = LinearElementEditor.getPointIndexUnderCursor(\n      element,\n      elementsMap,\n      appState.zoom,\n      scenePointer.x,\n      scenePointer.y,\n    );\n    // if we clicked on a point, set the element as hitElement otherwise\n    // it would get deselected if the point is outside the hitbox area\n    if (clickedPointIndex >= 0 || segmentMidpoint) {\n      ret.hitElement = element;\n    } else {\n      // You might be wandering why we are storing the binding elements on\n      // LinearElementEditor and passing them in, instead of calculating them\n      // from the end points of the `linearElement` - this is to allow disabling\n      // binding (which needs to happen at the point the user finishes moving\n      // the point).\n      const { startBindingElement, endBindingElement } = linearElementEditor;\n      if (isBindingEnabled(appState) && isBindingElement(element)) {\n        bindOrUnbindLinearElement(\n          element,\n          startBindingElement,\n          endBindingElement,\n          elementsMap,\n          scene,\n        );\n      }\n    }\n\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const targetPoint =\n      clickedPointIndex > -1 &&\n      pointRotateRads(\n        pointFrom(\n          element.x + element.points[clickedPointIndex][0],\n          element.y + element.points[clickedPointIndex][1],\n        ),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n\n    const nextSelectedPointsIndices =\n      clickedPointIndex > -1 || event.shiftKey\n        ? event.shiftKey ||\n          linearElementEditor.selectedPointsIndices?.includes(clickedPointIndex)\n          ? normalizeSelectedPoints([\n              ...(linearElementEditor.selectedPointsIndices || []),\n              clickedPointIndex,\n            ])\n          : [clickedPointIndex]\n        : null;\n    ret.linearElementEditor = {\n      ...linearElementEditor,\n      pointerDownState: {\n        prevSelectedPointsIndices: linearElementEditor.selectedPointsIndices,\n        lastClickedPoint: clickedPointIndex,\n        lastClickedIsEndPoint: clickedPointIndex === element.points.length - 1,\n        origin: { x: scenePointer.x, y: scenePointer.y },\n        segmentMidpoint: {\n          value: segmentMidpoint,\n          index: segmentMidpointIndex,\n          added: false,\n        },\n      },\n      selectedPointsIndices: nextSelectedPointsIndices,\n      pointerOffset: targetPoint\n        ? {\n            x: scenePointer.x - targetPoint[0],\n            y: scenePointer.y - targetPoint[1],\n          }\n        : { x: 0, y: 0 },\n    };\n\n    return ret;\n  }\n\n  static arePointsEqual<Point extends LocalPoint | GlobalPoint>(\n    point1: Point | null,\n    point2: Point | null,\n  ) {\n    if (!point1 && !point2) {\n      return true;\n    }\n    if (!point1 || !point2) {\n      return false;\n    }\n    return pointsEqual(point1, point2);\n  }\n\n  static handlePointerMove(\n    event: React.PointerEvent<HTMLCanvasElement>,\n    scenePointerX: number,\n    scenePointerY: number,\n    app: AppClassProperties,\n    elementsMap: NonDeletedSceneElementsMap | SceneElementsMap,\n  ): LinearElementEditor | null {\n    const appState = app.state;\n    if (!appState.editingLinearElement) {\n      return null;\n    }\n    const { elementId, lastUncommittedPoint } = appState.editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n    if (!element) {\n      return appState.editingLinearElement;\n    }\n\n    const { points } = element;\n    const lastPoint = points[points.length - 1];\n\n    if (!event.altKey) {\n      if (lastPoint === lastUncommittedPoint) {\n        LinearElementEditor.deletePoints(element, [points.length - 1]);\n      }\n      return {\n        ...appState.editingLinearElement,\n        lastUncommittedPoint: null,\n      };\n    }\n\n    let newPoint: LocalPoint;\n\n    if (shouldRotateWithDiscreteAngle(event) && points.length >= 2) {\n      const lastCommittedPoint = points[points.length - 2];\n\n      const [width, height] = LinearElementEditor._getShiftLockedDelta(\n        element,\n        elementsMap,\n        lastCommittedPoint,\n        pointFrom(scenePointerX, scenePointerY),\n        event[KEYS.CTRL_OR_CMD] ? null : app.getEffectiveGridSize(),\n      );\n\n      newPoint = pointFrom(\n        width + lastCommittedPoint[0],\n        height + lastCommittedPoint[1],\n      );\n    } else {\n      newPoint = LinearElementEditor.createPointAt(\n        element,\n        elementsMap,\n        scenePointerX - appState.editingLinearElement.pointerOffset.x,\n        scenePointerY - appState.editingLinearElement.pointerOffset.y,\n        event[KEYS.CTRL_OR_CMD] || isElbowArrow(element)\n          ? null\n          : app.getEffectiveGridSize(),\n      );\n    }\n\n    if (lastPoint === lastUncommittedPoint) {\n      LinearElementEditor.movePoints(element, [\n        {\n          index: element.points.length - 1,\n          point: newPoint,\n        },\n      ]);\n    } else {\n      LinearElementEditor.addPoints(element, [{ point: newPoint }]);\n    }\n    return {\n      ...appState.editingLinearElement,\n      lastUncommittedPoint: element.points[element.points.length - 1],\n    };\n  }\n\n  /** scene coords */\n  static getPointGlobalCoordinates(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    p: LocalPoint,\n    elementsMap: ElementsMap,\n  ): GlobalPoint {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n\n    const { x, y } = element;\n    return pointRotateRads(\n      pointFrom(x + p[0], y + p[1]),\n      pointFrom(cx, cy),\n      element.angle,\n    );\n  }\n\n  /** scene coords */\n  static getPointsGlobalCoordinates(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n  ): GlobalPoint[] {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    return element.points.map((p) => {\n      const { x, y } = element;\n      return pointRotateRads(\n        pointFrom(x + p[0], y + p[1]),\n        pointFrom(cx, cy),\n        element.angle,\n      );\n    });\n  }\n\n  static getPointAtIndexGlobalCoordinates(\n    element: NonDeleted<ExcalidrawLinearElement>,\n\n    indexMaybeFromEnd: number, // -1 for last element\n    elementsMap: ElementsMap,\n  ): GlobalPoint {\n    const index =\n      indexMaybeFromEnd < 0\n        ? element.points.length + indexMaybeFromEnd\n        : indexMaybeFromEnd;\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const p = element.points[index];\n    const { x, y } = element;\n\n    return p\n      ? pointRotateRads(\n          pointFrom(x + p[0], y + p[1]),\n          pointFrom(cx, cy),\n          element.angle,\n        )\n      : pointRotateRads(pointFrom(x, y), pointFrom(cx, cy), element.angle);\n  }\n\n  static pointFromAbsoluteCoords(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    absoluteCoords: GlobalPoint,\n    elementsMap: ElementsMap,\n  ): LocalPoint {\n    if (isElbowArrow(element)) {\n      // No rotation for elbow arrows\n      return pointFrom(\n        absoluteCoords[0] - element.x,\n        absoluteCoords[1] - element.y,\n      );\n    }\n\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const [x, y] = pointRotateRads(\n      pointFrom(absoluteCoords[0], absoluteCoords[1]),\n      pointFrom(cx, cy),\n      -element.angle as Radians,\n    );\n    return pointFrom(x - element.x, y - element.y);\n  }\n\n  static getPointIndexUnderCursor(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n    zoom: AppState[\"zoom\"],\n    x: number,\n    y: number,\n  ) {\n    const pointHandles = LinearElementEditor.getPointsGlobalCoordinates(\n      element,\n      elementsMap,\n    );\n    let idx = pointHandles.length;\n    // loop from right to left because points on the right are rendered over\n    // points on the left, thus should take precedence when clicking, if they\n    // overlap\n    while (--idx > -1) {\n      const p = pointHandles[idx];\n      if (\n        pointDistance(pointFrom(x, y), pointFrom(p[0], p[1])) * zoom.value <\n        // +1px to account for outline stroke\n        LinearElementEditor.POINT_HANDLE_SIZE + 1\n      ) {\n        return idx;\n      }\n    }\n    return -1;\n  }\n\n  static createPointAt(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n    scenePointerX: number,\n    scenePointerY: number,\n    gridSize: NullableGridSize,\n  ): LocalPoint {\n    const pointerOnGrid = getGridPoint(scenePointerX, scenePointerY, gridSize);\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const [rotatedX, rotatedY] = pointRotateRads(\n      pointFrom(pointerOnGrid[0], pointerOnGrid[1]),\n      pointFrom(cx, cy),\n      -element.angle as Radians,\n    );\n\n    return pointFrom(rotatedX - element.x, rotatedY - element.y);\n  }\n\n  /**\n   * Normalizes line points so that the start point is at [0,0]. This is\n   * expected in various parts of the codebase. Also returns new x/y to account\n   * for the potential normalization.\n   */\n  static getNormalizedPoints(element: ExcalidrawLinearElement): {\n    points: LocalPoint[];\n    x: number;\n    y: number;\n  } {\n    const { points } = element;\n\n    const offsetX = points[0][0];\n    const offsetY = points[0][1];\n\n    return {\n      points: points.map((p) => {\n        return pointFrom(p[0] - offsetX, p[1] - offsetY);\n      }),\n      x: element.x + offsetX,\n      y: element.y + offsetY,\n    };\n  }\n\n  // element-mutating methods\n  // ---------------------------------------------------------------------------\n\n  static normalizePoints(element: NonDeleted<ExcalidrawLinearElement>) {\n    mutateElement(element, LinearElementEditor.getNormalizedPoints(element));\n  }\n\n  static duplicateSelectedPoints(\n    appState: AppState,\n    elementsMap: NonDeletedSceneElementsMap | SceneElementsMap,\n  ): AppState {\n    invariant(\n      appState.editingLinearElement,\n      \"Not currently editing a linear element\",\n    );\n\n    const { selectedPointsIndices, elementId } = appState.editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId, elementsMap);\n\n    invariant(\n      element,\n      \"The linear element does not exist in the provided Scene\",\n    );\n    invariant(\n      selectedPointsIndices != null,\n      \"There are no selected points to duplicate\",\n    );\n\n    const { points } = element;\n\n    const nextSelectedIndices: number[] = [];\n\n    let pointAddedToEnd = false;\n    let indexCursor = -1;\n    const nextPoints = points.reduce((acc: LocalPoint[], p, index) => {\n      ++indexCursor;\n      acc.push(p);\n\n      const isSelected = selectedPointsIndices.includes(index);\n      if (isSelected) {\n        const nextPoint = points[index + 1];\n\n        if (!nextPoint) {\n          pointAddedToEnd = true;\n        }\n        acc.push(\n          nextPoint\n            ? pointFrom((p[0] + nextPoint[0]) / 2, (p[1] + nextPoint[1]) / 2)\n            : pointFrom(p[0], p[1]),\n        );\n\n        nextSelectedIndices.push(indexCursor + 1);\n        ++indexCursor;\n      }\n\n      return acc;\n    }, []);\n\n    mutateElement(element, { points: nextPoints });\n\n    // temp hack to ensure the line doesn't move when adding point to the end,\n    // potentially expanding the bounding box\n    if (pointAddedToEnd) {\n      const lastPoint = element.points[element.points.length - 1];\n      LinearElementEditor.movePoints(element, [\n        {\n          index: element.points.length - 1,\n          point: pointFrom(lastPoint[0] + 30, lastPoint[1] + 30),\n        },\n      ]);\n    }\n\n    return {\n      ...appState,\n      editingLinearElement: {\n        ...appState.editingLinearElement,\n        selectedPointsIndices: nextSelectedIndices,\n      },\n    };\n  }\n\n  static deletePoints(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    pointIndices: readonly number[],\n  ) {\n    let offsetX = 0;\n    let offsetY = 0;\n\n    const isDeletingOriginPoint = pointIndices.includes(0);\n\n    // if deleting first point, make the next to be [0,0] and recalculate\n    // positions of the rest with respect to it\n    if (isDeletingOriginPoint) {\n      const firstNonDeletedPoint = element.points.find((point, idx) => {\n        return !pointIndices.includes(idx);\n      });\n      if (firstNonDeletedPoint) {\n        offsetX = firstNonDeletedPoint[0];\n        offsetY = firstNonDeletedPoint[1];\n      }\n    }\n\n    const nextPoints = element.points.reduce((acc: LocalPoint[], p, idx) => {\n      if (!pointIndices.includes(idx)) {\n        acc.push(\n          !acc.length\n            ? pointFrom(0, 0)\n            : pointFrom(p[0] - offsetX, p[1] - offsetY),\n        );\n      }\n      return acc;\n    }, []);\n\n    LinearElementEditor._updatePoints(element, nextPoints, offsetX, offsetY);\n  }\n\n  static addPoints(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    targetPoints: { point: LocalPoint }[],\n  ) {\n    const offsetX = 0;\n    const offsetY = 0;\n\n    const nextPoints = [...element.points, ...targetPoints.map((x) => x.point)];\n    LinearElementEditor._updatePoints(element, nextPoints, offsetX, offsetY);\n  }\n\n  static movePoints(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    targetPoints: { index: number; point: LocalPoint; isDragging?: boolean }[],\n    otherUpdates?: {\n      startBinding?: PointBinding | null;\n      endBinding?: PointBinding | null;\n    },\n    sceneElementsMap?: NonDeletedSceneElementsMap,\n  ) {\n    const { points } = element;\n\n    // in case we're moving start point, instead of modifying its position\n    // which would break the invariant of it being at [0,0], we move\n    // all the other points in the opposite direction by delta to\n    // offset it. We do the same with actual element.x/y position, so\n    // this hacks are completely transparent to the user.\n    const [deltaX, deltaY] =\n      targetPoints.find(({ index }) => index === 0)?.point ??\n      pointFrom<LocalPoint>(0, 0);\n    const [offsetX, offsetY] = pointFrom<LocalPoint>(\n      deltaX - points[0][0],\n      deltaY - points[0][1],\n    );\n\n    const nextPoints = isElbowArrow(element)\n      ? [\n          targetPoints.find((t) => t.index === 0)?.point ?? points[0],\n          targetPoints.find((t) => t.index === points.length - 1)?.point ??\n            points[points.length - 1],\n        ]\n      : points.map((p, idx) => {\n          const current = targetPoints.find((t) => t.index === idx)?.point ?? p;\n\n          return pointFrom<LocalPoint>(\n            current[0] - offsetX,\n            current[1] - offsetY,\n          );\n        });\n\n    LinearElementEditor._updatePoints(\n      element,\n      nextPoints,\n      offsetX,\n      offsetY,\n      otherUpdates,\n      {\n        isDragging: targetPoints.reduce(\n          (dragging, targetPoint): boolean =>\n            dragging || targetPoint.isDragging === true,\n          false,\n        ),\n        sceneElementsMap,\n      },\n    );\n  }\n\n  static shouldAddMidpoint(\n    linearElementEditor: LinearElementEditor,\n    pointerCoords: PointerCoords,\n    appState: AppState,\n    elementsMap: ElementsMap,\n  ) {\n    const element = LinearElementEditor.getElement(\n      linearElementEditor.elementId,\n      elementsMap,\n    );\n\n    // Elbow arrows don't allow midpoints\n    if (element && isElbowArrow(element)) {\n      return false;\n    }\n\n    if (!element) {\n      return false;\n    }\n\n    const { segmentMidpoint } = linearElementEditor.pointerDownState;\n\n    if (\n      segmentMidpoint.added ||\n      segmentMidpoint.value === null ||\n      segmentMidpoint.index === null ||\n      linearElementEditor.pointerDownState.origin === null\n    ) {\n      return false;\n    }\n\n    const origin = linearElementEditor.pointerDownState.origin!;\n    const dist = pointDistance(\n      pointFrom(origin.x, origin.y),\n      pointFrom(pointerCoords.x, pointerCoords.y),\n    );\n    if (\n      !appState.editingLinearElement &&\n      dist < DRAGGING_THRESHOLD / appState.zoom.value\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  static addMidpoint(\n    linearElementEditor: LinearElementEditor,\n    pointerCoords: PointerCoords,\n    app: AppClassProperties,\n    snapToGrid: boolean,\n    elementsMap: ElementsMap,\n  ) {\n    const element = LinearElementEditor.getElement(\n      linearElementEditor.elementId,\n      elementsMap,\n    );\n    if (!element) {\n      return;\n    }\n    const { segmentMidpoint } = linearElementEditor.pointerDownState;\n    const ret: {\n      pointerDownState: LinearElementEditor[\"pointerDownState\"];\n      selectedPointsIndices: LinearElementEditor[\"selectedPointsIndices\"];\n    } = {\n      pointerDownState: linearElementEditor.pointerDownState,\n      selectedPointsIndices: linearElementEditor.selectedPointsIndices,\n    };\n\n    const midpoint = LinearElementEditor.createPointAt(\n      element,\n      elementsMap,\n      pointerCoords.x,\n      pointerCoords.y,\n      snapToGrid && !isElbowArrow(element) ? app.getEffectiveGridSize() : null,\n    );\n    const points = [\n      ...element.points.slice(0, segmentMidpoint.index!),\n      midpoint,\n      ...element.points.slice(segmentMidpoint.index!),\n    ];\n\n    mutateElement(element, {\n      points,\n    });\n\n    ret.pointerDownState = {\n      ...linearElementEditor.pointerDownState,\n      segmentMidpoint: {\n        ...linearElementEditor.pointerDownState.segmentMidpoint,\n        added: true,\n      },\n      lastClickedPoint: segmentMidpoint.index!,\n    };\n    ret.selectedPointsIndices = [segmentMidpoint.index!];\n    return ret;\n  }\n\n  private static _updatePoints(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    nextPoints: readonly LocalPoint[],\n    offsetX: number,\n    offsetY: number,\n    otherUpdates?: {\n      startBinding?: PointBinding | null;\n      endBinding?: PointBinding | null;\n    },\n    options?: {\n      isDragging?: boolean;\n      zoom?: AppState[\"zoom\"];\n      sceneElementsMap?: NonDeletedSceneElementsMap;\n    },\n  ) {\n    if (isElbowArrow(element)) {\n      const updates: {\n        startBinding?: FixedPointBinding | null;\n        endBinding?: FixedPointBinding | null;\n        points?: LocalPoint[];\n      } = {};\n      if (otherUpdates?.startBinding !== undefined) {\n        updates.startBinding =\n          otherUpdates.startBinding !== null &&\n          isFixedPointBinding(otherUpdates.startBinding)\n            ? otherUpdates.startBinding\n            : null;\n      }\n      if (otherUpdates?.endBinding !== undefined) {\n        updates.endBinding =\n          otherUpdates.endBinding !== null &&\n          isFixedPointBinding(otherUpdates.endBinding)\n            ? otherUpdates.endBinding\n            : null;\n      }\n\n      updates.points = Array.from(nextPoints);\n\n      if (!options?.sceneElementsMap || Scene.getScene(element)) {\n        mutateElement(element, updates, true, {\n          isDragging: options?.isDragging,\n        });\n      } else {\n        // The element is not in the scene, so we need to use the provided\n        // scene map.\n        Object.assign(element, {\n          ...updates,\n          angle: 0 as Radians,\n\n          ...updateElbowArrowPoints(\n            element,\n            options.sceneElementsMap,\n            updates,\n            {\n              isDragging: options?.isDragging,\n            },\n          ),\n        });\n      }\n      bumpVersion(element);\n    } else {\n      const nextCoords = getElementPointsCoords(element, nextPoints);\n      const prevCoords = getElementPointsCoords(element, element.points);\n      const nextCenterX = (nextCoords[0] + nextCoords[2]) / 2;\n      const nextCenterY = (nextCoords[1] + nextCoords[3]) / 2;\n      const prevCenterX = (prevCoords[0] + prevCoords[2]) / 2;\n      const prevCenterY = (prevCoords[1] + prevCoords[3]) / 2;\n      const dX = prevCenterX - nextCenterX;\n      const dY = prevCenterY - nextCenterY;\n      const rotated = pointRotateRads(\n        pointFrom(offsetX, offsetY),\n        pointFrom(dX, dY),\n        element.angle,\n      );\n      mutateElement(element, {\n        ...otherUpdates,\n        points: nextPoints,\n        x: element.x + rotated[0],\n        y: element.y + rotated[1],\n      });\n    }\n  }\n\n  private static _getShiftLockedDelta(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    elementsMap: ElementsMap,\n    referencePoint: LocalPoint,\n    scenePointer: GlobalPoint,\n    gridSize: NullableGridSize,\n  ) {\n    const referencePointCoords = LinearElementEditor.getPointGlobalCoordinates(\n      element,\n      referencePoint,\n      elementsMap,\n    );\n\n    if (isElbowArrow(element)) {\n      return [\n        scenePointer[0] - referencePointCoords[0],\n        scenePointer[1] - referencePointCoords[1],\n      ];\n    }\n\n    const [gridX, gridY] = getGridPoint(\n      scenePointer[0],\n      scenePointer[1],\n      gridSize,\n    );\n\n    const { width, height } = getLockedLinearCursorAlignSize(\n      referencePointCoords[0],\n      referencePointCoords[1],\n      gridX,\n      gridY,\n    );\n\n    return pointRotateRads(\n      pointFrom(width, height),\n      pointFrom(0, 0),\n      -element.angle as Radians,\n    );\n  }\n\n  static getBoundTextElementPosition = (\n    element: ExcalidrawLinearElement,\n    boundTextElement: ExcalidrawTextElementWithContainer,\n    elementsMap: ElementsMap,\n  ): { x: number; y: number } => {\n    const points = LinearElementEditor.getPointsGlobalCoordinates(\n      element,\n      elementsMap,\n    );\n    if (points.length < 2) {\n      mutateElement(boundTextElement, { isDeleted: true });\n    }\n    let x = 0;\n    let y = 0;\n    if (element.points.length % 2 === 1) {\n      const index = Math.floor(element.points.length / 2);\n      const midPoint = LinearElementEditor.getPointGlobalCoordinates(\n        element,\n        element.points[index],\n        elementsMap,\n      );\n      x = midPoint[0] - boundTextElement.width / 2;\n      y = midPoint[1] - boundTextElement.height / 2;\n    } else {\n      const index = element.points.length / 2 - 1;\n\n      let midSegmentMidpoint = editorMidPointsCache.points[index];\n      if (element.points.length === 2) {\n        midSegmentMidpoint = pointCenter(points[0], points[1]);\n      }\n      if (\n        !midSegmentMidpoint ||\n        editorMidPointsCache.version !== element.version\n      ) {\n        midSegmentMidpoint = LinearElementEditor.getSegmentMidPoint(\n          element,\n          points[index],\n          points[index + 1],\n          index + 1,\n          elementsMap,\n        );\n      }\n      x = midSegmentMidpoint[0] - boundTextElement.width / 2;\n      y = midSegmentMidpoint[1] - boundTextElement.height / 2;\n    }\n    return { x, y };\n  };\n\n  static getMinMaxXYWithBoundText = (\n    element: ExcalidrawLinearElement,\n    elementsMap: ElementsMap,\n    elementBounds: Bounds,\n    boundTextElement: ExcalidrawTextElementWithContainer,\n  ): [number, number, number, number, number, number] => {\n    let [x1, y1, x2, y2] = elementBounds;\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const { x: boundTextX1, y: boundTextY1 } =\n      LinearElementEditor.getBoundTextElementPosition(\n        element,\n        boundTextElement,\n        elementsMap,\n      );\n    const boundTextX2 = boundTextX1 + boundTextElement.width;\n    const boundTextY2 = boundTextY1 + boundTextElement.height;\n    const centerPoint = pointFrom(cx, cy);\n\n    const topLeftRotatedPoint = pointRotateRads(\n      pointFrom(x1, y1),\n      centerPoint,\n      element.angle,\n    );\n    const topRightRotatedPoint = pointRotateRads(\n      pointFrom(x2, y1),\n      centerPoint,\n      element.angle,\n    );\n\n    const counterRotateBoundTextTopLeft = pointRotateRads(\n      pointFrom(boundTextX1, boundTextY1),\n      centerPoint,\n      -element.angle as Radians,\n    );\n    const counterRotateBoundTextTopRight = pointRotateRads(\n      pointFrom(boundTextX2, boundTextY1),\n      centerPoint,\n      -element.angle as Radians,\n    );\n    const counterRotateBoundTextBottomLeft = pointRotateRads(\n      pointFrom(boundTextX1, boundTextY2),\n      centerPoint,\n      -element.angle as Radians,\n    );\n    const counterRotateBoundTextBottomRight = pointRotateRads(\n      pointFrom(boundTextX2, boundTextY2),\n      centerPoint,\n      -element.angle as Radians,\n    );\n\n    if (\n      topLeftRotatedPoint[0] < topRightRotatedPoint[0] &&\n      topLeftRotatedPoint[1] >= topRightRotatedPoint[1]\n    ) {\n      x1 = Math.min(x1, counterRotateBoundTextBottomLeft[0]);\n      x2 = Math.max(\n        x2,\n        Math.max(\n          counterRotateBoundTextTopRight[0],\n          counterRotateBoundTextBottomRight[0],\n        ),\n      );\n      y1 = Math.min(y1, counterRotateBoundTextTopLeft[1]);\n\n      y2 = Math.max(y2, counterRotateBoundTextBottomRight[1]);\n    } else if (\n      topLeftRotatedPoint[0] >= topRightRotatedPoint[0] &&\n      topLeftRotatedPoint[1] > topRightRotatedPoint[1]\n    ) {\n      x1 = Math.min(x1, counterRotateBoundTextBottomRight[0]);\n      x2 = Math.max(\n        x2,\n        Math.max(\n          counterRotateBoundTextTopLeft[0],\n          counterRotateBoundTextTopRight[0],\n        ),\n      );\n      y1 = Math.min(y1, counterRotateBoundTextBottomLeft[1]);\n\n      y2 = Math.max(y2, counterRotateBoundTextTopRight[1]);\n    } else if (topLeftRotatedPoint[0] >= topRightRotatedPoint[0]) {\n      x1 = Math.min(x1, counterRotateBoundTextTopRight[0]);\n      x2 = Math.max(x2, counterRotateBoundTextBottomLeft[0]);\n      y1 = Math.min(y1, counterRotateBoundTextBottomRight[1]);\n\n      y2 = Math.max(y2, counterRotateBoundTextTopLeft[1]);\n    } else if (topLeftRotatedPoint[1] <= topRightRotatedPoint[1]) {\n      x1 = Math.min(\n        x1,\n        Math.min(\n          counterRotateBoundTextTopRight[0],\n          counterRotateBoundTextTopLeft[0],\n        ),\n      );\n\n      x2 = Math.max(x2, counterRotateBoundTextBottomRight[0]);\n      y1 = Math.min(y1, counterRotateBoundTextTopRight[1]);\n      y2 = Math.max(y2, counterRotateBoundTextBottomLeft[1]);\n    }\n\n    return [x1, y1, x2, y2, cx, cy];\n  };\n\n  static getElementAbsoluteCoords = (\n    element: ExcalidrawLinearElement,\n    elementsMap: ElementsMap,\n    includeBoundText: boolean = false,\n  ): [number, number, number, number, number, number] => {\n    let coords: [number, number, number, number, number, number];\n    let x1;\n    let y1;\n    let x2;\n    let y2;\n    if (element.points.length < 2 || !ShapeCache.get(element)) {\n      // XXX this is just a poor estimate and not very useful\n      const { minX, minY, maxX, maxY } = element.points.reduce(\n        (limits, [x, y]) => {\n          limits.minY = Math.min(limits.minY, y);\n          limits.minX = Math.min(limits.minX, x);\n\n          limits.maxX = Math.max(limits.maxX, x);\n          limits.maxY = Math.max(limits.maxY, y);\n\n          return limits;\n        },\n        { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n      );\n      x1 = minX + element.x;\n      y1 = minY + element.y;\n      x2 = maxX + element.x;\n      y2 = maxY + element.y;\n    } else {\n      const shape = ShapeCache.generateElementShape(element, null);\n\n      // first element is always the curve\n      const ops = getCurvePathOps(shape[0]);\n\n      const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n      x1 = minX + element.x;\n      y1 = minY + element.y;\n      x2 = maxX + element.x;\n      y2 = maxY + element.y;\n    }\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    coords = [x1, y1, x2, y2, cx, cy];\n\n    if (!includeBoundText) {\n      return coords;\n    }\n    const boundTextElement = getBoundTextElement(element, elementsMap);\n    if (boundTextElement) {\n      coords = LinearElementEditor.getMinMaxXYWithBoundText(\n        element,\n        elementsMap,\n        [x1, y1, x2, y2],\n        boundTextElement,\n      );\n    }\n\n    return coords;\n  };\n\n  static moveFixedSegment(\n    linearElement: LinearElementEditor,\n    index: number,\n    x: number,\n    y: number,\n    elementsMap: ElementsMap,\n  ): LinearElementEditor {\n    const element = LinearElementEditor.getElement(\n      linearElement.elementId,\n      elementsMap,\n    );\n\n    if (!element || !isElbowArrow(element)) {\n      return linearElement;\n    }\n\n    if (index && index > 0 && index < element.points.length) {\n      const isHorizontal = headingIsHorizontal(\n        vectorToHeading(\n          vectorFromPoint(element.points[index], element.points[index - 1]),\n        ),\n      );\n\n      const fixedSegments = (element.fixedSegments ?? []).reduce(\n        (segments, s) => {\n          segments[s.index] = s;\n          return segments;\n        },\n        {} as Record<number, FixedSegment>,\n      );\n      fixedSegments[index] = {\n        index,\n        start: pointFrom<LocalPoint>(\n          !isHorizontal ? x - element.x : element.points[index - 1][0],\n          isHorizontal ? y - element.y : element.points[index - 1][1],\n        ),\n        end: pointFrom<LocalPoint>(\n          !isHorizontal ? x - element.x : element.points[index][0],\n          isHorizontal ? y - element.y : element.points[index][1],\n        ),\n      };\n      const nextFixedSegments = Object.values(fixedSegments).sort(\n        (a, b) => a.index - b.index,\n      );\n\n      const offset = nextFixedSegments\n        .map((segment) => segment.index)\n        .reduce((count, idx) => (idx < index ? count + 1 : count), 0);\n\n      mutateElement(element, {\n        fixedSegments: nextFixedSegments,\n      });\n\n      const point = pointFrom<GlobalPoint>(\n        element.x +\n          (element.fixedSegments![offset].start[0] +\n            element.fixedSegments![offset].end[0]) /\n            2,\n        element.y +\n          (element.fixedSegments![offset].start[1] +\n            element.fixedSegments![offset].end[1]) /\n            2,\n      );\n\n      return {\n        ...linearElement,\n        segmentMidPointHoveredCoords: point,\n        pointerDownState: {\n          ...linearElement.pointerDownState,\n          segmentMidpoint: {\n            added: false,\n            index: element.fixedSegments![offset].index,\n            value: point,\n          },\n        },\n      };\n    }\n\n    return linearElement;\n  }\n\n  static deleteFixedSegment(\n    element: ExcalidrawElbowArrowElement,\n    index: number,\n  ): void {\n    mutateElement(element, {\n      fixedSegments: element.fixedSegments?.filter(\n        (segment) => segment.index !== index,\n      ),\n    });\n    mutateElement(element, {}, true);\n  }\n}\n\nconst normalizeSelectedPoints = (\n  points: (number | null)[],\n): number[] | null => {\n  let nextPoints = [\n    ...new Set(points.filter((p) => p !== null && p !== -1)),\n  ] as number[];\n  nextPoints = nextPoints.sort((a, b) => a - b);\n  return nextPoints.length ? nextPoints : null;\n};\n", "import throttle from \"lodash.throttle\";\n\nimport {\n  randomInteger,\n  arrayToMap,\n  toBrandedType,\n  isDevEnv,\n  isTestEnv,\n} from \"@excalidraw/common\";\nimport { isNonDeletedElement } from \"@excalidraw/element\";\nimport { isFrameLikeElement } from \"@excalidraw/element/typeChecks\";\nimport { getElementsInGroup } from \"@excalidraw/element/groups\";\n\nimport {\n  syncInvalidIndices,\n  syncMovedIndices,\n  validateFractionalIndices,\n} from \"@excalidraw/element/fractionalIndex\";\n\nimport { getSelectedElements } from \"@excalidraw/element/selection\";\n\nimport type { LinearElementEditor } from \"@excalidraw/element/linearElementEditor\";\nimport type {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n  ExcalidrawFrameLikeElement,\n  ElementsMapOrArray,\n  SceneElementsMap,\n  NonDeletedSceneElementsMap,\n  OrderedExcalidrawElement,\n  Ordered,\n} from \"@excalidraw/element/types\";\n\nimport type { Assert, SameType } from \"@excalidraw/common/utility-types\";\n\nimport type { AppState } from \"../types\";\n\ntype ElementIdKey = InstanceType<typeof LinearElementEditor>[\"elementId\"];\ntype ElementKey = ExcalidrawElement | ElementIdKey;\n\ntype SceneStateCallback = () => void;\ntype SceneStateCallbackRemover = () => void;\n\ntype SelectionHash = string & { __brand: \"selectionHash\" };\n\nconst getNonDeletedElements = <T extends ExcalidrawElement>(\n  allElements: readonly T[],\n) => {\n  const elementsMap = new Map() as NonDeletedSceneElementsMap;\n  const elements: T[] = [];\n  for (const element of allElements) {\n    if (!element.isDeleted) {\n      elements.push(element as NonDeleted<T>);\n      elementsMap.set(\n        element.id,\n        element as Ordered<NonDeletedExcalidrawElement>,\n      );\n    }\n  }\n  return { elementsMap, elements };\n};\n\nconst validateIndicesThrottled = throttle(\n  (elements: readonly ExcalidrawElement[]) => {\n    if (isDevEnv() || isTestEnv() || window?.DEBUG_FRACTIONAL_INDICES) {\n      validateFractionalIndices(elements, {\n        // throw only in dev & test, to remain functional on `DEBUG_FRACTIONAL_INDICES`\n        shouldThrow: isDevEnv() || isTestEnv(),\n        includeBoundTextValidation: true,\n      });\n    }\n  },\n  1000 * 60,\n  { leading: true, trailing: false },\n);\n\nconst hashSelectionOpts = (\n  opts: Parameters<InstanceType<typeof Scene>[\"getSelectedElements\"]>[0],\n) => {\n  const keys = [\"includeBoundTextElement\", \"includeElementsInFrames\"] as const;\n\n  type HashableKeys = Omit<typeof opts, \"selectedElementIds\" | \"elements\">;\n\n  // just to ensure we're hashing all expected keys\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type _ = Assert<\n    SameType<\n      Required<HashableKeys>,\n      Pick<Required<HashableKeys>, typeof keys[number]>\n    >\n  >;\n\n  let hash = \"\";\n  for (const key of keys) {\n    hash += `${key}:${opts[key] ? \"1\" : \"0\"}`;\n  }\n  return hash as SelectionHash;\n};\n\n// ideally this would be a branded type but it'd be insanely hard to work with\n// in our codebase\nexport type ExcalidrawElementsIncludingDeleted = readonly ExcalidrawElement[];\n\nconst isIdKey = (elementKey: ElementKey): elementKey is ElementIdKey => {\n  if (typeof elementKey === \"string\") {\n    return true;\n  }\n  return false;\n};\n\nclass Scene {\n  // ---------------------------------------------------------------------------\n  // static methods/props\n  // ---------------------------------------------------------------------------\n\n  private static sceneMapByElement = new WeakMap<ExcalidrawElement, Scene>();\n  private static sceneMapById = new Map<string, Scene>();\n\n  static mapElementToScene(elementKey: ElementKey, scene: Scene) {\n    if (isIdKey(elementKey)) {\n      // for cases where we don't have access to the element object\n      // (e.g. restore serialized appState with id references)\n      this.sceneMapById.set(elementKey, scene);\n    } else {\n      this.sceneMapByElement.set(elementKey, scene);\n      // if mapping element objects, also cache the id string when later\n      // looking up by id alone\n      this.sceneMapById.set(elementKey.id, scene);\n    }\n  }\n\n  /**\n   * @deprecated pass down `app.scene` and use it directly\n   */\n  static getScene(elementKey: ElementKey): Scene | null {\n    if (isIdKey(elementKey)) {\n      return this.sceneMapById.get(elementKey) || null;\n    }\n    return this.sceneMapByElement.get(elementKey) || null;\n  }\n\n  // ---------------------------------------------------------------------------\n  // instance methods/props\n  // ---------------------------------------------------------------------------\n\n  private callbacks: Set<SceneStateCallback> = new Set();\n\n  private nonDeletedElements: readonly Ordered<NonDeletedExcalidrawElement>[] =\n    [];\n  private nonDeletedElementsMap = toBrandedType<NonDeletedSceneElementsMap>(\n    new Map(),\n  );\n  // ideally all elements within the scene should be wrapped around with `Ordered` type, but right now there is no real benefit doing so\n  private elements: readonly OrderedExcalidrawElement[] = [];\n  private nonDeletedFramesLikes: readonly NonDeleted<ExcalidrawFrameLikeElement>[] =\n    [];\n  private frames: readonly ExcalidrawFrameLikeElement[] = [];\n  private elementsMap = toBrandedType<SceneElementsMap>(new Map());\n  private selectedElementsCache: {\n    selectedElementIds: AppState[\"selectedElementIds\"] | null;\n    elements: readonly NonDeletedExcalidrawElement[] | null;\n    cache: Map<SelectionHash, NonDeletedExcalidrawElement[]>;\n  } = {\n    selectedElementIds: null,\n    elements: null,\n    cache: new Map(),\n  };\n  /**\n   * Random integer regenerated each scene update.\n   *\n   * Does not relate to elements versions, it's only a renderer\n   * cache-invalidation nonce at the moment.\n   */\n  private sceneNonce: number | undefined;\n\n  getSceneNonce() {\n    return this.sceneNonce;\n  }\n\n  getNonDeletedElementsMap() {\n    return this.nonDeletedElementsMap;\n  }\n\n  getElementsIncludingDeleted() {\n    return this.elements;\n  }\n\n  getElementsMapIncludingDeleted() {\n    return this.elementsMap;\n  }\n\n  getNonDeletedElements() {\n    return this.nonDeletedElements;\n  }\n\n  getFramesIncludingDeleted() {\n    return this.frames;\n  }\n\n  getSelectedElements(opts: {\n    // NOTE can be ommitted by making Scene constructor require App instance\n    selectedElementIds: AppState[\"selectedElementIds\"];\n    /**\n     * for specific cases where you need to use elements not from current\n     * scene state. This in effect will likely result in cache-miss, and\n     * the cache won't be updated in this case.\n     */\n    elements?: ElementsMapOrArray;\n    // selection-related options\n    includeBoundTextElement?: boolean;\n    includeElementsInFrames?: boolean;\n  }): NonDeleted<ExcalidrawElement>[] {\n    const hash = hashSelectionOpts(opts);\n\n    const elements = opts?.elements || this.nonDeletedElements;\n    if (\n      this.selectedElementsCache.elements === elements &&\n      this.selectedElementsCache.selectedElementIds === opts.selectedElementIds\n    ) {\n      const cached = this.selectedElementsCache.cache.get(hash);\n      if (cached) {\n        return cached;\n      }\n    } else if (opts?.elements == null) {\n      // if we're operating on latest scene elements and the cache is not\n      //  storing the latest elements, clear the cache\n      this.selectedElementsCache.cache.clear();\n    }\n\n    const selectedElements = getSelectedElements(\n      elements,\n      { selectedElementIds: opts.selectedElementIds },\n      opts,\n    );\n\n    // cache only if we're not using custom elements\n    if (opts?.elements == null) {\n      this.selectedElementsCache.selectedElementIds = opts.selectedElementIds;\n      this.selectedElementsCache.elements = this.nonDeletedElements;\n      this.selectedElementsCache.cache.set(hash, selectedElements);\n    }\n\n    return selectedElements;\n  }\n\n  getNonDeletedFramesLikes(): readonly NonDeleted<ExcalidrawFrameLikeElement>[] {\n    return this.nonDeletedFramesLikes;\n  }\n\n  getElement<T extends ExcalidrawElement>(id: T[\"id\"]): T | null {\n    return (this.elementsMap.get(id) as T | undefined) || null;\n  }\n\n  getNonDeletedElement(\n    id: ExcalidrawElement[\"id\"],\n  ): NonDeleted<ExcalidrawElement> | null {\n    const element = this.getElement(id);\n    if (element && isNonDeletedElement(element)) {\n      return element;\n    }\n    return null;\n  }\n\n  /**\n   * A utility method to help with updating all scene elements, with the added\n   * performance optimization of not renewing the array if no change is made.\n   *\n   * Maps all current excalidraw elements, invoking the callback for each\n   * element. The callback should either return a new mapped element, or the\n   * original element if no changes are made. If no changes are made to any\n   * element, this results in a no-op. Otherwise, the newly mapped elements\n   * are set as the next scene's elements.\n   *\n   * @returns whether a change was made\n   */\n  mapElements(\n    iteratee: (element: ExcalidrawElement) => ExcalidrawElement,\n  ): boolean {\n    let didChange = false;\n    const newElements = this.elements.map((element) => {\n      const nextElement = iteratee(element);\n      if (nextElement !== element) {\n        didChange = true;\n      }\n      return nextElement;\n    });\n    if (didChange) {\n      this.replaceAllElements(newElements);\n    }\n    return didChange;\n  }\n\n  replaceAllElements(nextElements: ElementsMapOrArray) {\n    const _nextElements =\n      // ts doesn't like `Array.isArray` of `instanceof Map`\n      nextElements instanceof Array\n        ? nextElements\n        : Array.from(nextElements.values());\n    const nextFrameLikes: ExcalidrawFrameLikeElement[] = [];\n\n    validateIndicesThrottled(_nextElements);\n\n    this.elements = syncInvalidIndices(_nextElements);\n    this.elementsMap.clear();\n    this.elements.forEach((element) => {\n      if (isFrameLikeElement(element)) {\n        nextFrameLikes.push(element);\n      }\n      this.elementsMap.set(element.id, element);\n      Scene.mapElementToScene(element, this);\n    });\n    const nonDeletedElements = getNonDeletedElements(this.elements);\n    this.nonDeletedElements = nonDeletedElements.elements;\n    this.nonDeletedElementsMap = nonDeletedElements.elementsMap;\n\n    this.frames = nextFrameLikes;\n    this.nonDeletedFramesLikes = getNonDeletedElements(this.frames).elements;\n\n    this.triggerUpdate();\n  }\n\n  triggerUpdate() {\n    this.sceneNonce = randomInteger();\n\n    for (const callback of Array.from(this.callbacks)) {\n      callback();\n    }\n  }\n\n  onUpdate(cb: SceneStateCallback): SceneStateCallbackRemover {\n    if (this.callbacks.has(cb)) {\n      throw new Error();\n    }\n\n    this.callbacks.add(cb);\n\n    return () => {\n      if (!this.callbacks.has(cb)) {\n        throw new Error();\n      }\n      this.callbacks.delete(cb);\n    };\n  }\n\n  destroy() {\n    this.elements = [];\n    this.nonDeletedElements = [];\n    this.nonDeletedFramesLikes = [];\n    this.frames = [];\n    this.elementsMap.clear();\n    this.selectedElementsCache.selectedElementIds = null;\n    this.selectedElementsCache.elements = null;\n    this.selectedElementsCache.cache.clear();\n\n    Scene.sceneMapById.forEach((scene, elementKey) => {\n      if (scene === this) {\n        Scene.sceneMapById.delete(elementKey);\n      }\n    });\n\n    // done not for memory leaks, but to guard against possible late fires\n    // (I guess?)\n    this.callbacks.clear();\n  }\n\n  insertElementAtIndex(element: ExcalidrawElement, index: number) {\n    if (!Number.isFinite(index) || index < 0) {\n      throw new Error(\n        \"insertElementAtIndex can only be called with index >= 0\",\n      );\n    }\n\n    const nextElements = [\n      ...this.elements.slice(0, index),\n      element,\n      ...this.elements.slice(index),\n    ];\n\n    syncMovedIndices(nextElements, arrayToMap([element]));\n\n    this.replaceAllElements(nextElements);\n  }\n\n  insertElementsAtIndex(elements: ExcalidrawElement[], index: number) {\n    if (!elements.length) {\n      return;\n    }\n\n    if (!Number.isFinite(index) || index < 0) {\n      throw new Error(\n        \"insertElementAtIndex can only be called with index >= 0\",\n      );\n    }\n\n    const nextElements = [\n      ...this.elements.slice(0, index),\n      ...elements,\n      ...this.elements.slice(index),\n    ];\n\n    syncMovedIndices(nextElements, arrayToMap(elements));\n\n    this.replaceAllElements(nextElements);\n  }\n\n  insertElement = (element: ExcalidrawElement) => {\n    const index = element.frameId\n      ? this.getElementIndex(element.frameId)\n      : this.elements.length;\n\n    this.insertElementAtIndex(element, index);\n  };\n\n  insertElements = (elements: ExcalidrawElement[]) => {\n    if (!elements.length) {\n      return;\n    }\n\n    const index = elements[0]?.frameId\n      ? this.getElementIndex(elements[0].frameId)\n      : this.elements.length;\n\n    this.insertElementsAtIndex(elements, index);\n  };\n\n  getElementIndex(elementId: string) {\n    return this.elements.findIndex((element) => element.id === elementId);\n  }\n\n  getContainerElement = (\n    element:\n      | (ExcalidrawElement & {\n          containerId: ExcalidrawElement[\"id\"] | null;\n        })\n      | null,\n  ) => {\n    if (!element) {\n      return null;\n    }\n    if (element.containerId) {\n      return this.getElement(element.containerId) || null;\n    }\n    return null;\n  };\n\n  getElementsFromId = (id: string): ExcalidrawElement[] => {\n    const elementsMap = this.getNonDeletedElementsMap();\n    // first check if the id is an element\n    const el = elementsMap.get(id);\n    if (el) {\n      return [el];\n    }\n\n    // then, check if the id is a group\n    return getElementsInGroup(elementsMap, id);\n  };\n}\n\nexport default Scene;\n", "import type {\n  AppClassProperties,\n  AppState,\n  InteractiveCanvasAppState,\n} from \"@excalidraw/excalidraw/types\";\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport { getBoundTextElement } from \"./textElement\";\n\nimport { makeNextSelectedElementIds, getSelectedElements } from \"./selection\";\n\nimport type {\n  GroupId,\n  ExcalidrawElement,\n  NonDeleted,\n  NonDeletedExcalidrawElement,\n  ElementsMapOrArray,\n  ElementsMap,\n} from \"./types\";\n\nexport const selectGroup = (\n  groupId: GroupId,\n  appState: InteractiveCanvasAppState,\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n): Pick<\n  InteractiveCanvasAppState,\n  \"selectedGroupIds\" | \"selectedElementIds\" | \"editingGroupId\"\n> => {\n  const elementsInGroup = elements.reduce(\n    (acc: Record<string, true>, element) => {\n      if (element.groupIds.includes(groupId)) {\n        acc[element.id] = true;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  if (Object.keys(elementsInGroup).length < 2) {\n    if (\n      appState.selectedGroupIds[groupId] ||\n      appState.editingGroupId === groupId\n    ) {\n      return {\n        selectedElementIds: appState.selectedElementIds,\n        selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: false },\n        editingGroupId: null,\n      };\n    }\n    return appState;\n  }\n\n  return {\n    editingGroupId: appState.editingGroupId,\n    selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: true },\n    selectedElementIds: {\n      ...appState.selectedElementIds,\n      ...elementsInGroup,\n    },\n  };\n};\n\nexport const selectGroupsForSelectedElements = (function () {\n  type SelectGroupsReturnType = Pick<\n    InteractiveCanvasAppState,\n    \"selectedGroupIds\" | \"editingGroupId\" | \"selectedElementIds\"\n  >;\n\n  let lastSelectedElements: readonly NonDeleted<ExcalidrawElement>[] | null =\n    null;\n  let lastElements: readonly NonDeleted<ExcalidrawElement>[] | null = null;\n  let lastReturnValue: SelectGroupsReturnType | null = null;\n\n  const _selectGroups = (\n    selectedElements: readonly NonDeleted<ExcalidrawElement>[],\n    elements: readonly NonDeleted<ExcalidrawElement>[],\n    appState: Pick<AppState, \"selectedElementIds\" | \"editingGroupId\">,\n    prevAppState: InteractiveCanvasAppState,\n  ): SelectGroupsReturnType => {\n    if (\n      lastReturnValue !== undefined &&\n      elements === lastElements &&\n      selectedElements === lastSelectedElements &&\n      appState.editingGroupId === lastReturnValue?.editingGroupId\n    ) {\n      return lastReturnValue;\n    }\n\n    const selectedGroupIds: Record<GroupId, boolean> = {};\n    // Gather all the groups withing selected elements\n    for (const selectedElement of selectedElements) {\n      let groupIds = selectedElement.groupIds;\n      if (appState.editingGroupId) {\n        // handle the case where a group is nested within a group\n        const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);\n        if (indexOfEditingGroup > -1) {\n          groupIds = groupIds.slice(0, indexOfEditingGroup);\n        }\n      }\n      if (groupIds.length > 0) {\n        const lastSelectedGroup = groupIds[groupIds.length - 1];\n        selectedGroupIds[lastSelectedGroup] = true;\n      }\n    }\n\n    // Gather all the elements within selected groups\n    const groupElementsIndex: Record<GroupId, string[]> = {};\n    const selectedElementIdsInGroups = elements.reduce(\n      (acc: Record<string, true>, element) => {\n        if (element.isDeleted) {\n          return acc;\n        }\n\n        const groupId = element.groupIds.find((id) => selectedGroupIds[id]);\n\n        if (groupId) {\n          acc[element.id] = true;\n\n          // Populate the index\n          if (!Array.isArray(groupElementsIndex[groupId])) {\n            groupElementsIndex[groupId] = [element.id];\n          } else {\n            groupElementsIndex[groupId].push(element.id);\n          }\n        }\n        return acc;\n      },\n      {},\n    );\n\n    for (const groupId of Object.keys(groupElementsIndex)) {\n      // If there is one element in the group, and the group is selected or it's being edited, it's not a group\n      if (groupElementsIndex[groupId].length < 2) {\n        if (selectedGroupIds[groupId]) {\n          selectedGroupIds[groupId] = false;\n        }\n      }\n    }\n\n    lastElements = elements;\n    lastSelectedElements = selectedElements;\n\n    lastReturnValue = {\n      editingGroupId: appState.editingGroupId,\n      selectedGroupIds,\n      selectedElementIds: makeNextSelectedElementIds(\n        {\n          ...appState.selectedElementIds,\n          ...selectedElementIdsInGroups,\n        },\n        prevAppState,\n      ),\n    };\n\n    return lastReturnValue;\n  };\n\n  /**\n   * When you select an element, you often want to actually select the whole group it's in, unless\n   * you're currently editing that group.\n   */\n  const selectGroupsForSelectedElements = (\n    appState: Pick<AppState, \"selectedElementIds\" | \"editingGroupId\">,\n    elements: readonly NonDeletedExcalidrawElement[],\n    prevAppState: InteractiveCanvasAppState,\n    /**\n     * supply null in cases where you don't have access to App instance and\n     * you don't care about optimizing selectElements retrieval\n     */\n    app: AppClassProperties | null,\n  ): Mutable<\n    Pick<\n      InteractiveCanvasAppState,\n      \"selectedGroupIds\" | \"editingGroupId\" | \"selectedElementIds\"\n    >\n  > => {\n    const selectedElements = app\n      ? app.scene.getSelectedElements({\n          selectedElementIds: appState.selectedElementIds,\n          // supplying elements explicitly in case we're passed non-state elements\n          elements,\n        })\n      : getSelectedElements(elements, appState);\n\n    if (!selectedElements.length) {\n      return {\n        selectedGroupIds: {},\n        editingGroupId: null,\n        selectedElementIds: makeNextSelectedElementIds(\n          appState.selectedElementIds,\n          prevAppState,\n        ),\n      };\n    }\n\n    return _selectGroups(selectedElements, elements, appState, prevAppState);\n  };\n\n  selectGroupsForSelectedElements.clearCache = () => {\n    lastElements = null;\n    lastSelectedElements = null;\n    lastReturnValue = null;\n  };\n\n  return selectGroupsForSelectedElements;\n})();\n\n/**\n * If the element's group is selected, don't render an individual\n * selection border around it.\n */\nexport const isSelectedViaGroup = (\n  appState: InteractiveCanvasAppState,\n  element: ExcalidrawElement,\n) => getSelectedGroupForElement(appState, element) != null;\n\nexport const getSelectedGroupForElement = (\n  appState: Pick<\n    InteractiveCanvasAppState,\n    \"editingGroupId\" | \"selectedGroupIds\"\n  >,\n  element: ExcalidrawElement,\n) =>\n  element.groupIds\n    .filter((groupId) => groupId !== appState.editingGroupId)\n    .find((groupId) => appState.selectedGroupIds[groupId]);\n\nexport const getSelectedGroupIds = (\n  appState: InteractiveCanvasAppState,\n): GroupId[] =>\n  Object.entries(appState.selectedGroupIds)\n    .filter(([groupId, isSelected]) => isSelected)\n    .map(([groupId, isSelected]) => groupId);\n\n// given a list of elements, return the the actual group ids that should be selected\n// or used to update the elements\nexport const selectGroupsFromGivenElements = (\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n  appState: InteractiveCanvasAppState,\n) => {\n  let nextAppState: InteractiveCanvasAppState = {\n    ...appState,\n    selectedGroupIds: {},\n  };\n\n  for (const element of elements) {\n    let groupIds = element.groupIds;\n    if (appState.editingGroupId) {\n      const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);\n      if (indexOfEditingGroup > -1) {\n        groupIds = groupIds.slice(0, indexOfEditingGroup);\n      }\n    }\n    if (groupIds.length > 0) {\n      const groupId = groupIds[groupIds.length - 1];\n      nextAppState = {\n        ...nextAppState,\n        ...selectGroup(groupId, nextAppState, elements),\n      };\n    }\n  }\n\n  return nextAppState.selectedGroupIds;\n};\n\nexport const editGroupForSelectedElement = (\n  appState: AppState,\n  element: NonDeleted<ExcalidrawElement>,\n): AppState => {\n  return {\n    ...appState,\n    editingGroupId: element.groupIds.length ? element.groupIds[0] : null,\n    selectedGroupIds: {},\n    selectedElementIds: {\n      [element.id]: true,\n    },\n  };\n};\n\nexport const isElementInGroup = (element: ExcalidrawElement, groupId: string) =>\n  element.groupIds.includes(groupId);\n\nexport const getElementsInGroup = (\n  elements: ElementsMapOrArray,\n  groupId: string,\n) => {\n  const elementsInGroup: ExcalidrawElement[] = [];\n  for (const element of elements.values()) {\n    if (isElementInGroup(element, groupId)) {\n      elementsInGroup.push(element);\n    }\n  }\n  return elementsInGroup;\n};\n\nexport const getSelectedGroupIdForElement = (\n  element: ExcalidrawElement,\n  selectedGroupIds: { [groupId: string]: boolean },\n) => element.groupIds.find((groupId) => selectedGroupIds[groupId]);\n\nexport const addToGroup = (\n  prevGroupIds: ExcalidrawElement[\"groupIds\"],\n  newGroupId: GroupId,\n  editingGroupId: AppState[\"editingGroupId\"],\n) => {\n  // insert before the editingGroupId, or push to the end.\n  const groupIds = [...prevGroupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const positionToInsert =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  groupIds.splice(positionToInsert, 0, newGroupId);\n  return groupIds;\n};\n\nexport const removeFromSelectedGroups = (\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  selectedGroupIds: { [groupId: string]: boolean },\n) => groupIds.filter((groupId) => !selectedGroupIds[groupId]);\n\nexport const getMaximumGroups = (\n  elements: ExcalidrawElement[],\n  elementsMap: ElementsMap,\n): ExcalidrawElement[][] => {\n  const groups: Map<String, ExcalidrawElement[]> = new Map<\n    String,\n    ExcalidrawElement[]\n  >();\n  elements.forEach((element: ExcalidrawElement) => {\n    const groupId =\n      element.groupIds.length === 0\n        ? element.id\n        : element.groupIds[element.groupIds.length - 1];\n\n    const currentGroupMembers = groups.get(groupId) || [];\n\n    // Include bound text if present when grouping\n    const boundTextElement = getBoundTextElement(element, elementsMap);\n    if (boundTextElement) {\n      currentGroupMembers.push(boundTextElement);\n    }\n    groups.set(groupId, [...currentGroupMembers, element]);\n  });\n\n  return Array.from(groups.values());\n};\n\nexport const getNonDeletedGroupIds = (elements: ElementsMap) => {\n  const nonDeletedGroupIds = new Set<string>();\n\n  for (const [, element] of elements) {\n    // defensive check\n    if (element.isDeleted) {\n      continue;\n    }\n\n    // defensive fallback\n    for (const groupId of element.groupIds ?? []) {\n      nonDeletedGroupIds.add(groupId);\n    }\n  }\n\n  return nonDeletedGroupIds;\n};\n\nexport const elementsAreInSameGroup = (\n  elements: readonly ExcalidrawElement[],\n) => {\n  const allGroups = elements.flatMap((element) => element.groupIds);\n  const groupCount = new Map<string, number>();\n  let maxGroup = 0;\n\n  for (const group of allGroups) {\n    groupCount.set(group, (groupCount.get(group) ?? 0) + 1);\n    if (groupCount.get(group)! > maxGroup) {\n      maxGroup = groupCount.get(group)!;\n    }\n  }\n\n  return maxGroup === elements.length;\n};\n\nexport const isInGroup = (element: NonDeletedExcalidrawElement) => {\n  return element.groupIds.length > 0;\n};\n\nexport const getNewGroupIdsForDuplication = (\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  editingGroupId: AppState[\"editingGroupId\"],\n  mapper: (groupId: GroupId) => GroupId,\n) => {\n  const copy = [...groupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const endIndex =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  for (let index = 0; index < endIndex; index++) {\n    copy[index] = mapper(copy[index]);\n  }\n\n  return copy;\n};\n", "import {\n  ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO,\n  ARROW_LABEL_WIDTH_FRACTION,\n  BOUND_TEXT_PADDING,\n  DEFAULT_FONT_SIZE,\n  TEXT_ALIGN,\n  VERTICAL_ALIGN,\n  getFontString,\n} from \"@excalidraw/common\";\n\nimport type { AppState } from \"@excalidraw/excalidraw/types\";\n\nimport type { ExtractSetType } from \"@excalidraw/common/utility-types\";\n\nimport {\n  resetOriginalContainerCache,\n  updateOriginalContainerCache,\n} from \"./containerCache\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { mutateElement } from \"./mutateElement\";\nimport { measureText } from \"./textMeasurements\";\nimport { wrapText } from \"./textWrapping\";\nimport {\n  isBoundToContainer,\n  isArrowElement,\n  isTextElement,\n} from \"./typeChecks\";\n\nimport type { MaybeTransformHandleType } from \"./transformHandles\";\nimport type {\n  ElementsMap,\n  ExcalidrawElement,\n  ExcalidrawElementType,\n  ExcalidrawTextContainer,\n  ExcalidrawTextElement,\n  ExcalidrawTextElementWithContainer,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\nexport const redrawTextBoundingBox = (\n  textElement: ExcalidrawTextElement,\n  container: ExcalidrawElement | null,\n  elementsMap: ElementsMap,\n  informMutation = true,\n) => {\n  let maxWidth = undefined;\n  const boundTextUpdates = {\n    x: textElement.x,\n    y: textElement.y,\n    text: textElement.text,\n    width: textElement.width,\n    height: textElement.height,\n    angle: container?.angle ?? textElement.angle,\n  };\n\n  boundTextUpdates.text = textElement.text;\n\n  if (container || !textElement.autoResize) {\n    maxWidth = container\n      ? getBoundTextMaxWidth(container, textElement)\n      : textElement.width;\n    boundTextUpdates.text = wrapText(\n      textElement.originalText,\n      getFontString(textElement),\n      maxWidth,\n    );\n  }\n\n  const metrics = measureText(\n    boundTextUpdates.text,\n    getFontString(textElement),\n    textElement.lineHeight,\n  );\n\n  // Note: only update width for unwrapped text and bound texts (which always have autoResize set to true)\n  if (textElement.autoResize) {\n    boundTextUpdates.width = metrics.width;\n  }\n  boundTextUpdates.height = metrics.height;\n\n  if (container) {\n    const maxContainerHeight = getBoundTextMaxHeight(\n      container,\n      textElement as ExcalidrawTextElementWithContainer,\n    );\n    const maxContainerWidth = getBoundTextMaxWidth(container, textElement);\n\n    if (!isArrowElement(container) && metrics.height > maxContainerHeight) {\n      const nextHeight = computeContainerDimensionForBoundText(\n        metrics.height,\n        container.type,\n      );\n      mutateElement(container, { height: nextHeight }, informMutation);\n      updateOriginalContainerCache(container.id, nextHeight);\n    }\n    if (metrics.width > maxContainerWidth) {\n      const nextWidth = computeContainerDimensionForBoundText(\n        metrics.width,\n        container.type,\n      );\n      mutateElement(container, { width: nextWidth }, informMutation);\n    }\n    const updatedTextElement = {\n      ...textElement,\n      ...boundTextUpdates,\n    } as ExcalidrawTextElementWithContainer;\n    const { x, y } = computeBoundTextPosition(\n      container,\n      updatedTextElement,\n      elementsMap,\n    );\n    boundTextUpdates.x = x;\n    boundTextUpdates.y = y;\n  }\n\n  mutateElement(textElement, boundTextUpdates, informMutation);\n};\n\nexport const handleBindTextResize = (\n  container: NonDeletedExcalidrawElement,\n  elementsMap: ElementsMap,\n  transformHandleType: MaybeTransformHandleType,\n  shouldMaintainAspectRatio = false,\n) => {\n  const boundTextElementId = getBoundTextElementId(container);\n  if (!boundTextElementId) {\n    return;\n  }\n  resetOriginalContainerCache(container.id);\n  const textElement = getBoundTextElement(container, elementsMap);\n  if (textElement && textElement.text) {\n    if (!container) {\n      return;\n    }\n\n    let text = textElement.text;\n    let nextHeight = textElement.height;\n    let nextWidth = textElement.width;\n    const maxWidth = getBoundTextMaxWidth(container, textElement);\n    const maxHeight = getBoundTextMaxHeight(container, textElement);\n    let containerHeight = container.height;\n    if (\n      shouldMaintainAspectRatio ||\n      (transformHandleType !== \"n\" && transformHandleType !== \"s\")\n    ) {\n      if (text) {\n        text = wrapText(\n          textElement.originalText,\n          getFontString(textElement),\n          maxWidth,\n        );\n      }\n      const metrics = measureText(\n        text,\n        getFontString(textElement),\n        textElement.lineHeight,\n      );\n      nextHeight = metrics.height;\n      nextWidth = metrics.width;\n    }\n    // increase height in case text element height exceeds\n    if (nextHeight > maxHeight) {\n      containerHeight = computeContainerDimensionForBoundText(\n        nextHeight,\n        container.type,\n      );\n\n      const diff = containerHeight - container.height;\n      // fix the y coord when resizing from ne/nw/n\n      const updatedY =\n        !isArrowElement(container) &&\n        (transformHandleType === \"ne\" ||\n          transformHandleType === \"nw\" ||\n          transformHandleType === \"n\")\n          ? container.y - diff\n          : container.y;\n      mutateElement(container, {\n        height: containerHeight,\n        y: updatedY,\n      });\n    }\n\n    mutateElement(textElement, {\n      text,\n      width: nextWidth,\n      height: nextHeight,\n    });\n\n    if (!isArrowElement(container)) {\n      mutateElement(\n        textElement,\n        computeBoundTextPosition(container, textElement, elementsMap),\n      );\n    }\n  }\n};\n\nexport const computeBoundTextPosition = (\n  container: ExcalidrawElement,\n  boundTextElement: ExcalidrawTextElementWithContainer,\n  elementsMap: ElementsMap,\n) => {\n  if (isArrowElement(container)) {\n    return LinearElementEditor.getBoundTextElementPosition(\n      container,\n      boundTextElement,\n      elementsMap,\n    );\n  }\n  const containerCoords = getContainerCoords(container);\n  const maxContainerHeight = getBoundTextMaxHeight(container, boundTextElement);\n  const maxContainerWidth = getBoundTextMaxWidth(container, boundTextElement);\n\n  let x;\n  let y;\n  if (boundTextElement.verticalAlign === VERTICAL_ALIGN.TOP) {\n    y = containerCoords.y;\n  } else if (boundTextElement.verticalAlign === VERTICAL_ALIGN.BOTTOM) {\n    y = containerCoords.y + (maxContainerHeight - boundTextElement.height);\n  } else {\n    y =\n      containerCoords.y +\n      (maxContainerHeight / 2 - boundTextElement.height / 2);\n  }\n  if (boundTextElement.textAlign === TEXT_ALIGN.LEFT) {\n    x = containerCoords.x;\n  } else if (boundTextElement.textAlign === TEXT_ALIGN.RIGHT) {\n    x = containerCoords.x + (maxContainerWidth - boundTextElement.width);\n  } else {\n    x =\n      containerCoords.x + (maxContainerWidth / 2 - boundTextElement.width / 2);\n  }\n  return { x, y };\n};\n\nexport const getBoundTextElementId = (container: ExcalidrawElement | null) => {\n  return container?.boundElements?.length\n    ? container?.boundElements?.find((ele) => ele.type === \"text\")?.id || null\n    : null;\n};\n\nexport const getBoundTextElement = (\n  element: ExcalidrawElement | null,\n  elementsMap: ElementsMap,\n) => {\n  if (!element) {\n    return null;\n  }\n  const boundTextElementId = getBoundTextElementId(element);\n\n  if (boundTextElementId) {\n    return (elementsMap.get(boundTextElementId) ||\n      null) as ExcalidrawTextElementWithContainer | null;\n  }\n  return null;\n};\n\nexport const getContainerElement = (\n  element: ExcalidrawTextElement | null,\n  elementsMap: ElementsMap,\n): ExcalidrawTextContainer | null => {\n  if (!element) {\n    return null;\n  }\n  if (element.containerId) {\n    return (elementsMap.get(element.containerId) ||\n      null) as ExcalidrawTextContainer | null;\n  }\n  return null;\n};\n\nexport const getContainerCenter = (\n  container: ExcalidrawElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  if (!isArrowElement(container)) {\n    return {\n      x: container.x + container.width / 2,\n      y: container.y + container.height / 2,\n    };\n  }\n  const points = LinearElementEditor.getPointsGlobalCoordinates(\n    container,\n    elementsMap,\n  );\n  if (points.length % 2 === 1) {\n    const index = Math.floor(container.points.length / 2);\n    const midPoint = LinearElementEditor.getPointGlobalCoordinates(\n      container,\n      container.points[index],\n      elementsMap,\n    );\n    return { x: midPoint[0], y: midPoint[1] };\n  }\n  const index = container.points.length / 2 - 1;\n  let midSegmentMidpoint = LinearElementEditor.getEditorMidPoints(\n    container,\n    elementsMap,\n    appState,\n  )[index];\n  if (!midSegmentMidpoint) {\n    midSegmentMidpoint = LinearElementEditor.getSegmentMidPoint(\n      container,\n      points[index],\n      points[index + 1],\n      index + 1,\n      elementsMap,\n    );\n  }\n  return { x: midSegmentMidpoint[0], y: midSegmentMidpoint[1] };\n};\n\nexport const getContainerCoords = (container: NonDeletedExcalidrawElement) => {\n  let offsetX = BOUND_TEXT_PADDING;\n  let offsetY = BOUND_TEXT_PADDING;\n\n  if (container.type === \"ellipse\") {\n    // The derivation of coordinates is explained in https://github.com/excalidraw/excalidraw/pull/6172\n    offsetX += (container.width / 2) * (1 - Math.sqrt(2) / 2);\n    offsetY += (container.height / 2) * (1 - Math.sqrt(2) / 2);\n  }\n  // The derivation of coordinates is explained in https://github.com/excalidraw/excalidraw/pull/6265\n  if (container.type === \"diamond\") {\n    offsetX += container.width / 4;\n    offsetY += container.height / 4;\n  }\n  return {\n    x: container.x + offsetX,\n    y: container.y + offsetY,\n  };\n};\n\nexport const getTextElementAngle = (\n  textElement: ExcalidrawTextElement,\n  container: ExcalidrawTextContainer | null,\n) => {\n  if (!container || isArrowElement(container)) {\n    return textElement.angle;\n  }\n  return container.angle;\n};\n\nexport const getBoundTextElementPosition = (\n  container: ExcalidrawElement,\n  boundTextElement: ExcalidrawTextElementWithContainer,\n  elementsMap: ElementsMap,\n) => {\n  if (isArrowElement(container)) {\n    return LinearElementEditor.getBoundTextElementPosition(\n      container,\n      boundTextElement,\n      elementsMap,\n    );\n  }\n};\n\nexport const shouldAllowVerticalAlign = (\n  selectedElements: NonDeletedExcalidrawElement[],\n  elementsMap: ElementsMap,\n) => {\n  return selectedElements.some((element) => {\n    if (isBoundToContainer(element)) {\n      const container = getContainerElement(element, elementsMap);\n      if (isArrowElement(container)) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  });\n};\n\nexport const suppportsHorizontalAlign = (\n  selectedElements: NonDeletedExcalidrawElement[],\n  elementsMap: ElementsMap,\n) => {\n  return selectedElements.some((element) => {\n    if (isBoundToContainer(element)) {\n      const container = getContainerElement(element, elementsMap);\n      if (isArrowElement(container)) {\n        return false;\n      }\n      return true;\n    }\n\n    return isTextElement(element);\n  });\n};\n\nconst VALID_CONTAINER_TYPES = new Set([\n  \"rectangle\",\n  \"ellipse\",\n  \"diamond\",\n  \"arrow\",\n]);\n\nexport const isValidTextContainer = (element: {\n  type: ExcalidrawElementType;\n}) => VALID_CONTAINER_TYPES.has(element.type);\n\nexport const computeContainerDimensionForBoundText = (\n  dimension: number,\n  containerType: ExtractSetType<typeof VALID_CONTAINER_TYPES>,\n) => {\n  dimension = Math.ceil(dimension);\n  const padding = BOUND_TEXT_PADDING * 2;\n\n  if (containerType === \"ellipse\") {\n    return Math.round(((dimension + padding) / Math.sqrt(2)) * 2);\n  }\n  if (containerType === \"arrow\") {\n    return dimension + padding * 8;\n  }\n  if (containerType === \"diamond\") {\n    return 2 * (dimension + padding);\n  }\n  return dimension + padding;\n};\n\nexport const getBoundTextMaxWidth = (\n  container: ExcalidrawElement,\n  boundTextElement: ExcalidrawTextElement | null,\n) => {\n  const { width } = container;\n  if (isArrowElement(container)) {\n    const minWidth =\n      (boundTextElement?.fontSize ?? DEFAULT_FONT_SIZE) *\n      ARROW_LABEL_FONT_SIZE_TO_MIN_WIDTH_RATIO;\n    return Math.max(ARROW_LABEL_WIDTH_FRACTION * width, minWidth);\n  }\n  if (container.type === \"ellipse\") {\n    // The width of the largest rectangle inscribed inside an ellipse is\n    // Math.round((ellipse.width / 2) * Math.sqrt(2)) which is derived from\n    // equation of an ellipse -https://github.com/excalidraw/excalidraw/pull/6172\n    return Math.round((width / 2) * Math.sqrt(2)) - BOUND_TEXT_PADDING * 2;\n  }\n  if (container.type === \"diamond\") {\n    // The width of the largest rectangle inscribed inside a rhombus is\n    // Math.round(width / 2) - https://github.com/excalidraw/excalidraw/pull/6265\n    return Math.round(width / 2) - BOUND_TEXT_PADDING * 2;\n  }\n  return width - BOUND_TEXT_PADDING * 2;\n};\n\nexport const getBoundTextMaxHeight = (\n  container: ExcalidrawElement,\n  boundTextElement: ExcalidrawTextElementWithContainer,\n) => {\n  const { height } = container;\n  if (isArrowElement(container)) {\n    const containerHeight = height - BOUND_TEXT_PADDING * 8 * 2;\n    if (containerHeight <= 0) {\n      return boundTextElement.height;\n    }\n    return height;\n  }\n  if (container.type === \"ellipse\") {\n    // The height of the largest rectangle inscribed inside an ellipse is\n    // Math.round((ellipse.height / 2) * Math.sqrt(2)) which is derived from\n    // equation of an ellipse - https://github.com/excalidraw/excalidraw/pull/6172\n    return Math.round((height / 2) * Math.sqrt(2)) - BOUND_TEXT_PADDING * 2;\n  }\n  if (container.type === \"diamond\") {\n    // The height of the largest rectangle inscribed inside a rhombus is\n    // Math.round(height / 2) - https://github.com/excalidraw/excalidraw/pull/6265\n    return Math.round(height / 2) - BOUND_TEXT_PADDING * 2;\n  }\n  return height - BOUND_TEXT_PADDING * 2;\n};\n\n/** retrieves text from text elements and concatenates to a single string */\nexport const getTextFromElements = (\n  elements: readonly ExcalidrawElement[],\n  separator = \"\\n\\n\",\n) => {\n  const text = elements\n    .reduce((acc: string[], element) => {\n      if (isTextElement(element)) {\n        acc.push(element.text);\n      }\n      return acc;\n    }, [])\n    .join(separator);\n  return text;\n};\n", "import type { ExcalidrawTextContainer } from \"./types\";\n\nexport const originalContainerCache: {\n  [id: ExcalidrawTextContainer[\"id\"]]:\n    | {\n        height: ExcalidrawTextContainer[\"height\"];\n      }\n    | undefined;\n} = {};\n\nexport const updateOriginalContainerCache = (\n  id: ExcalidrawTextContainer[\"id\"],\n  height: ExcalidrawTextContainer[\"height\"],\n) => {\n  const data =\n    originalContainerCache[id] || (originalContainerCache[id] = { height });\n  data.height = height;\n  return data;\n};\n\nexport const resetOriginalContainerCache = (\n  id: ExcalidrawTextContainer[\"id\"],\n) => {\n  if (originalContainerCache[id]) {\n    delete originalContainerCache[id];\n  }\n};\n\nexport const getOriginalContainerHeightFromCache = (\n  id: ExcalidrawTextContainer[\"id\"],\n) => {\n  return originalContainerCache[id]?.height ?? null;\n};\n", "import {\n  getSizeFromPoints,\n  randomInteger,\n  getUpdatedTimestamp,\n  toBrandedType,\n} from \"@excalidraw/common\";\n\n// TODO: remove direct dependency on the scene, should be passed in or injected instead\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport Scene from \"@excalidraw/excalidraw/scene/Scene\";\n\nimport type { Radians } from \"@excalidraw/math\";\n\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport { ShapeCache } from \"./ShapeCache\";\n\nimport { updateElbowArrowPoints } from \"./elbowArrow\";\nimport { isElbowArrow } from \"./typeChecks\";\n\nimport type { ExcalidrawElement, NonDeletedSceneElementsMap } from \"./types\";\n\nexport type ElementUpdate<TElement extends ExcalidrawElement> = Omit<\n  Partial<TElement>,\n  \"id\" | \"version\" | \"versionNonce\" | \"updated\"\n>;\n\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport const mutateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n  informMutation = true,\n  options?: {\n    // Currently only for elbow arrows.\n    // If true, the elbow arrow tries to bind to the nearest element. If false\n    // it tries to keep the same bound element, if any.\n    isDragging?: boolean;\n  },\n): TElement => {\n  let didChange = false;\n\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const { points, fixedSegments, fileId, startBinding, endBinding } =\n    updates as any;\n\n  if (\n    isElbowArrow(element) &&\n    (Object.keys(updates).length === 0 || // normalization case\n      typeof points !== \"undefined\" || // repositioning\n      typeof fixedSegments !== \"undefined\" || // segment fixing\n      typeof startBinding !== \"undefined\" ||\n      typeof endBinding !== \"undefined\") // manual binding to element\n  ) {\n    const elementsMap = toBrandedType<NonDeletedSceneElementsMap>(\n      Scene.getScene(element)?.getNonDeletedElementsMap() ?? new Map(),\n    );\n\n    updates = {\n      ...updates,\n      angle: 0 as Radians,\n      ...updateElbowArrowPoints(\n        {\n          ...element,\n          x: updates.x || element.x,\n          y: updates.y || element.y,\n        },\n        elementsMap,\n        {\n          fixedSegments,\n          points,\n          startBinding,\n          endBinding,\n        },\n        {\n          isDragging: options?.isDragging,\n        },\n      ),\n    };\n  } else if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points), ...updates };\n  }\n\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update because its attrs could have changed\n        // (except for specific keys we handle below)\n        (typeof value !== \"object\" ||\n          value === null ||\n          key === \"groupIds\" ||\n          key === \"scale\")\n      ) {\n        continue;\n      }\n\n      if (key === \"scale\") {\n        const prevScale = (element as any)[key];\n        const nextScale = value;\n        if (prevScale[0] === nextScale[0] && prevScale[1] === nextScale[1]) {\n          continue;\n        }\n      } else if (key === \"points\") {\n        const prevPoints = (element as any)[key];\n        const nextPoints = value;\n        if (prevPoints.length === nextPoints.length) {\n          let didChangePoints = false;\n          let index = prevPoints.length;\n          while (--index) {\n            const prevPoint = prevPoints[index];\n            const nextPoint = nextPoints[index];\n            if (\n              prevPoint[0] !== nextPoint[0] ||\n              prevPoint[1] !== nextPoint[1]\n            ) {\n              didChangePoints = true;\n              break;\n            }\n          }\n          if (!didChangePoints) {\n            continue;\n          }\n        }\n      }\n\n      (element as any)[key] = value;\n      didChange = true;\n    }\n  }\n\n  if (!didChange) {\n    return element;\n  }\n\n  if (\n    typeof updates.height !== \"undefined\" ||\n    typeof updates.width !== \"undefined\" ||\n    typeof fileId != \"undefined\" ||\n    typeof points !== \"undefined\"\n  ) {\n    ShapeCache.delete(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n  element.updated = getUpdatedTimestamp();\n\n  if (informMutation) {\n    Scene.getScene(element)?.triggerUpdate();\n  }\n\n  return element;\n};\n\nexport const newElementWith = <TElement extends ExcalidrawElement>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n  /** pass `true` to always regenerate */\n  force = false,\n): TElement => {\n  let didChange = false;\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update because its attrs could have changed\n        (typeof value !== \"object\" || value === null)\n      ) {\n        continue;\n      }\n      didChange = true;\n    }\n  }\n\n  if (!didChange && !force) {\n    return element;\n  }\n\n  return {\n    ...element,\n    ...updates,\n    updated: getUpdatedTimestamp(),\n    version: element.version + 1,\n    versionNonce: randomInteger(),\n  };\n};\n\n/**\n * Mutates element, bumping `version`, `versionNonce`, and `updated`.\n *\n * NOTE: does not trigger re-render.\n */\nexport const bumpVersion = <T extends Mutable<ExcalidrawElement>>(\n  element: T,\n  version?: ExcalidrawElement[\"version\"],\n) => {\n  element.version = (version ?? element.version) + 1;\n  element.versionNonce = randomInteger();\n  element.updated = getUpdatedTimestamp();\n  return element;\n};\n", "import {\n  clamp,\n  pointDistance,\n  pointFrom,\n  pointScaleFromOrigin,\n  pointsEqual,\n  pointTranslate,\n  vector,\n  vectorCross,\n  vectorFromPoint,\n  vectorScale,\n  type GlobalPoint,\n  type LocalPoint,\n} from \"@excalidraw/math\";\n\nimport {\n  BinaryHeap,\n  invariant,\n  isAnyTrue,\n  tupleToCoors,\n  getSizeFromPoints,\n  isDevEnv,\n} from \"@excalidraw/common\";\n\nimport type { AppState } from \"@excalidraw/excalidraw/types\";\n\nimport {\n  bindPointToSnapToElementOutline,\n  FIXED_BINDING_DISTANCE,\n  getHeadingForElbowArrowSnap,\n  getGlobalFixedPointForBindableElement,\n  snapToMid,\n  getHoveredElementForBinding,\n} from \"./binding\";\nimport { distanceToBindableElement } from \"./distance\";\nimport {\n  compareHeading,\n  flipHeading,\n  HEADING_DOWN,\n  HEADING_LEFT,\n  HEADING_RIGHT,\n  HEADING_UP,\n  headingForPointIsHorizontal,\n  headingIsHorizontal,\n  vectorToHeading,\n  headingForPoint,\n} from \"./heading\";\nimport { type ElementUpdate } from \"./mutateElement\";\nimport { isBindableElement } from \"./typeChecks\";\nimport {\n  type ExcalidrawElbowArrowElement,\n  type NonDeletedSceneElementsMap,\n  type SceneElementsMap,\n} from \"./types\";\n\nimport { aabbForElement, pointInsideBounds } from \"./shapes\";\n\nimport type { Bounds } from \"./bounds\";\nimport type { Heading } from \"./heading\";\nimport type {\n  Arrowhead,\n  ElementsMap,\n  ExcalidrawBindableElement,\n  FixedPointBinding,\n  FixedSegment,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\ntype GridAddress = [number, number] & { _brand: \"gridaddress\" };\n\ntype Node = {\n  f: number;\n  g: number;\n  h: number;\n  closed: boolean;\n  visited: boolean;\n  parent: Node | null;\n  pos: GlobalPoint;\n  addr: GridAddress;\n};\n\ntype Grid = {\n  row: number;\n  col: number;\n  data: (Node | null)[];\n};\n\ntype ElbowArrowState = {\n  x: number;\n  y: number;\n  startBinding: FixedPointBinding | null;\n  endBinding: FixedPointBinding | null;\n  startArrowhead: Arrowhead | null;\n  endArrowhead: Arrowhead | null;\n};\n\ntype ElbowArrowData = {\n  dynamicAABBs: Bounds[];\n  startDonglePosition: GlobalPoint | null;\n  startGlobalPoint: GlobalPoint;\n  startHeading: Heading;\n  endDonglePosition: GlobalPoint | null;\n  endGlobalPoint: GlobalPoint;\n  endHeading: Heading;\n  commonBounds: Bounds;\n  hoveredStartElement: ExcalidrawBindableElement | null;\n  hoveredEndElement: ExcalidrawBindableElement | null;\n};\n\nconst DEDUP_TRESHOLD = 1;\nexport const BASE_PADDING = 40;\n\nconst handleSegmentRenormalization = (\n  arrow: ExcalidrawElbowArrowElement,\n  elementsMap: NonDeletedSceneElementsMap,\n) => {\n  const nextFixedSegments: FixedSegment[] | null = arrow.fixedSegments\n    ? arrow.fixedSegments.slice()\n    : null;\n\n  if (nextFixedSegments) {\n    const _nextPoints: GlobalPoint[] = [];\n\n    arrow.points\n      .map((p) => pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1]))\n      .forEach((p, i, points) => {\n        if (i < 2) {\n          return _nextPoints.push(p);\n        }\n\n        const currentSegmentIsHorizontal = headingForPoint(p, points[i - 1]);\n        const prevSegmentIsHorizontal = headingForPoint(\n          points[i - 1],\n          points[i - 2],\n        );\n\n        if (\n          // Check if previous two points are on the same line\n          compareHeading(currentSegmentIsHorizontal, prevSegmentIsHorizontal)\n        ) {\n          const prevSegmentIdx =\n            nextFixedSegments?.findIndex(\n              (segment) => segment.index === i - 1,\n            ) ?? -1;\n          const segmentIdx =\n            nextFixedSegments?.findIndex((segment) => segment.index === i) ??\n            -1;\n\n          // If the current segment is a fixed segment, update its start point\n          if (segmentIdx !== -1) {\n            nextFixedSegments[segmentIdx].start = pointFrom<LocalPoint>(\n              points[i - 2][0] - arrow.x,\n              points[i - 2][1] - arrow.y,\n            );\n          }\n\n          // Remove the fixed segment status from the previous segment if it is\n          // a fixed segment, because we are going to unify that segment with\n          // the current one\n          if (prevSegmentIdx !== -1) {\n            nextFixedSegments.splice(prevSegmentIdx, 1);\n          }\n\n          // Remove the duplicate point\n          _nextPoints.splice(-1, 1);\n\n          // Update fixed point indices\n          nextFixedSegments.forEach((segment) => {\n            if (segment.index > i - 1) {\n              segment.index -= 1;\n            }\n          });\n        }\n\n        return _nextPoints.push(p);\n      });\n\n    const nextPoints: GlobalPoint[] = [];\n\n    _nextPoints.forEach((p, i, points) => {\n      if (i < 3) {\n        return nextPoints.push(p);\n      }\n\n      if (\n        // Remove segments that are too short\n        pointDistance(points[i - 2], points[i - 1]) < DEDUP_TRESHOLD\n      ) {\n        const prevPrevSegmentIdx =\n          nextFixedSegments?.findIndex((segment) => segment.index === i - 2) ??\n          -1;\n        const prevSegmentIdx =\n          nextFixedSegments?.findIndex((segment) => segment.index === i - 1) ??\n          -1;\n\n        // Remove the previous fixed segment if it exists (i.e. the segment\n        // which will be removed due to being parallel or too short)\n        if (prevSegmentIdx !== -1) {\n          nextFixedSegments.splice(prevSegmentIdx, 1);\n        }\n\n        // Remove the fixed segment status from the segment 2 steps back\n        // if it is a fixed segment, because we are going to unify that\n        // segment with the current one\n        if (prevPrevSegmentIdx !== -1) {\n          nextFixedSegments.splice(prevPrevSegmentIdx, 1);\n        }\n\n        nextPoints.splice(-2, 2);\n\n        // Since we have to remove two segments, update any fixed segment\n        nextFixedSegments.forEach((segment) => {\n          if (segment.index > i - 2) {\n            segment.index -= 2;\n          }\n        });\n\n        // Remove aligned segment points\n        const isHorizontal = headingForPointIsHorizontal(p, points[i - 1]);\n\n        return nextPoints.push(\n          pointFrom<GlobalPoint>(\n            !isHorizontal ? points[i - 2][0] : p[0],\n            isHorizontal ? points[i - 2][1] : p[1],\n          ),\n        );\n      }\n\n      nextPoints.push(p);\n    });\n\n    const filteredNextFixedSegments = nextFixedSegments.filter(\n      (segment) =>\n        segment.index !== 1 && segment.index !== nextPoints.length - 1,\n    );\n    if (filteredNextFixedSegments.length === 0) {\n      return normalizeArrowElementUpdate(\n        getElbowArrowCornerPoints(\n          removeElbowArrowShortSegments(\n            routeElbowArrow(\n              arrow,\n              getElbowArrowData(\n                arrow,\n                elementsMap,\n                nextPoints.map((p) =>\n                  pointFrom<LocalPoint>(p[0] - arrow.x, p[1] - arrow.y),\n                ),\n              ),\n            ) ?? [],\n          ),\n        ),\n        filteredNextFixedSegments,\n        null,\n        null,\n      );\n    }\n\n    isDevEnv() &&\n      invariant(\n        validateElbowPoints(nextPoints),\n        \"Invalid elbow points with fixed segments\",\n      );\n\n    return normalizeArrowElementUpdate(\n      nextPoints,\n      filteredNextFixedSegments,\n      arrow.startIsSpecial,\n      arrow.endIsSpecial,\n    );\n  }\n\n  return {\n    x: arrow.x,\n    y: arrow.y,\n    points: arrow.points,\n    fixedSegments: arrow.fixedSegments,\n    startIsSpecial: arrow.startIsSpecial,\n    endIsSpecial: arrow.endIsSpecial,\n  };\n};\n\nconst handleSegmentRelease = (\n  arrow: ExcalidrawElbowArrowElement,\n  fixedSegments: readonly FixedSegment[],\n  elementsMap: NonDeletedSceneElementsMap,\n) => {\n  const newFixedSegmentIndices = fixedSegments.map((segment) => segment.index);\n  const oldFixedSegmentIndices =\n    arrow.fixedSegments?.map((segment) => segment.index) ?? [];\n  const deletedSegmentIdx = oldFixedSegmentIndices.findIndex(\n    (idx) => !newFixedSegmentIndices.includes(idx),\n  );\n\n  if (deletedSegmentIdx === -1 || !arrow.fixedSegments?.[deletedSegmentIdx]) {\n    return {\n      points: arrow.points,\n    };\n  }\n\n  const deletedIdx = arrow.fixedSegments[deletedSegmentIdx].index;\n\n  // Find prev and next fixed segments\n  const prevSegment = arrow.fixedSegments[deletedSegmentIdx - 1];\n  const nextSegment = arrow.fixedSegments[deletedSegmentIdx + 1];\n\n  // We need to render a sub-arrow path to restore deleted segments\n  const x = arrow.x + (prevSegment ? prevSegment.end[0] : 0);\n  const y = arrow.y + (prevSegment ? prevSegment.end[1] : 0);\n  const startBinding = prevSegment ? null : arrow.startBinding;\n  const endBinding = nextSegment ? null : arrow.endBinding;\n  const {\n    startHeading,\n    endHeading,\n    startGlobalPoint,\n    endGlobalPoint,\n    hoveredStartElement,\n    hoveredEndElement,\n    ...rest\n  } = getElbowArrowData(\n    {\n      x,\n      y,\n      startBinding,\n      endBinding,\n      startArrowhead: null,\n      endArrowhead: null,\n      points: arrow.points,\n    },\n    elementsMap,\n    [\n      pointFrom<LocalPoint>(0, 0),\n      pointFrom<LocalPoint>(\n        arrow.x +\n          (nextSegment?.start[0] ?? arrow.points[arrow.points.length - 1][0]) -\n          x,\n        arrow.y +\n          (nextSegment?.start[1] ?? arrow.points[arrow.points.length - 1][1]) -\n          y,\n      ),\n    ],\n    { isDragging: false },\n  );\n\n  const { points: restoredPoints } = normalizeArrowElementUpdate(\n    getElbowArrowCornerPoints(\n      removeElbowArrowShortSegments(\n        routeElbowArrow(arrow, {\n          startHeading,\n          endHeading,\n          startGlobalPoint,\n          endGlobalPoint,\n          hoveredStartElement,\n          hoveredEndElement,\n          ...rest,\n        }) ?? [],\n      ),\n    ),\n    fixedSegments,\n    null,\n    null,\n  );\n\n  const nextPoints: GlobalPoint[] = [];\n\n  // First part of the arrow are the old points\n  if (prevSegment) {\n    for (let i = 0; i < prevSegment.index; i++) {\n      nextPoints.push(\n        pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[i][0],\n          arrow.y + arrow.points[i][1],\n        ),\n      );\n    }\n  }\n\n  restoredPoints.forEach((p) => {\n    nextPoints.push(\n      pointFrom<GlobalPoint>(\n        arrow.x + (prevSegment ? prevSegment.end[0] : 0) + p[0],\n        arrow.y + (prevSegment ? prevSegment.end[1] : 0) + p[1],\n      ),\n    );\n  });\n\n  // Last part of the arrow are the old points too\n  if (nextSegment) {\n    for (let i = nextSegment.index; i < arrow.points.length; i++) {\n      nextPoints.push(\n        pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[i][0],\n          arrow.y + arrow.points[i][1],\n        ),\n      );\n    }\n  }\n\n  // Update nextFixedSegments\n  const originalSegmentCountDiff =\n    (nextSegment?.index ?? arrow.points.length) - (prevSegment?.index ?? 0) - 1;\n\n  const nextFixedSegments = fixedSegments.map((segment) => {\n    if (segment.index > deletedIdx) {\n      return {\n        ...segment,\n        index:\n          segment.index -\n          originalSegmentCountDiff +\n          (restoredPoints.length - 1),\n      };\n    }\n\n    return segment;\n  });\n\n  const simplifiedPoints = nextPoints.flatMap((p, i) => {\n    const prev = nextPoints[i - 1];\n    const next = nextPoints[i + 1];\n\n    if (prev && next) {\n      const prevHeading = headingForPoint(p, prev);\n      const nextHeading = headingForPoint(next, p);\n\n      if (compareHeading(prevHeading, nextHeading)) {\n        // Update subsequent fixed segment indices\n        nextFixedSegments.forEach((segment) => {\n          if (segment.index > i) {\n            segment.index -= 1;\n          }\n        });\n\n        return [];\n      } else if (compareHeading(prevHeading, flipHeading(nextHeading))) {\n        // Update subsequent fixed segment indices\n        nextFixedSegments.forEach((segment) => {\n          if (segment.index > i) {\n            segment.index += 1;\n          }\n        });\n\n        return [p, p];\n      }\n    }\n\n    return [p];\n  });\n\n  return normalizeArrowElementUpdate(\n    simplifiedPoints,\n    nextFixedSegments,\n    false,\n    false,\n  );\n};\n\n/**\n *\n */\nconst handleSegmentMove = (\n  arrow: ExcalidrawElbowArrowElement,\n  fixedSegments: readonly FixedSegment[],\n  startHeading: Heading,\n  endHeading: Heading,\n  hoveredStartElement: ExcalidrawBindableElement | null,\n  hoveredEndElement: ExcalidrawBindableElement | null,\n): ElementUpdate<ExcalidrawElbowArrowElement> => {\n  const activelyModifiedSegmentIdx = fixedSegments\n    .map((segment, i) => {\n      if (\n        arrow.fixedSegments == null ||\n        arrow.fixedSegments[i] === undefined ||\n        arrow.fixedSegments[i].index !== segment.index\n      ) {\n        return i;\n      }\n\n      return (segment.start[0] !== arrow.fixedSegments![i].start[0] &&\n        segment.end[0] !== arrow.fixedSegments![i].end[0]) !==\n        (segment.start[1] !== arrow.fixedSegments![i].start[1] &&\n          segment.end[1] !== arrow.fixedSegments![i].end[1])\n        ? i\n        : null;\n    })\n    .filter((idx) => idx !== null)\n    .shift();\n\n  if (activelyModifiedSegmentIdx == null) {\n    return { points: arrow.points };\n  }\n\n  const firstSegmentIdx =\n    arrow.fixedSegments?.findIndex((segment) => segment.index === 1) ?? -1;\n  const lastSegmentIdx =\n    arrow.fixedSegments?.findIndex(\n      (segment) => segment.index === arrow.points.length - 1,\n    ) ?? -1;\n\n  // Handle special case for first segment move\n  const segmentLength = pointDistance(\n    fixedSegments[activelyModifiedSegmentIdx].start,\n    fixedSegments[activelyModifiedSegmentIdx].end,\n  );\n  const segmentIsTooShort = segmentLength < BASE_PADDING + 5;\n  if (\n    firstSegmentIdx === -1 &&\n    fixedSegments[activelyModifiedSegmentIdx].index === 1 &&\n    hoveredStartElement\n  ) {\n    const startIsHorizontal = headingIsHorizontal(startHeading);\n    const startIsPositive = startIsHorizontal\n      ? compareHeading(startHeading, HEADING_RIGHT)\n      : compareHeading(startHeading, HEADING_DOWN);\n    const padding = startIsPositive\n      ? segmentIsTooShort\n        ? segmentLength / 2\n        : BASE_PADDING\n      : segmentIsTooShort\n      ? -segmentLength / 2\n      : -BASE_PADDING;\n    fixedSegments[activelyModifiedSegmentIdx].start = pointFrom<LocalPoint>(\n      fixedSegments[activelyModifiedSegmentIdx].start[0] +\n        (startIsHorizontal ? padding : 0),\n      fixedSegments[activelyModifiedSegmentIdx].start[1] +\n        (!startIsHorizontal ? padding : 0),\n    );\n  }\n\n  // Handle special case for last segment move\n  if (\n    lastSegmentIdx === -1 &&\n    fixedSegments[activelyModifiedSegmentIdx].index ===\n      arrow.points.length - 1 &&\n    hoveredEndElement\n  ) {\n    const endIsHorizontal = headingIsHorizontal(endHeading);\n    const endIsPositive = endIsHorizontal\n      ? compareHeading(endHeading, HEADING_RIGHT)\n      : compareHeading(endHeading, HEADING_DOWN);\n    const padding = endIsPositive\n      ? segmentIsTooShort\n        ? segmentLength / 2\n        : BASE_PADDING\n      : segmentIsTooShort\n      ? -segmentLength / 2\n      : -BASE_PADDING;\n    fixedSegments[activelyModifiedSegmentIdx].end = pointFrom<LocalPoint>(\n      fixedSegments[activelyModifiedSegmentIdx].end[0] +\n        (endIsHorizontal ? padding : 0),\n      fixedSegments[activelyModifiedSegmentIdx].end[1] +\n        (!endIsHorizontal ? padding : 0),\n    );\n  }\n\n  // Translate all fixed segments to global coordinates\n  const nextFixedSegments = fixedSegments.map((segment) => ({\n    ...segment,\n    start: pointFrom<GlobalPoint>(\n      arrow.x + segment.start[0],\n      arrow.y + segment.start[1],\n    ),\n    end: pointFrom<GlobalPoint>(\n      arrow.x + segment.end[0],\n      arrow.y + segment.end[1],\n    ),\n  }));\n\n  // For start, clone old arrow points\n  const newPoints: GlobalPoint[] = arrow.points.map((p, i) =>\n    pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1]),\n  );\n\n  const startIdx = nextFixedSegments[activelyModifiedSegmentIdx].index - 1;\n  const endIdx = nextFixedSegments[activelyModifiedSegmentIdx].index;\n  const start = nextFixedSegments[activelyModifiedSegmentIdx].start;\n  const end = nextFixedSegments[activelyModifiedSegmentIdx].end;\n  const prevSegmentIsHorizontal =\n    newPoints[startIdx - 1] &&\n    !pointsEqual(newPoints[startIdx], newPoints[startIdx - 1])\n      ? headingForPointIsHorizontal(\n          newPoints[startIdx - 1],\n          newPoints[startIdx],\n        )\n      : undefined;\n  const nextSegmentIsHorizontal =\n    newPoints[endIdx + 1] &&\n    !pointsEqual(newPoints[endIdx], newPoints[endIdx + 1])\n      ? headingForPointIsHorizontal(newPoints[endIdx + 1], newPoints[endIdx])\n      : undefined;\n\n  // Override the segment points with the actively moved fixed segment\n  if (prevSegmentIsHorizontal !== undefined) {\n    const dir = prevSegmentIsHorizontal ? 1 : 0;\n    newPoints[startIdx - 1][dir] = start[dir];\n  }\n  newPoints[startIdx] = start;\n  newPoints[endIdx] = end;\n  if (nextSegmentIsHorizontal !== undefined) {\n    const dir = nextSegmentIsHorizontal ? 1 : 0;\n    newPoints[endIdx + 1][dir] = end[dir];\n  }\n\n  // Override neighboring fixedSegment start/end points, if any\n  const prevSegmentIdx = nextFixedSegments.findIndex(\n    (segment) => segment.index === startIdx,\n  );\n  if (prevSegmentIdx !== -1) {\n    // Align the next segment points with the moved segment\n    const dir = headingForPointIsHorizontal(\n      nextFixedSegments[prevSegmentIdx].end,\n      nextFixedSegments[prevSegmentIdx].start,\n    )\n      ? 1\n      : 0;\n    nextFixedSegments[prevSegmentIdx].start[dir] = start[dir];\n    nextFixedSegments[prevSegmentIdx].end = start;\n  }\n\n  const nextSegmentIdx = nextFixedSegments.findIndex(\n    (segment) => segment.index === endIdx + 1,\n  );\n  if (nextSegmentIdx !== -1) {\n    // Align the next segment points with the moved segment\n    const dir = headingForPointIsHorizontal(\n      nextFixedSegments[nextSegmentIdx].end,\n      nextFixedSegments[nextSegmentIdx].start,\n    )\n      ? 1\n      : 0;\n    nextFixedSegments[nextSegmentIdx].end[dir] = end[dir];\n    nextFixedSegments[nextSegmentIdx].start = end;\n  }\n\n  // First segment move needs an additional segment\n  if (firstSegmentIdx === -1 && startIdx === 0) {\n    const startIsHorizontal = hoveredStartElement\n      ? headingIsHorizontal(startHeading)\n      : headingForPointIsHorizontal(newPoints[1], newPoints[0]);\n    newPoints.unshift(\n      pointFrom<GlobalPoint>(\n        startIsHorizontal ? start[0] : arrow.x + arrow.points[0][0],\n        !startIsHorizontal ? start[1] : arrow.y + arrow.points[0][1],\n      ),\n    );\n\n    if (hoveredStartElement) {\n      newPoints.unshift(\n        pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[0][0],\n          arrow.y + arrow.points[0][1],\n        ),\n      );\n    }\n\n    for (const segment of nextFixedSegments) {\n      segment.index += hoveredStartElement ? 2 : 1;\n    }\n  }\n\n  // Last segment move needs an additional segment\n  if (lastSegmentIdx === -1 && endIdx === arrow.points.length - 1) {\n    const endIsHorizontal = headingIsHorizontal(endHeading);\n    newPoints.push(\n      pointFrom<GlobalPoint>(\n        endIsHorizontal\n          ? end[0]\n          : arrow.x + arrow.points[arrow.points.length - 1][0],\n        !endIsHorizontal\n          ? end[1]\n          : arrow.y + arrow.points[arrow.points.length - 1][1],\n      ),\n    );\n    if (hoveredEndElement) {\n      newPoints.push(\n        pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[arrow.points.length - 1][0],\n          arrow.y + arrow.points[arrow.points.length - 1][1],\n        ),\n      );\n    }\n  }\n\n  return normalizeArrowElementUpdate(\n    newPoints,\n    nextFixedSegments.map((segment) => ({\n      ...segment,\n      start: pointFrom<LocalPoint>(\n        segment.start[0] - arrow.x,\n        segment.start[1] - arrow.y,\n      ),\n      end: pointFrom<LocalPoint>(\n        segment.end[0] - arrow.x,\n        segment.end[1] - arrow.y,\n      ),\n    })),\n    false, // If you move a segment, there is no special point anymore\n    false, // If you move a segment, there is no special point anymore\n  );\n};\n\nconst handleEndpointDrag = (\n  arrow: ExcalidrawElbowArrowElement,\n  updatedPoints: readonly LocalPoint[],\n  fixedSegments: readonly FixedSegment[],\n  startHeading: Heading,\n  endHeading: Heading,\n  startGlobalPoint: GlobalPoint,\n  endGlobalPoint: GlobalPoint,\n  hoveredStartElement: ExcalidrawBindableElement | null,\n  hoveredEndElement: ExcalidrawBindableElement | null,\n) => {\n  let startIsSpecial = arrow.startIsSpecial ?? null;\n  let endIsSpecial = arrow.endIsSpecial ?? null;\n  const globalUpdatedPoints = updatedPoints.map((p, i) =>\n    i === 0\n      ? pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1])\n      : i === updatedPoints.length - 1\n      ? pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1])\n      : pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[i][0],\n          arrow.y + arrow.points[i][1],\n        ),\n  );\n  const nextFixedSegments = fixedSegments.map((segment) => ({\n    ...segment,\n    start: pointFrom<GlobalPoint>(\n      arrow.x + (segment.start[0] - updatedPoints[0][0]),\n      arrow.y + (segment.start[1] - updatedPoints[0][1]),\n    ),\n    end: pointFrom<GlobalPoint>(\n      arrow.x + (segment.end[0] - updatedPoints[0][0]),\n      arrow.y + (segment.end[1] - updatedPoints[0][1]),\n    ),\n  }));\n  const newPoints: GlobalPoint[] = [];\n\n  // Add the inside points\n  const offset = 2 + (startIsSpecial ? 1 : 0);\n  const endOffset = 2 + (endIsSpecial ? 1 : 0);\n  while (newPoints.length + offset < globalUpdatedPoints.length - endOffset) {\n    newPoints.push(globalUpdatedPoints[newPoints.length + offset]);\n  }\n\n  // Calculate the moving second point connection and add the start point\n  {\n    const secondPoint = globalUpdatedPoints[startIsSpecial ? 2 : 1];\n    const thirdPoint = globalUpdatedPoints[startIsSpecial ? 3 : 2];\n    const startIsHorizontal = headingIsHorizontal(startHeading);\n    const secondIsHorizontal = headingIsHorizontal(\n      vectorToHeading(vectorFromPoint(secondPoint, thirdPoint)),\n    );\n\n    if (hoveredStartElement && startIsHorizontal === secondIsHorizontal) {\n      const positive = startIsHorizontal\n        ? compareHeading(startHeading, HEADING_RIGHT)\n        : compareHeading(startHeading, HEADING_DOWN);\n      newPoints.unshift(\n        pointFrom<GlobalPoint>(\n          !secondIsHorizontal\n            ? thirdPoint[0]\n            : startGlobalPoint[0] + (positive ? BASE_PADDING : -BASE_PADDING),\n          secondIsHorizontal\n            ? thirdPoint[1]\n            : startGlobalPoint[1] + (positive ? BASE_PADDING : -BASE_PADDING),\n        ),\n      );\n      newPoints.unshift(\n        pointFrom<GlobalPoint>(\n          startIsHorizontal\n            ? startGlobalPoint[0] + (positive ? BASE_PADDING : -BASE_PADDING)\n            : startGlobalPoint[0],\n          !startIsHorizontal\n            ? startGlobalPoint[1] + (positive ? BASE_PADDING : -BASE_PADDING)\n            : startGlobalPoint[1],\n        ),\n      );\n      if (!startIsSpecial) {\n        startIsSpecial = true;\n        for (const segment of nextFixedSegments) {\n          if (segment.index > 1) {\n            segment.index += 1;\n          }\n        }\n      }\n    } else {\n      newPoints.unshift(\n        pointFrom<GlobalPoint>(\n          !secondIsHorizontal ? secondPoint[0] : startGlobalPoint[0],\n          secondIsHorizontal ? secondPoint[1] : startGlobalPoint[1],\n        ),\n      );\n      if (startIsSpecial) {\n        startIsSpecial = false;\n        for (const segment of nextFixedSegments) {\n          if (segment.index > 1) {\n            segment.index -= 1;\n          }\n        }\n      }\n    }\n    newPoints.unshift(startGlobalPoint);\n  }\n\n  // Calculate the moving second to last point connection\n  {\n    const secondToLastPoint =\n      globalUpdatedPoints[globalUpdatedPoints.length - (endIsSpecial ? 3 : 2)];\n    const thirdToLastPoint =\n      globalUpdatedPoints[globalUpdatedPoints.length - (endIsSpecial ? 4 : 3)];\n    const endIsHorizontal = headingIsHorizontal(endHeading);\n    const secondIsHorizontal = headingForPointIsHorizontal(\n      thirdToLastPoint,\n      secondToLastPoint,\n    );\n    if (hoveredEndElement && endIsHorizontal === secondIsHorizontal) {\n      const positive = endIsHorizontal\n        ? compareHeading(endHeading, HEADING_RIGHT)\n        : compareHeading(endHeading, HEADING_DOWN);\n      newPoints.push(\n        pointFrom<GlobalPoint>(\n          !secondIsHorizontal\n            ? thirdToLastPoint[0]\n            : endGlobalPoint[0] + (positive ? BASE_PADDING : -BASE_PADDING),\n          secondIsHorizontal\n            ? thirdToLastPoint[1]\n            : endGlobalPoint[1] + (positive ? BASE_PADDING : -BASE_PADDING),\n        ),\n      );\n      newPoints.push(\n        pointFrom<GlobalPoint>(\n          endIsHorizontal\n            ? endGlobalPoint[0] + (positive ? BASE_PADDING : -BASE_PADDING)\n            : endGlobalPoint[0],\n          !endIsHorizontal\n            ? endGlobalPoint[1] + (positive ? BASE_PADDING : -BASE_PADDING)\n            : endGlobalPoint[1],\n        ),\n      );\n      if (!endIsSpecial) {\n        endIsSpecial = true;\n      }\n    } else {\n      newPoints.push(\n        pointFrom<GlobalPoint>(\n          !secondIsHorizontal ? secondToLastPoint[0] : endGlobalPoint[0],\n          secondIsHorizontal ? secondToLastPoint[1] : endGlobalPoint[1],\n        ),\n      );\n      if (endIsSpecial) {\n        endIsSpecial = false;\n      }\n    }\n  }\n\n  newPoints.push(endGlobalPoint);\n\n  return normalizeArrowElementUpdate(\n    newPoints,\n    nextFixedSegments\n      .map(({ index }) => ({\n        index,\n        start: newPoints[index - 1],\n        end: newPoints[index],\n      }))\n      .map((segment) => ({\n        ...segment,\n        start: pointFrom<LocalPoint>(\n          segment.start[0] - startGlobalPoint[0],\n          segment.start[1] - startGlobalPoint[1],\n        ),\n        end: pointFrom<LocalPoint>(\n          segment.end[0] - startGlobalPoint[0],\n          segment.end[1] - startGlobalPoint[1],\n        ),\n      })),\n    startIsSpecial,\n    endIsSpecial,\n  );\n};\n\nconst MAX_POS = 1e6;\n\n/**\n *\n */\nexport const updateElbowArrowPoints = (\n  arrow: Readonly<ExcalidrawElbowArrowElement>,\n  elementsMap: NonDeletedSceneElementsMap,\n  updates: {\n    points?: readonly LocalPoint[];\n    fixedSegments?: FixedSegment[] | null;\n    startBinding?: FixedPointBinding | null;\n    endBinding?: FixedPointBinding | null;\n  },\n  options?: {\n    isDragging?: boolean;\n  },\n): ElementUpdate<ExcalidrawElbowArrowElement> => {\n  if (arrow.points.length < 2) {\n    return { points: updates.points ?? arrow.points };\n  }\n\n  // NOTE (mtolmacs): This is a temporary check to ensure that the incoming elbow\n  // arrow size is valid. This check will be removed once the issue is identified\n  if (\n    arrow.x < -MAX_POS ||\n    arrow.x > MAX_POS ||\n    arrow.y < -MAX_POS ||\n    arrow.y > MAX_POS ||\n    arrow.x + (updates?.points?.[updates?.points?.length - 1]?.[0] ?? 0) <\n      -MAX_POS ||\n    arrow.x + (updates?.points?.[updates?.points?.length - 1]?.[0] ?? 0) >\n      MAX_POS ||\n    arrow.y + (updates?.points?.[updates?.points?.length - 1]?.[1] ?? 0) <\n      -MAX_POS ||\n    arrow.y + (updates?.points?.[updates?.points?.length - 1]?.[1] ?? 0) >\n      MAX_POS ||\n    arrow.x + (arrow?.points?.[arrow?.points?.length - 1]?.[0] ?? 0) <\n      -MAX_POS ||\n    arrow.x + (arrow?.points?.[arrow?.points?.length - 1]?.[0] ?? 0) >\n      MAX_POS ||\n    arrow.y + (arrow?.points?.[arrow?.points?.length - 1]?.[1] ?? 0) <\n      -MAX_POS ||\n    arrow.y + (arrow?.points?.[arrow?.points?.length - 1]?.[1] ?? 0) > MAX_POS\n  ) {\n    console.error(\n      \"Elbow arrow (or update) is outside reasonable bounds (> 1e6)\",\n      {\n        arrow,\n        updates,\n      },\n    );\n  }\n  // @ts-ignore See above note\n  arrow.x = clamp(arrow.x, -MAX_POS, MAX_POS);\n  // @ts-ignore See above note\n  arrow.y = clamp(arrow.y, -MAX_POS, MAX_POS);\n  if (updates.points) {\n    updates.points = updates.points.map(([x, y]) =>\n      pointFrom<LocalPoint>(\n        clamp(x, -MAX_POS, MAX_POS),\n        clamp(y, -MAX_POS, MAX_POS),\n      ),\n    );\n  }\n\n  if (!import.meta.env.PROD) {\n    invariant(\n      !updates.points || updates.points.length >= 2,\n      \"Updated point array length must match the arrow point length, contain \" +\n        \"exactly the new start and end points or not be specified at all (i.e. \" +\n        \"you can't add new points between start and end manually to elbow arrows)\",\n    );\n\n    invariant(\n      !arrow.fixedSegments ||\n        arrow.fixedSegments\n          .map((s) => s.start[0] === s.end[0] || s.start[1] === s.end[1])\n          .every(Boolean),\n      \"Fixed segments must be either horizontal or vertical\",\n    );\n\n    invariant(\n      !updates.fixedSegments ||\n        updates.fixedSegments\n          .map((s) => s.start[0] === s.end[0] || s.start[1] === s.end[1])\n          .every(Boolean),\n      \"Updates to fixed segments must be either horizontal or vertical\",\n    );\n\n    invariant(\n      arrow.points\n        .slice(1)\n        .map(\n          (p, i) => p[0] === arrow.points[i][0] || p[1] === arrow.points[i][1],\n        ),\n      \"Elbow arrow segments must be either horizontal or vertical\",\n    );\n  }\n\n  const fixedSegments = updates.fixedSegments ?? arrow.fixedSegments ?? [];\n\n  const updatedPoints: readonly LocalPoint[] = updates.points\n    ? updates.points && updates.points.length === 2\n      ? arrow.points.map((p, idx) =>\n          idx === 0\n            ? updates.points![0]\n            : idx === arrow.points.length - 1\n            ? updates.points![1]\n            : p,\n        )\n      : updates.points.slice()\n    : arrow.points.slice();\n\n  // During all element replacement in the scene, we just need to renormalize\n  // the arrow\n  // TODO (dwelle,mtolmacs): Remove this once Scene.getScene() is removed\n  const {\n    startBinding: updatedStartBinding,\n    endBinding: updatedEndBinding,\n    ...restOfTheUpdates\n  } = updates;\n  const startBinding =\n    typeof updatedStartBinding !== \"undefined\"\n      ? updatedStartBinding\n      : arrow.startBinding;\n  const endBinding =\n    typeof updatedEndBinding !== \"undefined\"\n      ? updatedEndBinding\n      : arrow.endBinding;\n  const startElement =\n    startBinding &&\n    getBindableElementForId(startBinding.elementId, elementsMap);\n  const endElement =\n    endBinding && getBindableElementForId(endBinding.elementId, elementsMap);\n  const areUpdatedPointsValid = validateElbowPoints(updatedPoints);\n\n  if (\n    (startBinding && !startElement && areUpdatedPointsValid) ||\n    (endBinding && !endElement && areUpdatedPointsValid) ||\n    (elementsMap.size === 0 && areUpdatedPointsValid) ||\n    (Object.keys(restOfTheUpdates).length === 0 &&\n      (startElement?.id !== startBinding?.elementId ||\n        endElement?.id !== endBinding?.elementId))\n  ) {\n    return normalizeArrowElementUpdate(\n      updatedPoints.map((p) =>\n        pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1]),\n      ),\n      arrow.fixedSegments,\n      arrow.startIsSpecial,\n      arrow.endIsSpecial,\n    );\n  }\n\n  const {\n    startHeading,\n    endHeading,\n    startGlobalPoint,\n    endGlobalPoint,\n    hoveredStartElement,\n    hoveredEndElement,\n    ...rest\n  } = getElbowArrowData(\n    {\n      x: arrow.x,\n      y: arrow.y,\n      startBinding,\n      endBinding,\n      startArrowhead: arrow.startArrowhead,\n      endArrowhead: arrow.endArrowhead,\n      points: arrow.points,\n    },\n    elementsMap,\n    updatedPoints,\n    options,\n  );\n\n  // 0. During all element replacement in the scene, we just need to renormalize\n  // the arrow\n  // TODO (dwelle,mtolmacs): Remove this once Scene.getScene() is removed\n  if (elementsMap.size === 0 && areUpdatedPointsValid) {\n    return normalizeArrowElementUpdate(\n      updatedPoints.map((p) =>\n        pointFrom<GlobalPoint>(arrow.x + p[0], arrow.y + p[1]),\n      ),\n      arrow.fixedSegments,\n      arrow.startIsSpecial,\n      arrow.endIsSpecial,\n    );\n  }\n\n  ////\n  // 1. Renormalize the arrow\n  ////\n  if (\n    !updates.points &&\n    !updates.fixedSegments &&\n    !updates.startBinding &&\n    !updates.endBinding\n  ) {\n    return handleSegmentRenormalization(arrow, elementsMap);\n  }\n\n  // Short circuit on no-op to avoid huge performance hit\n  if (\n    updates.startBinding === arrow.startBinding &&\n    updates.endBinding === arrow.endBinding &&\n    (updates.points ?? []).every((p, i) =>\n      pointsEqual(\n        p,\n        arrow.points[i] ?? pointFrom<LocalPoint>(Infinity, Infinity),\n      ),\n    ) &&\n    areUpdatedPointsValid\n  ) {\n    return {};\n  }\n\n  ////\n  // 2. Just normal elbow arrow things\n  ////\n  if (fixedSegments.length === 0) {\n    return normalizeArrowElementUpdate(\n      getElbowArrowCornerPoints(\n        removeElbowArrowShortSegments(\n          routeElbowArrow(arrow, {\n            startHeading,\n            endHeading,\n            startGlobalPoint,\n            endGlobalPoint,\n            hoveredStartElement,\n            hoveredEndElement,\n            ...rest,\n          }) ?? [],\n        ),\n      ),\n      fixedSegments,\n      null,\n      null,\n    );\n  }\n\n  ////\n  // 3. Handle releasing a fixed segment\n  if ((arrow.fixedSegments?.length ?? 0) > fixedSegments.length) {\n    return handleSegmentRelease(arrow, fixedSegments, elementsMap);\n  }\n\n  ////\n  // 4. Handle manual segment move\n  ////\n  if (!updates.points) {\n    return handleSegmentMove(\n      arrow,\n      fixedSegments,\n      startHeading,\n      endHeading,\n      hoveredStartElement,\n      hoveredEndElement,\n    );\n  }\n\n  ////\n  // 5. Handle resize\n  ////\n  if (updates.points && updates.fixedSegments) {\n    return updates;\n  }\n\n  ////\n  // 6. One or more segments are fixed and endpoints are moved\n  //\n  // The key insights are:\n  // - When segments are fixed, the arrow will keep the exact amount of segments\n  // - Fixed segments are \"replacements\" for exactly one segment in the old arrow\n  ////\n  return handleEndpointDrag(\n    arrow,\n    updatedPoints,\n    fixedSegments,\n    startHeading,\n    endHeading,\n    startGlobalPoint,\n    endGlobalPoint,\n    hoveredStartElement,\n    hoveredEndElement,\n  );\n};\n\n/**\n * Retrieves data necessary for calculating the elbow arrow path.\n *\n * @param arrow - The arrow object containing its properties.\n * @param elementsMap - A map of elements in the scene.\n * @param nextPoints - The next set of points for the arrow.\n * @param options - Optional parameters for the calculation.\n * @param options.isDragging - Indicates if the arrow is being dragged.\n * @param options.startIsMidPoint - Indicates if the start point is a midpoint.\n * @param options.endIsMidPoint - Indicates if the end point is a midpoint.\n *\n * @returns An object containing various properties needed for elbow arrow calculations:\n * - dynamicAABBs: Dynamically generated axis-aligned bounding boxes.\n * - startDonglePosition: The position of the start dongle.\n * - startGlobalPoint: The global coordinates of the start point.\n * - startHeading: The heading direction from the start point.\n * - endDonglePosition: The position of the end dongle.\n * - endGlobalPoint: The global coordinates of the end point.\n * - endHeading: The heading direction from the end point.\n * - commonBounds: The common bounding box that encompasses both start and end points.\n * - hoveredStartElement: The element being hovered over at the start point.\n * - hoveredEndElement: The element being hovered over at the end point.\n */\nconst getElbowArrowData = (\n  arrow: {\n    x: number;\n    y: number;\n    startBinding: FixedPointBinding | null;\n    endBinding: FixedPointBinding | null;\n    startArrowhead: Arrowhead | null;\n    endArrowhead: Arrowhead | null;\n    points: readonly LocalPoint[];\n  },\n  elementsMap: NonDeletedSceneElementsMap,\n  nextPoints: readonly LocalPoint[],\n  options?: {\n    isDragging?: boolean;\n    zoom?: AppState[\"zoom\"];\n  },\n) => {\n  const origStartGlobalPoint: GlobalPoint = pointTranslate<\n    LocalPoint,\n    GlobalPoint\n  >(nextPoints[0], vector(arrow.x, arrow.y));\n  const origEndGlobalPoint: GlobalPoint = pointTranslate<\n    LocalPoint,\n    GlobalPoint\n  >(nextPoints[nextPoints.length - 1], vector(arrow.x, arrow.y));\n\n  let hoveredStartElement = null;\n  let hoveredEndElement = null;\n  if (options?.isDragging) {\n    const elements = Array.from(elementsMap.values());\n    hoveredStartElement =\n      getHoveredElement(\n        origStartGlobalPoint,\n        elementsMap,\n        elements,\n        options?.zoom,\n      ) || null;\n    hoveredEndElement =\n      getHoveredElement(\n        origEndGlobalPoint,\n        elementsMap,\n        elements,\n        options?.zoom,\n      ) || null;\n  } else {\n    hoveredStartElement = arrow.startBinding\n      ? getBindableElementForId(arrow.startBinding.elementId, elementsMap) ||\n        null\n      : null;\n    hoveredEndElement = arrow.endBinding\n      ? getBindableElementForId(arrow.endBinding.elementId, elementsMap) || null\n      : null;\n  }\n\n  const startGlobalPoint = getGlobalPoint(\n    {\n      ...arrow,\n      type: \"arrow\",\n      elbowed: true,\n      points: nextPoints,\n    } as ExcalidrawElbowArrowElement,\n    \"start\",\n    arrow.startBinding?.fixedPoint,\n    origStartGlobalPoint,\n    hoveredStartElement,\n    options?.isDragging,\n  );\n  const endGlobalPoint = getGlobalPoint(\n    {\n      ...arrow,\n      type: \"arrow\",\n      elbowed: true,\n      points: nextPoints,\n    } as ExcalidrawElbowArrowElement,\n    \"end\",\n    arrow.endBinding?.fixedPoint,\n    origEndGlobalPoint,\n    hoveredEndElement,\n    options?.isDragging,\n  );\n  const startHeading = getBindPointHeading(\n    startGlobalPoint,\n    endGlobalPoint,\n    elementsMap,\n    hoveredStartElement,\n    origStartGlobalPoint,\n  );\n  const endHeading = getBindPointHeading(\n    endGlobalPoint,\n    startGlobalPoint,\n    elementsMap,\n    hoveredEndElement,\n    origEndGlobalPoint,\n  );\n  const startPointBounds = [\n    startGlobalPoint[0] - 2,\n    startGlobalPoint[1] - 2,\n    startGlobalPoint[0] + 2,\n    startGlobalPoint[1] + 2,\n  ] as Bounds;\n  const endPointBounds = [\n    endGlobalPoint[0] - 2,\n    endGlobalPoint[1] - 2,\n    endGlobalPoint[0] + 2,\n    endGlobalPoint[1] + 2,\n  ] as Bounds;\n  const startElementBounds = hoveredStartElement\n    ? aabbForElement(\n        hoveredStartElement,\n        offsetFromHeading(\n          startHeading,\n          arrow.startArrowhead\n            ? FIXED_BINDING_DISTANCE * 6\n            : FIXED_BINDING_DISTANCE * 2,\n          1,\n        ),\n      )\n    : startPointBounds;\n  const endElementBounds = hoveredEndElement\n    ? aabbForElement(\n        hoveredEndElement,\n        offsetFromHeading(\n          endHeading,\n          arrow.endArrowhead\n            ? FIXED_BINDING_DISTANCE * 6\n            : FIXED_BINDING_DISTANCE * 2,\n          1,\n        ),\n      )\n    : endPointBounds;\n  const boundsOverlap =\n    pointInsideBounds(\n      startGlobalPoint,\n      hoveredEndElement\n        ? aabbForElement(\n            hoveredEndElement,\n            offsetFromHeading(endHeading, BASE_PADDING, BASE_PADDING),\n          )\n        : endPointBounds,\n    ) ||\n    pointInsideBounds(\n      endGlobalPoint,\n      hoveredStartElement\n        ? aabbForElement(\n            hoveredStartElement,\n            offsetFromHeading(startHeading, BASE_PADDING, BASE_PADDING),\n          )\n        : startPointBounds,\n    );\n  const commonBounds = commonAABB(\n    boundsOverlap\n      ? [startPointBounds, endPointBounds]\n      : [startElementBounds, endElementBounds],\n  );\n  const dynamicAABBs = generateDynamicAABBs(\n    boundsOverlap ? startPointBounds : startElementBounds,\n    boundsOverlap ? endPointBounds : endElementBounds,\n    commonBounds,\n    boundsOverlap\n      ? offsetFromHeading(\n          startHeading,\n          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING,\n          0,\n        )\n      : offsetFromHeading(\n          startHeading,\n          !hoveredStartElement && !hoveredEndElement\n            ? 0\n            : BASE_PADDING -\n                (arrow.startArrowhead\n                  ? FIXED_BINDING_DISTANCE * 6\n                  : FIXED_BINDING_DISTANCE * 2),\n          BASE_PADDING,\n        ),\n    boundsOverlap\n      ? offsetFromHeading(\n          endHeading,\n          !hoveredStartElement && !hoveredEndElement ? 0 : BASE_PADDING,\n          0,\n        )\n      : offsetFromHeading(\n          endHeading,\n          !hoveredStartElement && !hoveredEndElement\n            ? 0\n            : BASE_PADDING -\n                (arrow.endArrowhead\n                  ? FIXED_BINDING_DISTANCE * 6\n                  : FIXED_BINDING_DISTANCE * 2),\n          BASE_PADDING,\n        ),\n    boundsOverlap,\n    hoveredStartElement && aabbForElement(hoveredStartElement),\n    hoveredEndElement && aabbForElement(hoveredEndElement),\n  );\n  const startDonglePosition = getDonglePosition(\n    dynamicAABBs[0],\n    startHeading,\n    startGlobalPoint,\n  );\n  const endDonglePosition = getDonglePosition(\n    dynamicAABBs[1],\n    endHeading,\n    endGlobalPoint,\n  );\n\n  return {\n    dynamicAABBs,\n    startDonglePosition,\n    startGlobalPoint,\n    startHeading,\n    endDonglePosition,\n    endGlobalPoint,\n    endHeading,\n    commonBounds,\n    hoveredStartElement,\n    hoveredEndElement,\n    boundsOverlap,\n    startElementBounds,\n    endElementBounds,\n  };\n};\n\n/**\n * Generate the elbow arrow segments\n *\n * @param arrow\n * @param elementsMap\n * @param nextPoints\n * @param options\n * @returns\n */\nconst routeElbowArrow = (\n  arrow: ElbowArrowState,\n  elbowArrowData: ElbowArrowData,\n): GlobalPoint[] | null => {\n  const {\n    dynamicAABBs,\n    startDonglePosition,\n    startGlobalPoint,\n    startHeading,\n    endDonglePosition,\n    endGlobalPoint,\n    endHeading,\n    commonBounds,\n    hoveredEndElement,\n  } = elbowArrowData;\n\n  // Canculate Grid positions\n  const grid = calculateGrid(\n    dynamicAABBs,\n    startDonglePosition ? startDonglePosition : startGlobalPoint,\n    startHeading,\n    endDonglePosition ? endDonglePosition : endGlobalPoint,\n    endHeading,\n    commonBounds,\n  );\n\n  const startDongle =\n    startDonglePosition && pointToGridNode(startDonglePosition, grid);\n  const endDongle =\n    endDonglePosition && pointToGridNode(endDonglePosition, grid);\n\n  // Do not allow stepping on the true end or true start points\n  const endNode = pointToGridNode(endGlobalPoint, grid);\n  if (endNode && hoveredEndElement) {\n    endNode.closed = true;\n  }\n  const startNode = pointToGridNode(startGlobalPoint, grid);\n  if (startNode && arrow.startBinding) {\n    startNode.closed = true;\n  }\n  const dongleOverlap =\n    startDongle &&\n    endDongle &&\n    (pointInsideBounds(startDongle.pos, dynamicAABBs[1]) ||\n      pointInsideBounds(endDongle.pos, dynamicAABBs[0]));\n\n  // Create path to end dongle from start dongle\n  const path = astar(\n    startDongle ? startDongle : startNode!,\n    endDongle ? endDongle : endNode!,\n    grid,\n    startHeading ? startHeading : HEADING_RIGHT,\n    endHeading ? endHeading : HEADING_RIGHT,\n    dongleOverlap ? [] : dynamicAABBs,\n  );\n\n  if (path) {\n    const points = path.map((node) => [\n      node.pos[0],\n      node.pos[1],\n    ]) as GlobalPoint[];\n    startDongle && points.unshift(startGlobalPoint);\n    endDongle && points.push(endGlobalPoint);\n\n    return points;\n  }\n\n  return null;\n};\n\nconst offsetFromHeading = (\n  heading: Heading,\n  head: number,\n  side: number,\n): [number, number, number, number] => {\n  switch (heading) {\n    case HEADING_UP:\n      return [head, side, side, side];\n    case HEADING_RIGHT:\n      return [side, head, side, side];\n    case HEADING_DOWN:\n      return [side, side, head, side];\n  }\n\n  return [side, side, side, head];\n};\n\n/**\n * Routing algorithm based on the A* path search algorithm.\n * @see https://www.geeksforgeeks.org/a-search-algorithm/\n *\n * Binary heap is used to optimize node lookup.\n * See {@link calculateGrid} for the grid calculation details.\n *\n * Additional modifications added due to aesthetic route reasons:\n * 1) Arrow segment direction change is penalized by specific linear constant (bendMultiplier)\n * 2) Arrow segments are not allowed to go \"backwards\", overlapping with the previous segment\n */\nconst astar = (\n  start: Node,\n  end: Node,\n  grid: Grid,\n  startHeading: Heading,\n  endHeading: Heading,\n  aabbs: Bounds[],\n) => {\n  const bendMultiplier = m_dist(start.pos, end.pos);\n  const open = new BinaryHeap<Node>((node) => node.f);\n\n  open.push(start);\n\n  while (open.size() > 0) {\n    // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n    const current = open.pop();\n\n    if (!current || current.closed) {\n      // Current is not passable, continue with next element\n      continue;\n    }\n\n    // End case -- result has been found, return the traced path.\n    if (current === end) {\n      return pathTo(start, current);\n    }\n\n    // Normal case -- move current from open to closed, process each of its neighbors.\n    current.closed = true;\n\n    // Find all neighbors for the current node.\n    const neighbors = getNeighbors(current.addr, grid);\n\n    for (let i = 0; i < 4; i++) {\n      const neighbor = neighbors[i];\n\n      if (!neighbor || neighbor.closed) {\n        // Not a valid node to process, skip to next neighbor.\n        continue;\n      }\n\n      // Intersect\n      const neighborHalfPoint = pointScaleFromOrigin(\n        neighbor.pos,\n        current.pos,\n        0.5,\n      );\n      if (\n        isAnyTrue(\n          ...aabbs.map((aabb) => pointInsideBounds(neighborHalfPoint, aabb)),\n        )\n      ) {\n        continue;\n      }\n\n      // The g score is the shortest distance from start to current node.\n      // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n      const neighborHeading = neighborIndexToHeading(i as 0 | 1 | 2 | 3);\n      const previousDirection = current.parent\n        ? vectorToHeading(vectorFromPoint(current.pos, current.parent.pos))\n        : startHeading;\n\n      // Do not allow going in reverse\n      const reverseHeading = flipHeading(previousDirection);\n      const neighborIsReverseRoute =\n        compareHeading(reverseHeading, neighborHeading) ||\n        (gridAddressesEqual(start.addr, neighbor.addr) &&\n          compareHeading(neighborHeading, startHeading)) ||\n        (gridAddressesEqual(end.addr, neighbor.addr) &&\n          compareHeading(neighborHeading, endHeading));\n      if (neighborIsReverseRoute) {\n        continue;\n      }\n\n      const directionChange = previousDirection !== neighborHeading;\n      const gScore =\n        current.g +\n        m_dist(neighbor.pos, current.pos) +\n        (directionChange ? Math.pow(bendMultiplier, 3) : 0);\n\n      const beenVisited = neighbor.visited;\n\n      if (!beenVisited || gScore < neighbor.g) {\n        const estBendCount = estimateSegmentCount(\n          neighbor,\n          end,\n          neighborHeading,\n          endHeading,\n        );\n        // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n        neighbor.visited = true;\n        neighbor.parent = current;\n        neighbor.h =\n          m_dist(end.pos, neighbor.pos) +\n          estBendCount * Math.pow(bendMultiplier, 2);\n        neighbor.g = gScore;\n        neighbor.f = neighbor.g + neighbor.h;\n        if (!beenVisited) {\n          // Pushing to heap will put it in proper place based on the 'f' value.\n          open.push(neighbor);\n        } else {\n          // Already seen the node, but since it has been rescored we need to reorder it in the heap\n          open.rescoreElement(neighbor);\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nconst pathTo = (start: Node, node: Node) => {\n  let curr = node;\n  const path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  path.unshift(start);\n\n  return path;\n};\n\nconst m_dist = (a: GlobalPoint | LocalPoint, b: GlobalPoint | LocalPoint) =>\n  Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n\n/**\n * Create dynamically resizing, always touching\n * bounding boxes having a minimum extent represented\n * by the given static bounds.\n */\nconst generateDynamicAABBs = (\n  a: Bounds,\n  b: Bounds,\n  common: Bounds,\n  startDifference?: [number, number, number, number],\n  endDifference?: [number, number, number, number],\n  disableSideHack?: boolean,\n  startElementBounds?: Bounds | null,\n  endElementBounds?: Bounds | null,\n): Bounds[] => {\n  const startEl = startElementBounds ?? a;\n  const endEl = endElementBounds ?? b;\n  const [startUp, startRight, startDown, startLeft] = startDifference ?? [\n    0, 0, 0, 0,\n  ];\n  const [endUp, endRight, endDown, endLeft] = endDifference ?? [0, 0, 0, 0];\n\n  const first = [\n    a[0] > b[2]\n      ? a[1] > b[3] || a[3] < b[1]\n        ? Math.min((startEl[0] + endEl[2]) / 2, a[0] - startLeft)\n        : (startEl[0] + endEl[2]) / 2\n      : a[0] > b[0]\n      ? a[0] - startLeft\n      : common[0] - startLeft,\n    a[1] > b[3]\n      ? a[0] > b[2] || a[2] < b[0]\n        ? Math.min((startEl[1] + endEl[3]) / 2, a[1] - startUp)\n        : (startEl[1] + endEl[3]) / 2\n      : a[1] > b[1]\n      ? a[1] - startUp\n      : common[1] - startUp,\n    a[2] < b[0]\n      ? a[1] > b[3] || a[3] < b[1]\n        ? Math.max((startEl[2] + endEl[0]) / 2, a[2] + startRight)\n        : (startEl[2] + endEl[0]) / 2\n      : a[2] < b[2]\n      ? a[2] + startRight\n      : common[2] + startRight,\n    a[3] < b[1]\n      ? a[0] > b[2] || a[2] < b[0]\n        ? Math.max((startEl[3] + endEl[1]) / 2, a[3] + startDown)\n        : (startEl[3] + endEl[1]) / 2\n      : a[3] < b[3]\n      ? a[3] + startDown\n      : common[3] + startDown,\n  ] as Bounds;\n  const second = [\n    b[0] > a[2]\n      ? b[1] > a[3] || b[3] < a[1]\n        ? Math.min((endEl[0] + startEl[2]) / 2, b[0] - endLeft)\n        : (endEl[0] + startEl[2]) / 2\n      : b[0] > a[0]\n      ? b[0] - endLeft\n      : common[0] - endLeft,\n    b[1] > a[3]\n      ? b[0] > a[2] || b[2] < a[0]\n        ? Math.min((endEl[1] + startEl[3]) / 2, b[1] - endUp)\n        : (endEl[1] + startEl[3]) / 2\n      : b[1] > a[1]\n      ? b[1] - endUp\n      : common[1] - endUp,\n    b[2] < a[0]\n      ? b[1] > a[3] || b[3] < a[1]\n        ? Math.max((endEl[2] + startEl[0]) / 2, b[2] + endRight)\n        : (endEl[2] + startEl[0]) / 2\n      : b[2] < a[2]\n      ? b[2] + endRight\n      : common[2] + endRight,\n    b[3] < a[1]\n      ? b[0] > a[2] || b[2] < a[0]\n        ? Math.max((endEl[3] + startEl[1]) / 2, b[3] + endDown)\n        : (endEl[3] + startEl[1]) / 2\n      : b[3] < a[3]\n      ? b[3] + endDown\n      : common[3] + endDown,\n  ] as Bounds;\n\n  const c = commonAABB([first, second]);\n  if (\n    !disableSideHack &&\n    first[2] - first[0] + second[2] - second[0] > c[2] - c[0] + 0.00000000001 &&\n    first[3] - first[1] + second[3] - second[1] > c[3] - c[1] + 0.00000000001\n  ) {\n    const [endCenterX, endCenterY] = [\n      (second[0] + second[2]) / 2,\n      (second[1] + second[3]) / 2,\n    ];\n    if (b[0] > a[2] && a[1] > b[3]) {\n      // BOTTOM LEFT\n      const cX = first[2] + (second[0] - first[2]) / 2;\n      const cY = second[3] + (first[1] - second[3]) / 2;\n\n      if (\n        vectorCross(\n          vector(a[2] - endCenterX, a[1] - endCenterY),\n          vector(a[0] - endCenterX, a[3] - endCenterY),\n        ) > 0\n      ) {\n        return [\n          [first[0], first[1], cX, first[3]],\n          [cX, second[1], second[2], second[3]],\n        ];\n      }\n\n      return [\n        [first[0], cY, first[2], first[3]],\n        [second[0], second[1], second[2], cY],\n      ];\n    } else if (a[2] < b[0] && a[3] < b[1]) {\n      // TOP LEFT\n      const cX = first[2] + (second[0] - first[2]) / 2;\n      const cY = first[3] + (second[1] - first[3]) / 2;\n\n      if (\n        vectorCross(\n          vector(a[0] - endCenterX, a[1] - endCenterY),\n          vector(a[2] - endCenterX, a[3] - endCenterY),\n        ) > 0\n      ) {\n        return [\n          [first[0], first[1], first[2], cY],\n          [second[0], cY, second[2], second[3]],\n        ];\n      }\n\n      return [\n        [first[0], first[1], cX, first[3]],\n        [cX, second[1], second[2], second[3]],\n      ];\n    } else if (a[0] > b[2] && a[3] < b[1]) {\n      // TOP RIGHT\n      const cX = second[2] + (first[0] - second[2]) / 2;\n      const cY = first[3] + (second[1] - first[3]) / 2;\n\n      if (\n        vectorCross(\n          vector(a[2] - endCenterX, a[1] - endCenterY),\n          vector(a[0] - endCenterX, a[3] - endCenterY),\n        ) > 0\n      ) {\n        return [\n          [cX, first[1], first[2], first[3]],\n          [second[0], second[1], cX, second[3]],\n        ];\n      }\n\n      return [\n        [first[0], first[1], first[2], cY],\n        [second[0], cY, second[2], second[3]],\n      ];\n    } else if (a[0] > b[2] && a[1] > b[3]) {\n      // BOTTOM RIGHT\n      const cX = second[2] + (first[0] - second[2]) / 2;\n      const cY = second[3] + (first[1] - second[3]) / 2;\n\n      if (\n        vectorCross(\n          vector(a[0] - endCenterX, a[1] - endCenterY),\n          vector(a[2] - endCenterX, a[3] - endCenterY),\n        ) > 0\n      ) {\n        return [\n          [cX, first[1], first[2], first[3]],\n          [second[0], second[1], cX, second[3]],\n        ];\n      }\n\n      return [\n        [first[0], cY, first[2], first[3]],\n        [second[0], second[1], second[2], cY],\n      ];\n    }\n  }\n\n  return [first, second];\n};\n\n/**\n * Calculates the grid which is used as nodes at\n * the grid line intersections by the A* algorithm.\n *\n * NOTE: This is not a uniform grid. It is built at\n * various intersections of bounding boxes.\n */\nconst calculateGrid = (\n  aabbs: Bounds[],\n  start: GlobalPoint,\n  startHeading: Heading,\n  end: GlobalPoint,\n  endHeading: Heading,\n  common: Bounds,\n): Grid => {\n  const horizontal = new Set<number>();\n  const vertical = new Set<number>();\n\n  if (startHeading === HEADING_LEFT || startHeading === HEADING_RIGHT) {\n    vertical.add(start[1]);\n  } else {\n    horizontal.add(start[0]);\n  }\n  if (endHeading === HEADING_LEFT || endHeading === HEADING_RIGHT) {\n    vertical.add(end[1]);\n  } else {\n    horizontal.add(end[0]);\n  }\n\n  aabbs.forEach((aabb) => {\n    horizontal.add(aabb[0]);\n    horizontal.add(aabb[2]);\n    vertical.add(aabb[1]);\n    vertical.add(aabb[3]);\n  });\n\n  horizontal.add(common[0]);\n  horizontal.add(common[2]);\n  vertical.add(common[1]);\n  vertical.add(common[3]);\n\n  const _vertical = Array.from(vertical).sort((a, b) => a - b);\n  const _horizontal = Array.from(horizontal).sort((a, b) => a - b);\n\n  return {\n    row: _vertical.length,\n    col: _horizontal.length,\n    data: _vertical.flatMap((y, row) =>\n      _horizontal.map(\n        (x, col): Node => ({\n          f: 0,\n          g: 0,\n          h: 0,\n          closed: false,\n          visited: false,\n          parent: null,\n          addr: [col, row] as GridAddress,\n          pos: [x, y] as GlobalPoint,\n        }),\n      ),\n    ),\n  };\n};\n\nconst getDonglePosition = (\n  bounds: Bounds,\n  heading: Heading,\n  p: GlobalPoint,\n): GlobalPoint => {\n  switch (heading) {\n    case HEADING_UP:\n      return pointFrom(p[0], bounds[1]);\n    case HEADING_RIGHT:\n      return pointFrom(bounds[2], p[1]);\n    case HEADING_DOWN:\n      return pointFrom(p[0], bounds[3]);\n  }\n  return pointFrom(bounds[0], p[1]);\n};\n\nconst estimateSegmentCount = (\n  start: Node,\n  end: Node,\n  startHeading: Heading,\n  endHeading: Heading,\n) => {\n  if (endHeading === HEADING_RIGHT) {\n    switch (startHeading) {\n      case HEADING_RIGHT: {\n        if (start.pos[0] >= end.pos[0]) {\n          return 4;\n        }\n        if (start.pos[1] === end.pos[1]) {\n          return 0;\n        }\n        return 2;\n      }\n      case HEADING_UP:\n        if (start.pos[1] > end.pos[1] && start.pos[0] < end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_DOWN:\n        if (start.pos[1] < end.pos[1] && start.pos[0] < end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_LEFT:\n        if (start.pos[1] === end.pos[1]) {\n          return 4;\n        }\n        return 2;\n    }\n  } else if (endHeading === HEADING_LEFT) {\n    switch (startHeading) {\n      case HEADING_RIGHT:\n        if (start.pos[1] === end.pos[1]) {\n          return 4;\n        }\n        return 2;\n      case HEADING_UP:\n        if (start.pos[1] > end.pos[1] && start.pos[0] > end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_DOWN:\n        if (start.pos[1] < end.pos[1] && start.pos[0] > end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_LEFT:\n        if (start.pos[0] <= end.pos[0]) {\n          return 4;\n        }\n        if (start.pos[1] === end.pos[1]) {\n          return 0;\n        }\n        return 2;\n    }\n  } else if (endHeading === HEADING_UP) {\n    switch (startHeading) {\n      case HEADING_RIGHT:\n        if (start.pos[1] > end.pos[1] && start.pos[0] < end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_UP:\n        if (start.pos[1] >= end.pos[1]) {\n          return 4;\n        }\n        if (start.pos[0] === end.pos[0]) {\n          return 0;\n        }\n        return 2;\n      case HEADING_DOWN:\n        if (start.pos[0] === end.pos[0]) {\n          return 4;\n        }\n        return 2;\n      case HEADING_LEFT:\n        if (start.pos[1] > end.pos[1] && start.pos[0] > end.pos[0]) {\n          return 1;\n        }\n        return 3;\n    }\n  } else if (endHeading === HEADING_DOWN) {\n    switch (startHeading) {\n      case HEADING_RIGHT:\n        if (start.pos[1] < end.pos[1] && start.pos[0] < end.pos[0]) {\n          return 1;\n        }\n        return 3;\n      case HEADING_UP:\n        if (start.pos[0] === end.pos[0]) {\n          return 4;\n        }\n        return 2;\n      case HEADING_DOWN:\n        if (start.pos[1] <= end.pos[1]) {\n          return 4;\n        }\n        if (start.pos[0] === end.pos[0]) {\n          return 0;\n        }\n        return 2;\n      case HEADING_LEFT:\n        if (start.pos[1] < end.pos[1] && start.pos[0] > end.pos[0]) {\n          return 1;\n        }\n        return 3;\n    }\n  }\n  return 0;\n};\n\n/**\n * Get neighboring points for a gived grid address\n */\nconst getNeighbors = ([col, row]: [number, number], grid: Grid) =>\n  [\n    gridNodeFromAddr([col, row - 1], grid),\n    gridNodeFromAddr([col + 1, row], grid),\n    gridNodeFromAddr([col, row + 1], grid),\n    gridNodeFromAddr([col - 1, row], grid),\n  ] as [Node | null, Node | null, Node | null, Node | null];\n\nconst gridNodeFromAddr = (\n  [col, row]: [col: number, row: number],\n  grid: Grid,\n): Node | null => {\n  if (col < 0 || col >= grid.col || row < 0 || row >= grid.row) {\n    return null;\n  }\n\n  return grid.data[row * grid.col + col] ?? null;\n};\n\n/**\n * Get node for global point on canvas (if exists)\n */\nconst pointToGridNode = (point: GlobalPoint, grid: Grid): Node | null => {\n  for (let col = 0; col < grid.col; col++) {\n    for (let row = 0; row < grid.row; row++) {\n      const candidate = gridNodeFromAddr([col, row], grid);\n      if (\n        candidate &&\n        point[0] === candidate.pos[0] &&\n        point[1] === candidate.pos[1]\n      ) {\n        return candidate;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst commonAABB = (aabbs: Bounds[]): Bounds => [\n  Math.min(...aabbs.map((aabb) => aabb[0])),\n  Math.min(...aabbs.map((aabb) => aabb[1])),\n  Math.max(...aabbs.map((aabb) => aabb[2])),\n  Math.max(...aabbs.map((aabb) => aabb[3])),\n];\n\n/// #region Utils\n\nconst getBindableElementForId = (\n  id: string,\n  elementsMap: ElementsMap,\n): ExcalidrawBindableElement | null => {\n  const element = elementsMap.get(id);\n  if (element && isBindableElement(element)) {\n    return element;\n  }\n\n  return null;\n};\n\nconst normalizeArrowElementUpdate = (\n  global: GlobalPoint[],\n  nextFixedSegments: readonly FixedSegment[] | null,\n  startIsSpecial?: ExcalidrawElbowArrowElement[\"startIsSpecial\"],\n  endIsSpecial?: ExcalidrawElbowArrowElement[\"startIsSpecial\"],\n): {\n  points: LocalPoint[];\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fixedSegments: readonly FixedSegment[] | null;\n  startIsSpecial?: ExcalidrawElbowArrowElement[\"startIsSpecial\"];\n  endIsSpecial?: ExcalidrawElbowArrowElement[\"startIsSpecial\"];\n} => {\n  const offsetX = global[0][0];\n  const offsetY = global[0][1];\n  let points = global.map((p) =>\n    pointTranslate<GlobalPoint, LocalPoint>(\n      p,\n      vectorScale(vectorFromPoint(global[0]), -1),\n    ),\n  );\n\n  // NOTE (mtolmacs): This is a temporary check to see if the normalization\n  // creates an overly large arrow. This should be removed once we have an answer.\n  if (\n    offsetX < -MAX_POS ||\n    offsetX > MAX_POS ||\n    offsetY < -MAX_POS ||\n    offsetY > MAX_POS ||\n    offsetX + points[points.length - 1][0] < -MAX_POS ||\n    offsetY + points[points.length - 1][0] > MAX_POS ||\n    offsetX + points[points.length - 1][1] < -MAX_POS ||\n    offsetY + points[points.length - 1][1] > MAX_POS\n  ) {\n    console.error(\n      \"Elbow arrow normalization is outside reasonable bounds (> 1e6)\",\n      {\n        x: offsetX,\n        y: offsetY,\n        points,\n        ...getSizeFromPoints(points),\n      },\n    );\n  }\n\n  points = points.map(([x, y]) =>\n    pointFrom<LocalPoint>(clamp(x, -1e6, 1e6), clamp(y, -1e6, 1e6)),\n  );\n\n  return {\n    points,\n    x: clamp(offsetX, -1e6, 1e6),\n    y: clamp(offsetY, -1e6, 1e6),\n    fixedSegments:\n      (nextFixedSegments?.length ?? 0) > 0 ? nextFixedSegments : null,\n    ...getSizeFromPoints(points),\n    startIsSpecial,\n    endIsSpecial,\n  };\n};\n\nconst getElbowArrowCornerPoints = (points: GlobalPoint[]): GlobalPoint[] => {\n  if (points.length > 1) {\n    let previousHorizontal =\n      Math.abs(points[0][1] - points[1][1]) <\n      Math.abs(points[0][0] - points[1][0]);\n\n    return points.filter((p, idx) => {\n      // The very first and last points are always kept\n      if (idx === 0 || idx === points.length - 1) {\n        return true;\n      }\n\n      const next = points[idx + 1];\n      const nextHorizontal =\n        Math.abs(p[1] - next[1]) < Math.abs(p[0] - next[0]);\n      if (previousHorizontal === nextHorizontal) {\n        previousHorizontal = nextHorizontal;\n        return false;\n      }\n\n      previousHorizontal = nextHorizontal;\n      return true;\n    });\n  }\n\n  return points;\n};\n\nconst removeElbowArrowShortSegments = (\n  points: GlobalPoint[],\n): GlobalPoint[] => {\n  if (points.length >= 4) {\n    return points.filter((p, idx) => {\n      if (idx === 0 || idx === points.length - 1) {\n        return true;\n      }\n\n      const prev = points[idx - 1];\n      const prevDist = pointDistance(prev, p);\n      return prevDist > DEDUP_TRESHOLD;\n    });\n  }\n\n  return points;\n};\n\nconst neighborIndexToHeading = (idx: number): Heading => {\n  switch (idx) {\n    case 0:\n      return HEADING_UP;\n    case 1:\n      return HEADING_RIGHT;\n    case 2:\n      return HEADING_DOWN;\n  }\n  return HEADING_LEFT;\n};\n\nconst getGlobalPoint = (\n  arrow: ExcalidrawElbowArrowElement,\n  startOrEnd: \"start\" | \"end\",\n  fixedPointRatio: [number, number] | undefined | null,\n  initialPoint: GlobalPoint,\n  element?: ExcalidrawBindableElement | null,\n  isDragging?: boolean,\n): GlobalPoint => {\n  if (isDragging) {\n    if (element) {\n      const snapPoint = bindPointToSnapToElementOutline(\n        arrow,\n        element,\n        startOrEnd,\n      );\n\n      return snapToMid(element, snapPoint);\n    }\n\n    return initialPoint;\n  }\n\n  if (element) {\n    const fixedGlobalPoint = getGlobalFixedPointForBindableElement(\n      fixedPointRatio || [0, 0],\n      element,\n    );\n\n    // NOTE: Resize scales the binding position point too, so we need to update it\n    return Math.abs(\n      distanceToBindableElement(element, fixedGlobalPoint) -\n        FIXED_BINDING_DISTANCE,\n    ) > 0.01\n      ? bindPointToSnapToElementOutline(arrow, element, startOrEnd)\n      : fixedGlobalPoint;\n  }\n\n  return initialPoint;\n};\n\nconst getBindPointHeading = (\n  p: GlobalPoint,\n  otherPoint: GlobalPoint,\n  elementsMap: NonDeletedSceneElementsMap | SceneElementsMap,\n  hoveredElement: ExcalidrawBindableElement | null | undefined,\n  origPoint: GlobalPoint,\n): Heading =>\n  getHeadingForElbowArrowSnap(\n    p,\n    otherPoint,\n    hoveredElement,\n    hoveredElement &&\n      aabbForElement(\n        hoveredElement,\n        Array(4).fill(distanceToBindableElement(hoveredElement, p)) as [\n          number,\n          number,\n          number,\n          number,\n        ],\n      ),\n    elementsMap,\n    origPoint,\n  );\n\nconst getHoveredElement = (\n  origPoint: GlobalPoint,\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  zoom?: AppState[\"zoom\"],\n) => {\n  return getHoveredElementForBinding(\n    tupleToCoors(origPoint),\n    elements,\n    elementsMap,\n    zoom,\n    true,\n    true,\n  );\n};\n\nconst gridAddressesEqual = (a: GridAddress, b: GridAddress): boolean =>\n  a[0] === b[0] && a[1] === b[1];\n\nexport const validateElbowPoints = <P extends GlobalPoint | LocalPoint>(\n  points: readonly P[],\n  tolerance: number = DEDUP_TRESHOLD,\n) =>\n  points\n    .slice(1)\n    .map(\n      (p, i) =>\n        Math.abs(p[0] - points[i][0]) < tolerance ||\n        Math.abs(p[1] - points[i][1]) < tolerance,\n    )\n    .every(Boolean);\n", "import {\n  KEYS,\n  arrayToMap,\n  isBindingFallthroughEnabled,\n  tupleToCoors,\n  invariant,\n  isDevEnv,\n  isTestEnv,\n} from \"@excalidraw/common\";\n\nimport {\n  lineSegment,\n  pointFrom,\n  pointRotateRads,\n  type GlobalPoint,\n  vectorFromPoint,\n  pointDistanceSq,\n  clamp,\n  pointDistance,\n  pointFromVector,\n  vectorScale,\n  vectorNormalize,\n  vectorCross,\n  pointsEqual,\n  lineSegmentIntersectionPoints,\n  PRECISION,\n} from \"@excalidraw/math\";\n\nimport { isPointOnShape } from \"@excalidraw/utils/collision\";\n\nimport type { LocalPoint, Radians } from \"@excalidraw/math\";\n\nimport type Scene from \"@excalidraw/excalidraw/scene/Scene\";\n\nimport type { AppState } from \"@excalidraw/excalidraw/types\";\n\nimport type { Mutable } from \"@excalidraw/common/utility-types\";\n\nimport {\n  getCenterForBounds,\n  getElementBounds,\n  doBoundsIntersect,\n} from \"./bounds\";\nimport { intersectElementWithLineSegment } from \"./collision\";\nimport { distanceToBindableElement } from \"./distance\";\nimport {\n  headingForPointFromElement,\n  headingIsHorizontal,\n  vectorToHeading,\n  type Heading,\n} from \"./heading\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { mutateElement } from \"./mutateElement\";\nimport { getBoundTextElement, handleBindTextResize } from \"./textElement\";\nimport {\n  isArrowElement,\n  isBindableElement,\n  isBoundToContainer,\n  isElbowArrow,\n  isFixedPointBinding,\n  isFrameLikeElement,\n  isLinearElement,\n  isRectanguloidElement,\n  isTextElement,\n} from \"./typeChecks\";\n\nimport { aabbForElement, getElementShape, pointInsideBounds } from \"./shapes\";\nimport { updateElbowArrowPoints } from \"./elbowArrow\";\n\nimport type { Bounds } from \"./bounds\";\nimport type { ElementUpdate } from \"./mutateElement\";\nimport type {\n  ExcalidrawBindableElement,\n  ExcalidrawElement,\n  NonDeleted,\n  ExcalidrawLinearElement,\n  PointBinding,\n  NonDeletedExcalidrawElement,\n  ElementsMap,\n  NonDeletedSceneElementsMap,\n  ExcalidrawTextElement,\n  ExcalidrawArrowElement,\n  OrderedExcalidrawElement,\n  ExcalidrawElbowArrowElement,\n  FixedPoint,\n  SceneElementsMap,\n  FixedPointBinding,\n} from \"./types\";\n\nexport type SuggestedBinding =\n  | NonDeleted<ExcalidrawBindableElement>\n  | SuggestedPointBinding;\n\nexport type SuggestedPointBinding = [\n  NonDeleted<ExcalidrawLinearElement>,\n  \"start\" | \"end\" | \"both\",\n  NonDeleted<ExcalidrawBindableElement>,\n];\n\nexport const shouldEnableBindingForPointerEvent = (\n  event: React.PointerEvent<HTMLElement>,\n) => {\n  return !event[KEYS.CTRL_OR_CMD];\n};\n\nexport const isBindingEnabled = (appState: AppState): boolean => {\n  return appState.isBindingEnabled;\n};\n\nexport const FIXED_BINDING_DISTANCE = 5;\nexport const BINDING_HIGHLIGHT_THICKNESS = 10;\nexport const BINDING_HIGHLIGHT_OFFSET = 4;\n\nconst getNonDeletedElements = (\n  scene: Scene,\n  ids: readonly ExcalidrawElement[\"id\"][],\n): NonDeleted<ExcalidrawElement>[] => {\n  const result: NonDeleted<ExcalidrawElement>[] = [];\n  ids.forEach((id) => {\n    const element = scene.getNonDeletedElement(id);\n    if (element != null) {\n      result.push(element);\n    }\n  });\n  return result;\n};\n\nexport const bindOrUnbindLinearElement = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  startBindingElement: ExcalidrawBindableElement | null | \"keep\",\n  endBindingElement: ExcalidrawBindableElement | null | \"keep\",\n  elementsMap: NonDeletedSceneElementsMap,\n  scene: Scene,\n): void => {\n  const boundToElementIds: Set<ExcalidrawBindableElement[\"id\"]> = new Set();\n  const unboundFromElementIds: Set<ExcalidrawBindableElement[\"id\"]> = new Set();\n  bindOrUnbindLinearElementEdge(\n    linearElement,\n    startBindingElement,\n    endBindingElement,\n    \"start\",\n    boundToElementIds,\n    unboundFromElementIds,\n    elementsMap,\n  );\n  bindOrUnbindLinearElementEdge(\n    linearElement,\n    endBindingElement,\n    startBindingElement,\n    \"end\",\n    boundToElementIds,\n    unboundFromElementIds,\n    elementsMap,\n  );\n\n  const onlyUnbound = Array.from(unboundFromElementIds).filter(\n    (id) => !boundToElementIds.has(id),\n  );\n\n  getNonDeletedElements(scene, onlyUnbound).forEach((element) => {\n    mutateElement(element, {\n      boundElements: element.boundElements?.filter(\n        (element) =>\n          element.type !== \"arrow\" || element.id !== linearElement.id,\n      ),\n    });\n  });\n};\n\nconst bindOrUnbindLinearElementEdge = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  bindableElement: ExcalidrawBindableElement | null | \"keep\",\n  otherEdgeBindableElement: ExcalidrawBindableElement | null | \"keep\",\n  startOrEnd: \"start\" | \"end\",\n  // Is mutated\n  boundToElementIds: Set<ExcalidrawBindableElement[\"id\"]>,\n  // Is mutated\n  unboundFromElementIds: Set<ExcalidrawBindableElement[\"id\"]>,\n  elementsMap: NonDeletedSceneElementsMap,\n): void => {\n  // \"keep\" is for method chaining convenience, a \"no-op\", so just bail out\n  if (bindableElement === \"keep\") {\n    return;\n  }\n\n  // null means break the bind, so nothing to consider here\n  if (bindableElement === null) {\n    const unbound = unbindLinearElement(linearElement, startOrEnd);\n    if (unbound != null) {\n      unboundFromElementIds.add(unbound);\n    }\n    return;\n  }\n\n  // While complext arrows can do anything, simple arrow with both ends trying\n  // to bind to the same bindable should not be allowed, start binding takes\n  // precedence\n  if (isLinearElementSimple(linearElement)) {\n    if (\n      otherEdgeBindableElement == null ||\n      (otherEdgeBindableElement === \"keep\"\n        ? // TODO: Refactor - Needlessly complex\n          !isLinearElementSimpleAndAlreadyBoundOnOppositeEdge(\n            linearElement,\n            bindableElement,\n            startOrEnd,\n          )\n        : startOrEnd === \"start\" ||\n          otherEdgeBindableElement.id !== bindableElement.id)\n    ) {\n      bindLinearElement(\n        linearElement,\n        bindableElement,\n        startOrEnd,\n        elementsMap,\n      );\n      boundToElementIds.add(bindableElement.id);\n    }\n  } else {\n    bindLinearElement(linearElement, bindableElement, startOrEnd, elementsMap);\n    boundToElementIds.add(bindableElement.id);\n  }\n};\n\nconst getOriginalBindingIfStillCloseOfLinearElementEdge = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  edge: \"start\" | \"end\",\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom?: AppState[\"zoom\"],\n): NonDeleted<ExcalidrawElement> | null => {\n  const coors = getLinearElementEdgeCoors(linearElement, edge, elementsMap);\n  const elementId =\n    edge === \"start\"\n      ? linearElement.startBinding?.elementId\n      : linearElement.endBinding?.elementId;\n  if (elementId) {\n    const element = elementsMap.get(elementId);\n    if (\n      isBindableElement(element) &&\n      bindingBorderTest(element, coors, elementsMap, zoom)\n    ) {\n      return element;\n    }\n  }\n\n  return null;\n};\n\nconst getOriginalBindingsIfStillCloseToArrowEnds = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom?: AppState[\"zoom\"],\n): (NonDeleted<ExcalidrawElement> | null)[] =>\n  [\"start\", \"end\"].map((edge) =>\n    getOriginalBindingIfStillCloseOfLinearElementEdge(\n      linearElement,\n      edge as \"start\" | \"end\",\n      elementsMap,\n      zoom,\n    ),\n  );\n\nconst getBindingStrategyForDraggingArrowEndpoints = (\n  selectedElement: NonDeleted<ExcalidrawLinearElement>,\n  isBindingEnabled: boolean,\n  draggingPoints: readonly number[],\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  zoom?: AppState[\"zoom\"],\n): (NonDeleted<ExcalidrawBindableElement> | null | \"keep\")[] => {\n  const startIdx = 0;\n  const endIdx = selectedElement.points.length - 1;\n  const startDragged = draggingPoints.findIndex((i) => i === startIdx) > -1;\n  const endDragged = draggingPoints.findIndex((i) => i === endIdx) > -1;\n  const start = startDragged\n    ? isBindingEnabled\n      ? getElligibleElementForBindingElement(\n          selectedElement,\n          \"start\",\n          elementsMap,\n          elements,\n          zoom,\n        )\n      : null // If binding is disabled and start is dragged, break all binds\n    : !isElbowArrow(selectedElement)\n    ? // We have to update the focus and gap of the binding, so let's rebind\n      getElligibleElementForBindingElement(\n        selectedElement,\n        \"start\",\n        elementsMap,\n        elements,\n        zoom,\n      )\n    : \"keep\";\n  const end = endDragged\n    ? isBindingEnabled\n      ? getElligibleElementForBindingElement(\n          selectedElement,\n          \"end\",\n          elementsMap,\n          elements,\n          zoom,\n        )\n      : null // If binding is disabled and end is dragged, break all binds\n    : !isElbowArrow(selectedElement)\n    ? // We have to update the focus and gap of the binding, so let's rebind\n      getElligibleElementForBindingElement(\n        selectedElement,\n        \"end\",\n        elementsMap,\n        elements,\n        zoom,\n      )\n    : \"keep\";\n\n  return [start, end];\n};\n\nconst getBindingStrategyForDraggingArrowOrJoints = (\n  selectedElement: NonDeleted<ExcalidrawLinearElement>,\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  isBindingEnabled: boolean,\n  zoom?: AppState[\"zoom\"],\n): (NonDeleted<ExcalidrawBindableElement> | null | \"keep\")[] => {\n  // Elbow arrows don't bind when dragged as a whole\n  if (isElbowArrow(selectedElement)) {\n    return [\"keep\", \"keep\"];\n  }\n\n  const [startIsClose, endIsClose] = getOriginalBindingsIfStillCloseToArrowEnds(\n    selectedElement,\n    elementsMap,\n    zoom,\n  );\n  const start = startIsClose\n    ? isBindingEnabled\n      ? getElligibleElementForBindingElement(\n          selectedElement,\n          \"start\",\n          elementsMap,\n          elements,\n          zoom,\n        )\n      : null\n    : null;\n  const end = endIsClose\n    ? isBindingEnabled\n      ? getElligibleElementForBindingElement(\n          selectedElement,\n          \"end\",\n          elementsMap,\n          elements,\n          zoom,\n        )\n      : null\n    : null;\n\n  return [start, end];\n};\n\nexport const bindOrUnbindLinearElements = (\n  selectedElements: NonDeleted<ExcalidrawLinearElement>[],\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  scene: Scene,\n  isBindingEnabled: boolean,\n  draggingPoints: readonly number[] | null,\n  zoom?: AppState[\"zoom\"],\n): void => {\n  selectedElements.forEach((selectedElement) => {\n    const [start, end] = draggingPoints?.length\n      ? // The arrow edge points are dragged (i.e. start, end)\n        getBindingStrategyForDraggingArrowEndpoints(\n          selectedElement,\n          isBindingEnabled,\n          draggingPoints ?? [],\n          elementsMap,\n          elements,\n          zoom,\n        )\n      : // The arrow itself (the shaft) or the inner joins are dragged\n        getBindingStrategyForDraggingArrowOrJoints(\n          selectedElement,\n          elementsMap,\n          elements,\n          isBindingEnabled,\n          zoom,\n        );\n\n    bindOrUnbindLinearElement(selectedElement, start, end, elementsMap, scene);\n  });\n};\n\nexport const getSuggestedBindingsForArrows = (\n  selectedElements: NonDeleted<ExcalidrawElement>[],\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom: AppState[\"zoom\"],\n): SuggestedBinding[] => {\n  // HOT PATH: Bail out if selected elements list is too large\n  if (selectedElements.length > 50) {\n    return [];\n  }\n\n  return (\n    selectedElements\n      .filter(isLinearElement)\n      .flatMap((element) =>\n        getOriginalBindingsIfStillCloseToArrowEnds(element, elementsMap, zoom),\n      )\n      .filter(\n        (element): element is NonDeleted<ExcalidrawBindableElement> =>\n          element !== null,\n      )\n      // Filter out bind candidates which are in the\n      // same selection / group with the arrow\n      //\n      // TODO: Is it worth turning the list into a set to avoid dupes?\n      .filter(\n        (element) =>\n          selectedElements.filter((selected) => selected.id === element?.id)\n            .length === 0,\n      )\n  );\n};\n\nexport const maybeBindLinearElement = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  appState: AppState,\n  pointerCoords: { x: number; y: number },\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n): void => {\n  if (appState.startBoundElement != null) {\n    bindLinearElement(\n      linearElement,\n      appState.startBoundElement,\n      \"start\",\n      elementsMap,\n    );\n  }\n\n  const hoveredElement = getHoveredElementForBinding(\n    pointerCoords,\n    elements,\n    elementsMap,\n    appState.zoom,\n    isElbowArrow(linearElement),\n    isElbowArrow(linearElement),\n  );\n\n  if (hoveredElement !== null) {\n    if (\n      !isLinearElementSimpleAndAlreadyBoundOnOppositeEdge(\n        linearElement,\n        hoveredElement,\n        \"end\",\n      )\n    ) {\n      bindLinearElement(linearElement, hoveredElement, \"end\", elementsMap);\n    }\n  }\n};\n\nconst normalizePointBinding = (\n  binding: { focus: number; gap: number },\n  hoveredElement: ExcalidrawBindableElement,\n) => {\n  let gap = binding.gap;\n  const maxGap = maxBindingGap(\n    hoveredElement,\n    hoveredElement.width,\n    hoveredElement.height,\n  );\n\n  if (gap > maxGap) {\n    gap = BINDING_HIGHLIGHT_THICKNESS + BINDING_HIGHLIGHT_OFFSET;\n  }\n  return {\n    ...binding,\n    gap,\n  };\n};\n\nexport const bindLinearElement = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  hoveredElement: ExcalidrawBindableElement,\n  startOrEnd: \"start\" | \"end\",\n  elementsMap: NonDeletedSceneElementsMap,\n): void => {\n  if (!isArrowElement(linearElement)) {\n    return;\n  }\n\n  let binding: PointBinding | FixedPointBinding = {\n    elementId: hoveredElement.id,\n    ...normalizePointBinding(\n      calculateFocusAndGap(\n        linearElement,\n        hoveredElement,\n        startOrEnd,\n        elementsMap,\n      ),\n      hoveredElement,\n    ),\n  };\n\n  if (isElbowArrow(linearElement)) {\n    binding = {\n      ...binding,\n      ...calculateFixedPointForElbowArrowBinding(\n        linearElement,\n        hoveredElement,\n        startOrEnd,\n        elementsMap,\n      ),\n    };\n  }\n\n  mutateElement(linearElement, {\n    [startOrEnd === \"start\" ? \"startBinding\" : \"endBinding\"]: binding,\n  });\n\n  const boundElementsMap = arrayToMap(hoveredElement.boundElements || []);\n  if (!boundElementsMap.has(linearElement.id)) {\n    mutateElement(hoveredElement, {\n      boundElements: (hoveredElement.boundElements || []).concat({\n        id: linearElement.id,\n        type: \"arrow\",\n      }),\n    });\n  }\n};\n\n// Don't bind both ends of a simple segment\nconst isLinearElementSimpleAndAlreadyBoundOnOppositeEdge = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  bindableElement: ExcalidrawBindableElement,\n  startOrEnd: \"start\" | \"end\",\n): boolean => {\n  const otherBinding =\n    linearElement[startOrEnd === \"start\" ? \"endBinding\" : \"startBinding\"];\n  return isLinearElementSimpleAndAlreadyBound(\n    linearElement,\n    otherBinding?.elementId,\n    bindableElement,\n  );\n};\n\nexport const isLinearElementSimpleAndAlreadyBound = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  alreadyBoundToId: ExcalidrawBindableElement[\"id\"] | undefined,\n  bindableElement: ExcalidrawBindableElement,\n): boolean => {\n  return (\n    alreadyBoundToId === bindableElement.id &&\n    isLinearElementSimple(linearElement)\n  );\n};\n\nconst isLinearElementSimple = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n): boolean => linearElement.points.length < 3;\n\nconst unbindLinearElement = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  startOrEnd: \"start\" | \"end\",\n): ExcalidrawBindableElement[\"id\"] | null => {\n  const field = startOrEnd === \"start\" ? \"startBinding\" : \"endBinding\";\n  const binding = linearElement[field];\n  if (binding == null) {\n    return null;\n  }\n  mutateElement(linearElement, { [field]: null });\n  return binding.elementId;\n};\n\nexport const getHoveredElementForBinding = (\n  pointerCoords: {\n    x: number;\n    y: number;\n  },\n  elements: readonly NonDeletedExcalidrawElement[],\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom?: AppState[\"zoom\"],\n  fullShape?: boolean,\n  considerAllElements?: boolean,\n): NonDeleted<ExcalidrawBindableElement> | null => {\n  if (considerAllElements) {\n    let cullRest = false;\n    const candidateElements = getAllElementsAtPositionForBinding(\n      elements,\n      (element) =>\n        isBindableElement(element, false) &&\n        bindingBorderTest(\n          element,\n          pointerCoords,\n          elementsMap,\n          zoom,\n          (fullShape ||\n            !isBindingFallthroughEnabled(\n              element as ExcalidrawBindableElement,\n            )) &&\n            // disable fullshape snapping for frame elements so we\n            // can bind to frame children\n            !isFrameLikeElement(element),\n        ),\n    ).filter((element) => {\n      if (cullRest) {\n        return false;\n      }\n\n      if (!isBindingFallthroughEnabled(element as ExcalidrawBindableElement)) {\n        cullRest = true;\n      }\n\n      return true;\n    }) as NonDeleted<ExcalidrawBindableElement>[] | null;\n\n    // Return early if there are no candidates or just one candidate\n    if (!candidateElements || candidateElements.length === 0) {\n      return null;\n    }\n\n    if (candidateElements.length === 1) {\n      return candidateElements[0] as NonDeleted<ExcalidrawBindableElement>;\n    }\n\n    // Prefer the shape with the border being tested (if any)\n    const borderTestElements = candidateElements.filter((element) =>\n      bindingBorderTest(element, pointerCoords, elementsMap, zoom, false),\n    );\n    if (borderTestElements.length === 1) {\n      return borderTestElements[0];\n    }\n\n    // Prefer smaller shapes\n    return candidateElements\n      .sort(\n        (a, b) => b.width ** 2 + b.height ** 2 - (a.width ** 2 + a.height ** 2),\n      )\n      .pop() as NonDeleted<ExcalidrawBindableElement>;\n  }\n\n  const hoveredElement = getElementAtPositionForBinding(\n    elements,\n    (element) =>\n      isBindableElement(element, false) &&\n      bindingBorderTest(\n        element,\n        pointerCoords,\n        elementsMap,\n        zoom,\n        // disable fullshape snapping for frame elements so we\n        // can bind to frame children\n        (fullShape || !isBindingFallthroughEnabled(element)) &&\n          !isFrameLikeElement(element),\n      ),\n  );\n\n  return hoveredElement as NonDeleted<ExcalidrawBindableElement> | null;\n};\n\nconst getElementAtPositionForBinding = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  isAtPositionFn: (element: NonDeletedExcalidrawElement) => boolean,\n) => {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  // because array is ordered from lower z-index to highest and we want element z-index\n  // with higher z-index\n  for (let index = elements.length - 1; index >= 0; --index) {\n    const element = elements[index];\n    if (element.isDeleted) {\n      continue;\n    }\n    if (isAtPositionFn(element)) {\n      hitElement = element;\n      break;\n    }\n  }\n\n  return hitElement;\n};\n\nconst getAllElementsAtPositionForBinding = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  isAtPositionFn: (element: NonDeletedExcalidrawElement) => boolean,\n) => {\n  const elementsAtPosition: NonDeletedExcalidrawElement[] = [];\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  // because array is ordered from lower z-index to highest and we want element z-index\n  // with higher z-index\n  for (let index = elements.length - 1; index >= 0; --index) {\n    const element = elements[index];\n    if (element.isDeleted) {\n      continue;\n    }\n\n    if (isAtPositionFn(element)) {\n      elementsAtPosition.push(element);\n    }\n  }\n\n  return elementsAtPosition;\n};\n\nconst calculateFocusAndGap = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  hoveredElement: ExcalidrawBindableElement,\n  startOrEnd: \"start\" | \"end\",\n  elementsMap: NonDeletedSceneElementsMap,\n): { focus: number; gap: number } => {\n  const direction = startOrEnd === \"start\" ? -1 : 1;\n  const edgePointIndex = direction === -1 ? 0 : linearElement.points.length - 1;\n  const adjacentPointIndex = edgePointIndex - direction;\n\n  const edgePoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n    linearElement,\n    edgePointIndex,\n    elementsMap,\n  );\n  const adjacentPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n    linearElement,\n    adjacentPointIndex,\n    elementsMap,\n  );\n\n  return {\n    focus: determineFocusDistance(hoveredElement, adjacentPoint, edgePoint),\n    gap: Math.max(1, distanceToBindableElement(hoveredElement, edgePoint)),\n  };\n};\n\n// Supports translating, rotating and scaling `changedElement` with bound\n// linear elements.\n// Because scaling involves moving the focus points as well, it is\n// done before the `changedElement` is updated, and the `newSize` is passed\n// in explicitly.\nexport const updateBoundElements = (\n  changedElement: NonDeletedExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap | SceneElementsMap,\n  options?: {\n    simultaneouslyUpdated?: readonly ExcalidrawElement[];\n    newSize?: { width: number; height: number };\n    changedElements?: Map<string, OrderedExcalidrawElement>;\n  },\n) => {\n  const { newSize, simultaneouslyUpdated } = options ?? {};\n  const simultaneouslyUpdatedElementIds = getSimultaneouslyUpdatedElementIds(\n    simultaneouslyUpdated,\n  );\n\n  if (!isBindableElement(changedElement)) {\n    return;\n  }\n\n  boundElementsVisitor(elementsMap, changedElement, (element) => {\n    if (!isLinearElement(element) || element.isDeleted) {\n      return;\n    }\n\n    // In case the boundElements are stale\n    if (!doesNeedUpdate(element, changedElement)) {\n      return;\n    }\n\n    // Check for intersections before updating bound elements incase connected elements overlap\n    const startBindingElement = element.startBinding\n      ? elementsMap.get(element.startBinding.elementId)\n      : null;\n    const endBindingElement = element.endBinding\n      ? elementsMap.get(element.endBinding.elementId)\n      : null;\n\n    let startBounds: Bounds | null = null;\n    let endBounds: Bounds | null = null;\n    if (startBindingElement && endBindingElement) {\n      startBounds = getElementBounds(startBindingElement, elementsMap);\n      endBounds = getElementBounds(endBindingElement, elementsMap);\n    }\n\n    const bindings = {\n      startBinding: maybeCalculateNewGapWhenScaling(\n        changedElement,\n        element.startBinding,\n        newSize,\n      ),\n      endBinding: maybeCalculateNewGapWhenScaling(\n        changedElement,\n        element.endBinding,\n        newSize,\n      ),\n    };\n\n    // `linearElement` is being moved/scaled already, just update the binding\n    if (simultaneouslyUpdatedElementIds.has(element.id)) {\n      mutateElement(element, bindings, true);\n      return;\n    }\n\n    const updates = bindableElementsVisitor(\n      elementsMap,\n      element,\n      (bindableElement, bindingProp) => {\n        if (\n          bindableElement &&\n          isBindableElement(bindableElement) &&\n          (bindingProp === \"startBinding\" || bindingProp === \"endBinding\") &&\n          (changedElement.id === element[bindingProp]?.elementId ||\n            (changedElement.id ===\n              element[\n                bindingProp === \"startBinding\" ? \"endBinding\" : \"startBinding\"\n              ]?.elementId &&\n              !doBoundsIntersect(startBounds, endBounds)))\n        ) {\n          const point = updateBoundPoint(\n            element,\n            bindingProp,\n            bindings[bindingProp],\n            bindableElement,\n            elementsMap,\n          );\n          if (point) {\n            return {\n              index:\n                bindingProp === \"startBinding\" ? 0 : element.points.length - 1,\n              point,\n            };\n          }\n        }\n\n        return null;\n      },\n    ).filter(\n      (\n        update,\n      ): update is NonNullable<{\n        index: number;\n        point: LocalPoint;\n        isDragging?: boolean;\n      }> => update !== null,\n    );\n\n    LinearElementEditor.movePoints(\n      element,\n      updates,\n      {\n        ...(changedElement.id === element.startBinding?.elementId\n          ? { startBinding: bindings.startBinding }\n          : {}),\n        ...(changedElement.id === element.endBinding?.elementId\n          ? { endBinding: bindings.endBinding }\n          : {}),\n      },\n      elementsMap as NonDeletedSceneElementsMap,\n    );\n\n    const boundText = getBoundTextElement(element, elementsMap);\n    if (boundText && !boundText.isDeleted) {\n      handleBindTextResize(element, elementsMap, false);\n    }\n  });\n};\n\nconst doesNeedUpdate = (\n  boundElement: NonDeleted<ExcalidrawLinearElement>,\n  changedElement: ExcalidrawBindableElement,\n) => {\n  return (\n    boundElement.startBinding?.elementId === changedElement.id ||\n    boundElement.endBinding?.elementId === changedElement.id\n  );\n};\n\nconst getSimultaneouslyUpdatedElementIds = (\n  simultaneouslyUpdated: readonly ExcalidrawElement[] | undefined,\n): Set<ExcalidrawElement[\"id\"]> => {\n  return new Set((simultaneouslyUpdated || []).map((element) => element.id));\n};\n\nexport const getHeadingForElbowArrowSnap = (\n  p: Readonly<GlobalPoint>,\n  otherPoint: Readonly<GlobalPoint>,\n  bindableElement: ExcalidrawBindableElement | undefined | null,\n  aabb: Bounds | undefined | null,\n  elementsMap: ElementsMap,\n  origPoint: GlobalPoint,\n  zoom?: AppState[\"zoom\"],\n): Heading => {\n  const otherPointHeading = vectorToHeading(vectorFromPoint(otherPoint, p));\n\n  if (!bindableElement || !aabb) {\n    return otherPointHeading;\n  }\n\n  const distance = getDistanceForBinding(\n    origPoint,\n    bindableElement,\n    elementsMap,\n    zoom,\n  );\n\n  if (!distance) {\n    return vectorToHeading(\n      vectorFromPoint(\n        p,\n        pointFrom<GlobalPoint>(\n          bindableElement.x + bindableElement.width / 2,\n          bindableElement.y + bindableElement.height / 2,\n        ),\n      ),\n    );\n  }\n\n  return headingForPointFromElement(bindableElement, aabb, p);\n};\n\nconst getDistanceForBinding = (\n  point: Readonly<GlobalPoint>,\n  bindableElement: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n  zoom?: AppState[\"zoom\"],\n) => {\n  const distance = distanceToBindableElement(bindableElement, point);\n  const bindDistance = maxBindingGap(\n    bindableElement,\n    bindableElement.width,\n    bindableElement.height,\n    zoom,\n  );\n\n  return distance > bindDistance ? null : distance;\n};\n\nexport const bindPointToSnapToElementOutline = (\n  arrow: ExcalidrawElbowArrowElement,\n  bindableElement: ExcalidrawBindableElement,\n  startOrEnd: \"start\" | \"end\",\n): GlobalPoint => {\n  if (isDevEnv() || isTestEnv()) {\n    invariant(arrow.points.length > 1, \"Arrow should have at least 2 points\");\n  }\n\n  const aabb = aabbForElement(bindableElement);\n  const localP =\n    arrow.points[startOrEnd === \"start\" ? 0 : arrow.points.length - 1];\n  const globalP = pointFrom<GlobalPoint>(\n    arrow.x + localP[0],\n    arrow.y + localP[1],\n  );\n  const edgePoint = isRectanguloidElement(bindableElement)\n    ? avoidRectangularCorner(bindableElement, globalP)\n    : globalP;\n  const elbowed = isElbowArrow(arrow);\n  const center = getCenterForBounds(aabb);\n  const adjacentPointIdx = startOrEnd === \"start\" ? 1 : arrow.points.length - 2;\n  const adjacentPoint = pointRotateRads(\n    pointFrom<GlobalPoint>(\n      arrow.x + arrow.points[adjacentPointIdx][0],\n      arrow.y + arrow.points[adjacentPointIdx][1],\n    ),\n    center,\n    arrow.angle ?? 0,\n  );\n\n  let intersection: GlobalPoint | null = null;\n  if (elbowed) {\n    const isHorizontal = headingIsHorizontal(\n      headingForPointFromElement(bindableElement, aabb, globalP),\n    );\n    const otherPoint = pointFrom<GlobalPoint>(\n      isHorizontal ? center[0] : edgePoint[0],\n      !isHorizontal ? center[1] : edgePoint[1],\n    );\n    intersection = intersectElementWithLineSegment(\n      bindableElement,\n      lineSegment(\n        otherPoint,\n        pointFromVector(\n          vectorScale(\n            vectorNormalize(vectorFromPoint(edgePoint, otherPoint)),\n            Math.max(bindableElement.width, bindableElement.height) * 2,\n          ),\n          otherPoint,\n        ),\n      ),\n    )[0];\n  } else {\n    intersection = intersectElementWithLineSegment(\n      bindableElement,\n      lineSegment(\n        adjacentPoint,\n        pointFromVector(\n          vectorScale(\n            vectorNormalize(vectorFromPoint(edgePoint, adjacentPoint)),\n            pointDistance(edgePoint, adjacentPoint) +\n              Math.max(bindableElement.width, bindableElement.height) * 2,\n          ),\n          adjacentPoint,\n        ),\n      ),\n      FIXED_BINDING_DISTANCE,\n    ).sort(\n      (g, h) =>\n        pointDistanceSq(g, adjacentPoint) - pointDistanceSq(h, adjacentPoint),\n    )[0];\n  }\n\n  if (\n    !intersection ||\n    // Too close to determine vector from intersection to edgePoint\n    pointDistanceSq(edgePoint, intersection) < PRECISION\n  ) {\n    return edgePoint;\n  }\n\n  if (elbowed) {\n    const scalar =\n      pointDistanceSq(edgePoint, center) -\n        pointDistanceSq(intersection, center) >\n      0\n        ? FIXED_BINDING_DISTANCE\n        : -FIXED_BINDING_DISTANCE;\n\n    return pointFromVector(\n      vectorScale(\n        vectorNormalize(vectorFromPoint(edgePoint, intersection)),\n        scalar,\n      ),\n      intersection,\n    );\n  }\n\n  return edgePoint;\n};\n\nexport const avoidRectangularCorner = (\n  element: ExcalidrawBindableElement,\n  p: GlobalPoint,\n): GlobalPoint => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n  const nonRotatedPoint = pointRotateRads(p, center, -element.angle as Radians);\n\n  if (nonRotatedPoint[0] < element.x && nonRotatedPoint[1] < element.y) {\n    // Top left\n    if (nonRotatedPoint[1] - element.y > -FIXED_BINDING_DISTANCE) {\n      return pointRotateRads<GlobalPoint>(\n        pointFrom(element.x - FIXED_BINDING_DISTANCE, element.y),\n        center,\n        element.angle,\n      );\n    }\n    return pointRotateRads(\n      pointFrom(element.x, element.y - FIXED_BINDING_DISTANCE),\n      center,\n      element.angle,\n    );\n  } else if (\n    nonRotatedPoint[0] < element.x &&\n    nonRotatedPoint[1] > element.y + element.height\n  ) {\n    // Bottom left\n    if (nonRotatedPoint[0] - element.x > -FIXED_BINDING_DISTANCE) {\n      return pointRotateRads(\n        pointFrom(\n          element.x,\n          element.y + element.height + FIXED_BINDING_DISTANCE,\n        ),\n        center,\n        element.angle,\n      );\n    }\n    return pointRotateRads(\n      pointFrom(element.x - FIXED_BINDING_DISTANCE, element.y + element.height),\n      center,\n      element.angle,\n    );\n  } else if (\n    nonRotatedPoint[0] > element.x + element.width &&\n    nonRotatedPoint[1] > element.y + element.height\n  ) {\n    // Bottom right\n    if (\n      nonRotatedPoint[0] - element.x <\n      element.width + FIXED_BINDING_DISTANCE\n    ) {\n      return pointRotateRads(\n        pointFrom(\n          element.x + element.width,\n          element.y + element.height + FIXED_BINDING_DISTANCE,\n        ),\n        center,\n        element.angle,\n      );\n    }\n    return pointRotateRads(\n      pointFrom(\n        element.x + element.width + FIXED_BINDING_DISTANCE,\n        element.y + element.height,\n      ),\n      center,\n      element.angle,\n    );\n  } else if (\n    nonRotatedPoint[0] > element.x + element.width &&\n    nonRotatedPoint[1] < element.y\n  ) {\n    // Top right\n    if (\n      nonRotatedPoint[0] - element.x <\n      element.width + FIXED_BINDING_DISTANCE\n    ) {\n      return pointRotateRads(\n        pointFrom(\n          element.x + element.width,\n          element.y - FIXED_BINDING_DISTANCE,\n        ),\n        center,\n        element.angle,\n      );\n    }\n    return pointRotateRads(\n      pointFrom(element.x + element.width + FIXED_BINDING_DISTANCE, element.y),\n      center,\n      element.angle,\n    );\n  }\n\n  return p;\n};\n\nexport const snapToMid = (\n  element: ExcalidrawBindableElement,\n  p: GlobalPoint,\n  tolerance: number = 0.05,\n): GlobalPoint => {\n  const { x, y, width, height, angle } = element;\n  const center = pointFrom<GlobalPoint>(\n    x + width / 2 - 0.1,\n    y + height / 2 - 0.1,\n  );\n  const nonRotated = pointRotateRads(p, center, -angle as Radians);\n\n  // snap-to-center point is adaptive to element size, but we don't want to go\n  // above and below certain px distance\n  const verticalThrehsold = clamp(tolerance * height, 5, 80);\n  const horizontalThrehsold = clamp(tolerance * width, 5, 80);\n\n  if (\n    nonRotated[0] <= x + width / 2 &&\n    nonRotated[1] > center[1] - verticalThrehsold &&\n    nonRotated[1] < center[1] + verticalThrehsold\n  ) {\n    // LEFT\n    return pointRotateRads(\n      pointFrom(x - FIXED_BINDING_DISTANCE, center[1]),\n      center,\n      angle,\n    );\n  } else if (\n    nonRotated[1] <= y + height / 2 &&\n    nonRotated[0] > center[0] - horizontalThrehsold &&\n    nonRotated[0] < center[0] + horizontalThrehsold\n  ) {\n    // TOP\n    return pointRotateRads(\n      pointFrom(center[0], y - FIXED_BINDING_DISTANCE),\n      center,\n      angle,\n    );\n  } else if (\n    nonRotated[0] >= x + width / 2 &&\n    nonRotated[1] > center[1] - verticalThrehsold &&\n    nonRotated[1] < center[1] + verticalThrehsold\n  ) {\n    // RIGHT\n    return pointRotateRads(\n      pointFrom(x + width + FIXED_BINDING_DISTANCE, center[1]),\n      center,\n      angle,\n    );\n  } else if (\n    nonRotated[1] >= y + height / 2 &&\n    nonRotated[0] > center[0] - horizontalThrehsold &&\n    nonRotated[0] < center[0] + horizontalThrehsold\n  ) {\n    // DOWN\n    return pointRotateRads(\n      pointFrom(center[0], y + height + FIXED_BINDING_DISTANCE),\n      center,\n      angle,\n    );\n  }\n\n  return p;\n};\n\nconst updateBoundPoint = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  startOrEnd: \"startBinding\" | \"endBinding\",\n  binding: PointBinding | null | undefined,\n  bindableElement: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n): LocalPoint | null => {\n  if (\n    binding == null ||\n    // We only need to update the other end if this is a 2 point line element\n    (binding.elementId !== bindableElement.id &&\n      linearElement.points.length > 2)\n  ) {\n    return null;\n  }\n\n  const direction = startOrEnd === \"startBinding\" ? -1 : 1;\n  const edgePointIndex = direction === -1 ? 0 : linearElement.points.length - 1;\n\n  if (isElbowArrow(linearElement) && isFixedPointBinding(binding)) {\n    const fixedPoint =\n      normalizeFixedPoint(binding.fixedPoint) ??\n      calculateFixedPointForElbowArrowBinding(\n        linearElement,\n        bindableElement,\n        startOrEnd === \"startBinding\" ? \"start\" : \"end\",\n        elementsMap,\n      ).fixedPoint;\n    const globalMidPoint = pointFrom<GlobalPoint>(\n      bindableElement.x + bindableElement.width / 2,\n      bindableElement.y + bindableElement.height / 2,\n    );\n    const global = pointFrom<GlobalPoint>(\n      bindableElement.x + fixedPoint[0] * bindableElement.width,\n      bindableElement.y + fixedPoint[1] * bindableElement.height,\n    );\n    const rotatedGlobal = pointRotateRads(\n      global,\n      globalMidPoint,\n      bindableElement.angle,\n    );\n\n    return LinearElementEditor.pointFromAbsoluteCoords(\n      linearElement,\n      rotatedGlobal,\n      elementsMap,\n    );\n  }\n\n  const adjacentPointIndex = edgePointIndex - direction;\n  const adjacentPoint = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n    linearElement,\n    adjacentPointIndex,\n    elementsMap,\n  );\n  const focusPointAbsolute = determineFocusPoint(\n    bindableElement,\n    binding.focus,\n    adjacentPoint,\n  );\n\n  let newEdgePoint: GlobalPoint;\n\n  // The linear element was not originally pointing inside the bound shape,\n  // we can point directly at the focus point\n  if (binding.gap === 0) {\n    newEdgePoint = focusPointAbsolute;\n  } else {\n    const edgePointAbsolute =\n      LinearElementEditor.getPointAtIndexGlobalCoordinates(\n        linearElement,\n        edgePointIndex,\n        elementsMap,\n      );\n\n    const center = pointFrom<GlobalPoint>(\n      bindableElement.x + bindableElement.width / 2,\n      bindableElement.y + bindableElement.height / 2,\n    );\n    const interceptorLength =\n      pointDistance(adjacentPoint, edgePointAbsolute) +\n      pointDistance(adjacentPoint, center) +\n      Math.max(bindableElement.width, bindableElement.height) * 2;\n    const intersections = [\n      ...intersectElementWithLineSegment(\n        bindableElement,\n        lineSegment<GlobalPoint>(\n          adjacentPoint,\n          pointFromVector(\n            vectorScale(\n              vectorNormalize(\n                vectorFromPoint(focusPointAbsolute, adjacentPoint),\n              ),\n              interceptorLength,\n            ),\n            adjacentPoint,\n          ),\n        ),\n        binding.gap,\n      ).sort(\n        (g, h) =>\n          pointDistanceSq(g, adjacentPoint) - pointDistanceSq(h, adjacentPoint),\n      ),\n      // Fallback when arrow doesn't point to the shape\n      pointFromVector(\n        vectorScale(\n          vectorNormalize(vectorFromPoint(focusPointAbsolute, adjacentPoint)),\n          pointDistance(adjacentPoint, edgePointAbsolute),\n        ),\n        adjacentPoint,\n      ),\n    ];\n\n    if (intersections.length > 1) {\n      // The adjacent point is outside the shape (+ gap)\n      newEdgePoint = intersections[0];\n    } else if (intersections.length === 1) {\n      // The adjacent point is inside the shape (+ gap)\n      newEdgePoint = focusPointAbsolute;\n    } else {\n      // Shouldn't happend, but just in case\n      newEdgePoint = edgePointAbsolute;\n    }\n  }\n\n  return LinearElementEditor.pointFromAbsoluteCoords(\n    linearElement,\n    newEdgePoint,\n    elementsMap,\n  );\n};\n\nexport const calculateFixedPointForElbowArrowBinding = (\n  linearElement: NonDeleted<ExcalidrawElbowArrowElement>,\n  hoveredElement: ExcalidrawBindableElement,\n  startOrEnd: \"start\" | \"end\",\n  elementsMap: ElementsMap,\n): { fixedPoint: FixedPoint } => {\n  const bounds = [\n    hoveredElement.x,\n    hoveredElement.y,\n    hoveredElement.x + hoveredElement.width,\n    hoveredElement.y + hoveredElement.height,\n  ] as Bounds;\n  const snappedPoint = bindPointToSnapToElementOutline(\n    linearElement,\n    hoveredElement,\n    startOrEnd,\n  );\n  const globalMidPoint = pointFrom(\n    bounds[0] + (bounds[2] - bounds[0]) / 2,\n    bounds[1] + (bounds[3] - bounds[1]) / 2,\n  );\n  const nonRotatedSnappedGlobalPoint = pointRotateRads(\n    snappedPoint,\n    globalMidPoint,\n    -hoveredElement.angle as Radians,\n  );\n\n  return {\n    fixedPoint: normalizeFixedPoint([\n      (nonRotatedSnappedGlobalPoint[0] - hoveredElement.x) /\n        hoveredElement.width,\n      (nonRotatedSnappedGlobalPoint[1] - hoveredElement.y) /\n        hoveredElement.height,\n    ]),\n  };\n};\n\nconst maybeCalculateNewGapWhenScaling = (\n  changedElement: ExcalidrawBindableElement,\n  currentBinding: PointBinding | null | undefined,\n  newSize: { width: number; height: number } | undefined,\n): PointBinding | null | undefined => {\n  if (currentBinding == null || newSize == null) {\n    return currentBinding;\n  }\n  const { width: newWidth, height: newHeight } = newSize;\n  const { width, height } = changedElement;\n  const newGap = Math.max(\n    1,\n    Math.min(\n      maxBindingGap(changedElement, newWidth, newHeight),\n      currentBinding.gap *\n        (newWidth < newHeight ? newWidth / width : newHeight / height),\n    ),\n  );\n\n  return { ...currentBinding, gap: newGap };\n};\n\nconst getElligibleElementForBindingElement = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  startOrEnd: \"start\" | \"end\",\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  zoom?: AppState[\"zoom\"],\n): NonDeleted<ExcalidrawBindableElement> | null => {\n  return getHoveredElementForBinding(\n    getLinearElementEdgeCoors(linearElement, startOrEnd, elementsMap),\n    elements,\n    elementsMap,\n    zoom,\n    isElbowArrow(linearElement),\n    isElbowArrow(linearElement),\n  );\n};\n\nconst getLinearElementEdgeCoors = (\n  linearElement: NonDeleted<ExcalidrawLinearElement>,\n  startOrEnd: \"start\" | \"end\",\n  elementsMap: NonDeletedSceneElementsMap,\n): { x: number; y: number } => {\n  const index = startOrEnd === \"start\" ? 0 : -1;\n  return tupleToCoors(\n    LinearElementEditor.getPointAtIndexGlobalCoordinates(\n      linearElement,\n      index,\n      elementsMap,\n    ),\n  );\n};\n\nexport const fixBindingsAfterDuplication = (\n  newElements: ExcalidrawElement[],\n  oldIdToDuplicatedId: Map<ExcalidrawElement[\"id\"], ExcalidrawElement[\"id\"]>,\n  duplicatedElementsMap: NonDeletedSceneElementsMap,\n) => {\n  for (const element of newElements) {\n    if (\"boundElements\" in element && element.boundElements) {\n      Object.assign(element, {\n        boundElements: element.boundElements.reduce(\n          (\n            acc: Mutable<NonNullable<ExcalidrawElement[\"boundElements\"]>>,\n            binding,\n          ) => {\n            const newBindingId = oldIdToDuplicatedId.get(binding.id);\n            if (newBindingId) {\n              acc.push({ ...binding, id: newBindingId });\n            }\n            return acc;\n          },\n          [],\n        ),\n      });\n    }\n\n    if (\"containerId\" in element && element.containerId) {\n      Object.assign(element, {\n        containerId: oldIdToDuplicatedId.get(element.containerId) ?? null,\n      });\n    }\n\n    if (\"endBinding\" in element && element.endBinding) {\n      const newEndBindingId = oldIdToDuplicatedId.get(\n        element.endBinding.elementId,\n      );\n      Object.assign(element, {\n        endBinding: newEndBindingId\n          ? {\n              ...element.endBinding,\n              elementId: newEndBindingId,\n            }\n          : null,\n      });\n    }\n    if (\"startBinding\" in element && element.startBinding) {\n      const newEndBindingId = oldIdToDuplicatedId.get(\n        element.startBinding.elementId,\n      );\n      Object.assign(element, {\n        startBinding: newEndBindingId\n          ? {\n              ...element.startBinding,\n              elementId: newEndBindingId,\n            }\n          : null,\n      });\n    }\n\n    if (isElbowArrow(element)) {\n      Object.assign(\n        element,\n        updateElbowArrowPoints(element, duplicatedElementsMap, {\n          points: [\n            element.points[0],\n            element.points[element.points.length - 1],\n          ],\n        }),\n      );\n    }\n  }\n};\n\nexport const fixBindingsAfterDeletion = (\n  sceneElements: readonly ExcalidrawElement[],\n  deletedElements: readonly ExcalidrawElement[],\n): void => {\n  const elements = arrayToMap(sceneElements);\n\n  for (const element of deletedElements) {\n    BoundElement.unbindAffected(elements, element, mutateElement);\n    BindableElement.unbindAffected(elements, element, mutateElement);\n  }\n};\n\nconst newBoundElements = (\n  boundElements: ExcalidrawElement[\"boundElements\"],\n  idsToRemove: Set<ExcalidrawElement[\"id\"]>,\n  elementsToAdd: Array<ExcalidrawElement> = [],\n) => {\n  if (!boundElements) {\n    return null;\n  }\n\n  const nextBoundElements = boundElements.filter(\n    (boundElement) => !idsToRemove.has(boundElement.id),\n  );\n\n  nextBoundElements.push(\n    ...elementsToAdd.map(\n      (x) =>\n        ({ id: x.id, type: x.type } as\n          | ExcalidrawArrowElement\n          | ExcalidrawTextElement),\n    ),\n  );\n\n  return nextBoundElements;\n};\n\nexport const bindingBorderTest = (\n  element: NonDeleted<ExcalidrawBindableElement>,\n  { x, y }: { x: number; y: number },\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom?: AppState[\"zoom\"],\n  fullShape?: boolean,\n): boolean => {\n  const threshold = maxBindingGap(element, element.width, element.height, zoom);\n\n  const shape = getElementShape(element, elementsMap);\n  return (\n    isPointOnShape(pointFrom(x, y), shape, threshold) ||\n    (fullShape === true &&\n      pointInsideBounds(pointFrom(x, y), aabbForElement(element)))\n  );\n};\n\nexport const maxBindingGap = (\n  element: ExcalidrawElement,\n  elementWidth: number,\n  elementHeight: number,\n  zoom?: AppState[\"zoom\"],\n): number => {\n  const zoomValue = zoom?.value && zoom.value < 1 ? zoom.value : 1;\n\n  // Aligns diamonds with rectangles\n  const shapeRatio = element.type === \"diamond\" ? 1 / Math.sqrt(2) : 1;\n  const smallerDimension = shapeRatio * Math.min(elementWidth, elementHeight);\n\n  return Math.max(\n    16,\n    // bigger bindable boundary for bigger elements\n    Math.min(0.25 * smallerDimension, 32),\n    // keep in sync with the zoomed highlight\n    BINDING_HIGHLIGHT_THICKNESS / zoomValue + BINDING_HIGHLIGHT_OFFSET,\n  );\n};\n\n// The focus distance is the oriented ratio between the size of\n// the `element` and the \"focus image\" of the element on which\n// all focus points lie, so it's a number between -1 and 1.\n// The line going through `a` and `b` is a tangent to the \"focus image\"\n// of the element.\nconst determineFocusDistance = (\n  element: ExcalidrawBindableElement,\n  // Point on the line, in absolute coordinates\n  a: GlobalPoint,\n  // Another point on the line, in absolute coordinates (closer to element)\n  b: GlobalPoint,\n): number => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  if (pointsEqual(a, b)) {\n    return 0;\n  }\n\n  const rotatedA = pointRotateRads(a, center, -element.angle as Radians);\n  const rotatedB = pointRotateRads(b, center, -element.angle as Radians);\n  const sign =\n    Math.sign(\n      vectorCross(\n        vectorFromPoint(rotatedB, a),\n        vectorFromPoint(rotatedB, center),\n      ),\n    ) * -1;\n  const rotatedInterceptor = lineSegment(\n    rotatedB,\n    pointFromVector(\n      vectorScale(\n        vectorNormalize(vectorFromPoint(rotatedB, rotatedA)),\n        Math.max(element.width * 2, element.height * 2),\n      ),\n      rotatedB,\n    ),\n  );\n  const axes =\n    element.type === \"diamond\"\n      ? [\n          lineSegment(\n            pointFrom<GlobalPoint>(element.x + element.width / 2, element.y),\n            pointFrom<GlobalPoint>(\n              element.x + element.width / 2,\n              element.y + element.height,\n            ),\n          ),\n          lineSegment(\n            pointFrom<GlobalPoint>(element.x, element.y + element.height / 2),\n            pointFrom<GlobalPoint>(\n              element.x + element.width,\n              element.y + element.height / 2,\n            ),\n          ),\n        ]\n      : [\n          lineSegment(\n            pointFrom<GlobalPoint>(element.x, element.y),\n            pointFrom<GlobalPoint>(\n              element.x + element.width,\n              element.y + element.height,\n            ),\n          ),\n          lineSegment(\n            pointFrom<GlobalPoint>(element.x + element.width, element.y),\n            pointFrom<GlobalPoint>(element.x, element.y + element.height),\n          ),\n        ];\n  const interceptees =\n    element.type === \"diamond\"\n      ? [\n          lineSegment(\n            pointFrom<GlobalPoint>(\n              element.x + element.width / 2,\n              element.y - element.height,\n            ),\n            pointFrom<GlobalPoint>(\n              element.x + element.width / 2,\n              element.y + element.height * 2,\n            ),\n          ),\n          lineSegment(\n            pointFrom<GlobalPoint>(\n              element.x - element.width,\n              element.y + element.height / 2,\n            ),\n            pointFrom<GlobalPoint>(\n              element.x + element.width * 2,\n              element.y + element.height / 2,\n            ),\n          ),\n        ]\n      : [\n          lineSegment(\n            pointFrom<GlobalPoint>(\n              element.x - element.width,\n              element.y - element.height,\n            ),\n            pointFrom<GlobalPoint>(\n              element.x + element.width * 2,\n              element.y + element.height * 2,\n            ),\n          ),\n          lineSegment(\n            pointFrom<GlobalPoint>(\n              element.x + element.width * 2,\n              element.y - element.height,\n            ),\n            pointFrom<GlobalPoint>(\n              element.x - element.width,\n              element.y + element.height * 2,\n            ),\n          ),\n        ];\n\n  const ordered = [\n    lineSegmentIntersectionPoints(rotatedInterceptor, interceptees[0]),\n    lineSegmentIntersectionPoints(rotatedInterceptor, interceptees[1]),\n  ]\n    .filter((p): p is GlobalPoint => p !== null)\n    .sort((g, h) => pointDistanceSq(g, b) - pointDistanceSq(h, b))\n    .map(\n      (p, idx): number =>\n        (sign * pointDistance(center, p)) /\n        (element.type === \"diamond\"\n          ? pointDistance(axes[idx][0], axes[idx][1]) / 2\n          : Math.sqrt(element.width ** 2 + element.height ** 2) / 2),\n    )\n    .sort((g, h) => Math.abs(g) - Math.abs(h));\n\n  const signedDistanceRatio = ordered[0] ?? 0;\n\n  return signedDistanceRatio;\n};\n\nconst determineFocusPoint = (\n  element: ExcalidrawBindableElement,\n  // The oriented, relative distance from the center of `element` of the\n  // returned focusPoint\n  focus: number,\n  adjacentPoint: GlobalPoint,\n): GlobalPoint => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  if (focus === 0) {\n    return center;\n  }\n\n  const candidates = (\n    element.type === \"diamond\"\n      ? [\n          pointFrom<GlobalPoint>(element.x, element.y + element.height / 2),\n          pointFrom<GlobalPoint>(element.x + element.width / 2, element.y),\n          pointFrom<GlobalPoint>(\n            element.x + element.width,\n            element.y + element.height / 2,\n          ),\n          pointFrom<GlobalPoint>(\n            element.x + element.width / 2,\n            element.y + element.height,\n          ),\n        ]\n      : [\n          pointFrom<GlobalPoint>(element.x, element.y),\n          pointFrom<GlobalPoint>(element.x + element.width, element.y),\n          pointFrom<GlobalPoint>(\n            element.x + element.width,\n            element.y + element.height,\n          ),\n          pointFrom<GlobalPoint>(element.x, element.y + element.height),\n        ]\n  )\n    .map((p) =>\n      pointFromVector(\n        vectorScale(vectorFromPoint(p, center), Math.abs(focus)),\n        center,\n      ),\n    )\n    .map((p) => pointRotateRads(p, center, element.angle as Radians));\n\n  const selected = [\n    vectorCross(\n      vectorFromPoint(adjacentPoint, candidates[0]),\n      vectorFromPoint(candidates[1], candidates[0]),\n    ) > 0 && // TOP\n      (focus > 0\n        ? vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[1]),\n            vectorFromPoint(candidates[2], candidates[1]),\n          ) < 0\n        : vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[3]),\n            vectorFromPoint(candidates[0], candidates[3]),\n          ) < 0),\n    vectorCross(\n      vectorFromPoint(adjacentPoint, candidates[1]),\n      vectorFromPoint(candidates[2], candidates[1]),\n    ) > 0 && // RIGHT\n      (focus > 0\n        ? vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[2]),\n            vectorFromPoint(candidates[3], candidates[2]),\n          ) < 0\n        : vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[0]),\n            vectorFromPoint(candidates[1], candidates[0]),\n          ) < 0),\n    vectorCross(\n      vectorFromPoint(adjacentPoint, candidates[2]),\n      vectorFromPoint(candidates[3], candidates[2]),\n    ) > 0 && // BOTTOM\n      (focus > 0\n        ? vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[3]),\n            vectorFromPoint(candidates[0], candidates[3]),\n          ) < 0\n        : vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[1]),\n            vectorFromPoint(candidates[2], candidates[1]),\n          ) < 0),\n    vectorCross(\n      vectorFromPoint(adjacentPoint, candidates[3]),\n      vectorFromPoint(candidates[0], candidates[3]),\n    ) > 0 && // LEFT\n      (focus > 0\n        ? vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[0]),\n            vectorFromPoint(candidates[1], candidates[0]),\n          ) < 0\n        : vectorCross(\n            vectorFromPoint(adjacentPoint, candidates[2]),\n            vectorFromPoint(candidates[3], candidates[2]),\n          ) < 0),\n  ];\n\n  const focusPoint = selected[0]\n    ? focus > 0\n      ? candidates[1]\n      : candidates[0]\n    : selected[1]\n    ? focus > 0\n      ? candidates[2]\n      : candidates[1]\n    : selected[2]\n    ? focus > 0\n      ? candidates[3]\n      : candidates[2]\n    : focus > 0\n    ? candidates[0]\n    : candidates[3];\n\n  return focusPoint;\n};\n\nexport const bindingProperties: Set<BindableProp | BindingProp> = new Set([\n  \"boundElements\",\n  \"frameId\",\n  \"containerId\",\n  \"startBinding\",\n  \"endBinding\",\n]);\n\nexport type BindableProp = \"boundElements\";\n\nexport type BindingProp =\n  | \"frameId\"\n  | \"containerId\"\n  | \"startBinding\"\n  | \"endBinding\";\n\ntype BoundElementsVisitingFunc = (\n  boundElement: ExcalidrawElement | undefined,\n  bindingProp: BindableProp,\n  bindingId: string,\n) => void;\n\ntype BindableElementVisitingFunc<T> = (\n  bindableElement: ExcalidrawElement | undefined,\n  bindingProp: BindingProp,\n  bindingId: string,\n) => T;\n\n/**\n * Tries to visit each bound element (does not have to be found).\n */\nconst boundElementsVisitor = (\n  elements: ElementsMap,\n  element: ExcalidrawElement,\n  visit: BoundElementsVisitingFunc,\n) => {\n  if (isBindableElement(element)) {\n    // create new instance so that possible mutations won't play a role in visiting order\n    const boundElements = element.boundElements?.slice() ?? [];\n\n    // last added text should be the one we keep (~previous are duplicates)\n    boundElements.forEach(({ id }) => {\n      visit(elements.get(id), \"boundElements\", id);\n    });\n  }\n};\n\n/**\n * Tries to visit each bindable element (does not have to be found).\n */\nconst bindableElementsVisitor = <T>(\n  elements: ElementsMap,\n  element: ExcalidrawElement,\n  visit: BindableElementVisitingFunc<T>,\n): T[] => {\n  const result: T[] = [];\n\n  if (element.frameId) {\n    const id = element.frameId;\n    result.push(visit(elements.get(id), \"frameId\", id));\n  }\n\n  if (isBoundToContainer(element)) {\n    const id = element.containerId;\n    result.push(visit(elements.get(id), \"containerId\", id));\n  }\n\n  if (isArrowElement(element)) {\n    if (element.startBinding) {\n      const id = element.startBinding.elementId;\n      result.push(visit(elements.get(id), \"startBinding\", id));\n    }\n\n    if (element.endBinding) {\n      const id = element.endBinding.elementId;\n      result.push(visit(elements.get(id), \"endBinding\", id));\n    }\n  }\n\n  return result;\n};\n\n/**\n * Bound element containing bindings to `frameId`, `containerId`, `startBinding` or `endBinding`.\n */\nexport class BoundElement {\n  /**\n   * Unbind the affected non deleted bindable elements (removing element from `boundElements`).\n   * - iterates non deleted bindable elements (`containerId` | `startBinding.elementId` | `endBinding.elementId`) of the current element\n   * - prepares updates to unbind each bindable element's `boundElements` from the current element\n   */\n  public static unbindAffected(\n    elements: ElementsMap,\n    boundElement: ExcalidrawElement | undefined,\n    updateElementWith: (\n      affected: ExcalidrawElement,\n      updates: ElementUpdate<ExcalidrawElement>,\n    ) => void,\n  ) {\n    if (!boundElement) {\n      return;\n    }\n\n    bindableElementsVisitor(elements, boundElement, (bindableElement) => {\n      // bindable element is deleted, this is fine\n      if (!bindableElement || bindableElement.isDeleted) {\n        return;\n      }\n\n      boundElementsVisitor(\n        elements,\n        bindableElement,\n        (_, __, boundElementId) => {\n          if (boundElementId === boundElement.id) {\n            updateElementWith(bindableElement, {\n              boundElements: newBoundElements(\n                bindableElement.boundElements,\n                new Set([boundElementId]),\n              ),\n            });\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Rebind the next affected non deleted bindable elements (adding element to `boundElements`).\n   * - iterates non deleted bindable elements (`containerId` | `startBinding.elementId` | `endBinding.elementId`) of the current element\n   * - prepares updates to rebind each bindable element's `boundElements` to the current element\n   *\n   * NOTE: rebind expects that affected elements were previously unbound with `BoundElement.unbindAffected`\n   */\n  public static rebindAffected = (\n    elements: ElementsMap,\n    boundElement: ExcalidrawElement | undefined,\n    updateElementWith: (\n      affected: ExcalidrawElement,\n      updates: ElementUpdate<ExcalidrawElement>,\n    ) => void,\n  ) => {\n    // don't try to rebind element that is deleted\n    if (!boundElement || boundElement.isDeleted) {\n      return;\n    }\n\n    bindableElementsVisitor(\n      elements,\n      boundElement,\n      (bindableElement, bindingProp) => {\n        // unbind from bindable elements, as bindings from non deleted elements into deleted elements are incorrect\n        if (!bindableElement || bindableElement.isDeleted) {\n          updateElementWith(boundElement, { [bindingProp]: null });\n          return;\n        }\n\n        // frame bindings are unidirectional, there is nothing to rebind\n        if (bindingProp === \"frameId\") {\n          return;\n        }\n\n        if (\n          bindableElement.boundElements?.find((x) => x.id === boundElement.id)\n        ) {\n          return;\n        }\n\n        if (isArrowElement(boundElement)) {\n          // rebind if not found!\n          updateElementWith(bindableElement, {\n            boundElements: newBoundElements(\n              bindableElement.boundElements,\n              new Set(),\n              new Array(boundElement),\n            ),\n          });\n        }\n\n        if (isTextElement(boundElement)) {\n          if (!bindableElement.boundElements?.find((x) => x.type === \"text\")) {\n            // rebind only if there is no other text bound already\n            updateElementWith(bindableElement, {\n              boundElements: newBoundElements(\n                bindableElement.boundElements,\n                new Set(),\n                new Array(boundElement),\n              ),\n            });\n          } else {\n            // unbind otherwise\n            updateElementWith(boundElement, { [bindingProp]: null });\n          }\n        }\n      },\n    );\n  };\n}\n\n/**\n * Bindable element containing bindings to `boundElements`.\n */\nexport class BindableElement {\n  /**\n   * Unbind the affected non deleted bound elements (resetting `containerId`, `startBinding`, `endBinding` to `null`).\n   * - iterates through non deleted `boundElements` of the current element\n   * - prepares updates to unbind each bound element from the current element\n   */\n  public static unbindAffected(\n    elements: ElementsMap,\n    bindableElement: ExcalidrawElement | undefined,\n    updateElementWith: (\n      affected: ExcalidrawElement,\n      updates: ElementUpdate<ExcalidrawElement>,\n    ) => void,\n  ) {\n    if (!bindableElement) {\n      return;\n    }\n\n    boundElementsVisitor(elements, bindableElement, (boundElement) => {\n      // bound element is deleted, this is fine\n      if (!boundElement || boundElement.isDeleted) {\n        return;\n      }\n\n      bindableElementsVisitor(\n        elements,\n        boundElement,\n        (_, bindingProp, bindableElementId) => {\n          // making sure there is an element to be unbound\n          if (bindableElementId === bindableElement.id) {\n            updateElementWith(boundElement, { [bindingProp]: null });\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Rebind the affected non deleted bound elements (for now setting only `containerId`, as we cannot rebind arrows atm).\n   * - iterates through non deleted `boundElements` of the current element\n   * - prepares updates to rebind each bound element to the current element or unbind it from `boundElements` in case of conflicts\n   *\n   * NOTE: rebind expects that affected elements were previously unbound with `BindaleElement.unbindAffected`\n   */\n  public static rebindAffected = (\n    elements: ElementsMap,\n    bindableElement: ExcalidrawElement | undefined,\n    updateElementWith: (\n      affected: ExcalidrawElement,\n      updates: ElementUpdate<ExcalidrawElement>,\n    ) => void,\n  ) => {\n    // don't try to rebind element that is deleted (i.e. updated as deleted)\n    if (!bindableElement || bindableElement.isDeleted) {\n      return;\n    }\n\n    boundElementsVisitor(\n      elements,\n      bindableElement,\n      (boundElement, _, boundElementId) => {\n        // unbind from bindable elements, as bindings from non deleted elements into deleted elements are incorrect\n        if (!boundElement || boundElement.isDeleted) {\n          updateElementWith(bindableElement, {\n            boundElements: newBoundElements(\n              bindableElement.boundElements,\n              new Set([boundElementId]),\n            ),\n          });\n          return;\n        }\n\n        if (isTextElement(boundElement)) {\n          const boundElements = bindableElement.boundElements?.slice() ?? [];\n          // check if this is the last element in the array, if not, there is an previously bound text which should be unbound\n          if (\n            boundElements.reverse().find((x) => x.type === \"text\")?.id ===\n            boundElement.id\n          ) {\n            if (boundElement.containerId !== bindableElement.id) {\n              // rebind if not bound already!\n              updateElementWith(boundElement, {\n                containerId: bindableElement.id,\n              } as ElementUpdate<ExcalidrawTextElement>);\n            }\n          } else {\n            if (boundElement.containerId !== null) {\n              // unbind if not unbound already\n              updateElementWith(boundElement, {\n                containerId: null,\n              } as ElementUpdate<ExcalidrawTextElement>);\n            }\n\n            // unbind from boundElements as the element got bound to some other element in the meantime\n            updateElementWith(bindableElement, {\n              boundElements: newBoundElements(\n                bindableElement.boundElements,\n                new Set([boundElement.id]),\n              ),\n            });\n          }\n        }\n      },\n    );\n  };\n}\n\nexport const getGlobalFixedPointForBindableElement = (\n  fixedPointRatio: [number, number],\n  element: ExcalidrawBindableElement,\n): GlobalPoint => {\n  const [fixedX, fixedY] = normalizeFixedPoint(fixedPointRatio);\n\n  return pointRotateRads(\n    pointFrom(\n      element.x + element.width * fixedX,\n      element.y + element.height * fixedY,\n    ),\n    pointFrom<GlobalPoint>(\n      element.x + element.width / 2,\n      element.y + element.height / 2,\n    ),\n    element.angle,\n  );\n};\n\nexport const getGlobalFixedPoints = (\n  arrow: ExcalidrawElbowArrowElement,\n  elementsMap: ElementsMap,\n): [GlobalPoint, GlobalPoint] => {\n  const startElement =\n    arrow.startBinding &&\n    (elementsMap.get(arrow.startBinding.elementId) as\n      | ExcalidrawBindableElement\n      | undefined);\n  const endElement =\n    arrow.endBinding &&\n    (elementsMap.get(arrow.endBinding.elementId) as\n      | ExcalidrawBindableElement\n      | undefined);\n  const startPoint =\n    startElement && arrow.startBinding\n      ? getGlobalFixedPointForBindableElement(\n          arrow.startBinding.fixedPoint,\n          startElement as ExcalidrawBindableElement,\n        )\n      : pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[0][0],\n          arrow.y + arrow.points[0][1],\n        );\n  const endPoint =\n    endElement && arrow.endBinding\n      ? getGlobalFixedPointForBindableElement(\n          arrow.endBinding.fixedPoint,\n          endElement as ExcalidrawBindableElement,\n        )\n      : pointFrom<GlobalPoint>(\n          arrow.x + arrow.points[arrow.points.length - 1][0],\n          arrow.y + arrow.points[arrow.points.length - 1][1],\n        );\n\n  return [startPoint, endPoint];\n};\n\nexport const getArrowLocalFixedPoints = (\n  arrow: ExcalidrawElbowArrowElement,\n  elementsMap: ElementsMap,\n) => {\n  const [startPoint, endPoint] = getGlobalFixedPoints(arrow, elementsMap);\n\n  return [\n    LinearElementEditor.pointFromAbsoluteCoords(arrow, startPoint, elementsMap),\n    LinearElementEditor.pointFromAbsoluteCoords(arrow, endPoint, elementsMap),\n  ];\n};\n\nexport const normalizeFixedPoint = <T extends FixedPoint | null>(\n  fixedPoint: T,\n): T extends null ? null : FixedPoint => {\n  // Do not allow a precise 0.5 for fixed point ratio\n  // to avoid jumping arrow heading due to floating point imprecision\n  if (\n    fixedPoint &&\n    (Math.abs(fixedPoint[0] - 0.5) < 0.0001 ||\n      Math.abs(fixedPoint[1] - 0.5) < 0.0001)\n  ) {\n    return fixedPoint.map((ratio) =>\n      Math.abs(ratio - 0.5) < 0.0001 ? 0.5001 : ratio,\n    ) as T extends null ? null : FixedPoint;\n  }\n  return fixedPoint as any as T extends null ? null : FixedPoint;\n};\n", "import {\n  curvePointDistance,\n  distanceToLineSegment,\n  pointFrom,\n  pointRotateRads,\n} from \"@excalidraw/math\";\n\nimport { ellipse, ellipseDistanceFromPoint } from \"@excalidraw/math/ellipse\";\n\nimport type { GlobalPoint, Radians } from \"@excalidraw/math\";\n\nimport {\n  deconstructDiamondElement,\n  deconstructRectanguloidElement,\n} from \"./utils\";\n\nimport type {\n  ExcalidrawBindableElement,\n  ExcalidrawDiamondElement,\n  ExcalidrawEllipseElement,\n  ExcalidrawRectanguloidElement,\n} from \"./types\";\n\nexport const distanceToBindableElement = (\n  element: ExcalidrawBindableElement,\n  p: GlobalPoint,\n): number => {\n  switch (element.type) {\n    case \"rectangle\":\n    case \"image\":\n    case \"text\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"frame\":\n    case \"magicframe\":\n      return distanceToRectanguloidElement(element, p);\n    case \"diamond\":\n      return distanceToDiamondElement(element, p);\n    case \"ellipse\":\n      return distanceToEllipseElement(element, p);\n  }\n};\n\n/**\n * Returns the distance of a point and the provided rectangular-shaped element,\n * accounting for roundness and rotation\n *\n * @param element The rectanguloid element\n * @param p The point to consider\n * @returns The eucledian distance to the outline of the rectanguloid element\n */\nconst distanceToRectanguloidElement = (\n  element: ExcalidrawRectanguloidElement,\n  p: GlobalPoint,\n) => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n  // To emulate a rotated rectangle we rotate the point in the inverse angle\n  // instead. It's all the same distance-wise.\n  const rotatedPoint = pointRotateRads(p, center, -element.angle as Radians);\n\n  // Get the element's building components we can test against\n  const [sides, corners] = deconstructRectanguloidElement(element);\n\n  return Math.min(\n    ...sides.map((s) => distanceToLineSegment(rotatedPoint, s)),\n    ...corners\n      .map((a) => curvePointDistance(a, rotatedPoint))\n      .filter((d): d is number => d !== null),\n  );\n};\n\n/**\n * Returns the distance of a point and the provided diamond element, accounting\n * for roundness and rotation\n *\n * @param element The diamond element\n * @param p The point to consider\n * @returns The eucledian distance to the outline of the diamond\n */\nconst distanceToDiamondElement = (\n  element: ExcalidrawDiamondElement,\n  p: GlobalPoint,\n): number => {\n  const center = pointFrom<GlobalPoint>(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n\n  // Rotate the point to the inverse direction to simulate the rotated diamond\n  // points. It's all the same distance-wise.\n  const rotatedPoint = pointRotateRads(p, center, -element.angle as Radians);\n\n  const [sides, curves] = deconstructDiamondElement(element);\n\n  return Math.min(\n    ...sides.map((s) => distanceToLineSegment(rotatedPoint, s)),\n    ...curves\n      .map((a) => curvePointDistance(a, rotatedPoint))\n      .filter((d): d is number => d !== null),\n  );\n};\n\n/**\n * Returns the distance of a point and the provided ellipse element, accounting\n * for roundness and rotation\n *\n * @param element The ellipse element\n * @param p The point to consider\n * @returns The eucledian distance to the outline of the ellipse\n */\nconst distanceToEllipseElement = (\n  element: ExcalidrawEllipseElement,\n  p: GlobalPoint,\n): number => {\n  const center = pointFrom(\n    element.x + element.width / 2,\n    element.y + element.height / 2,\n  );\n  return ellipseDistanceFromPoint(\n    // Instead of rotating the ellipse, rotate the point to the inverse angle\n    pointRotateRads(p, center, -element.angle as Radians),\n    ellipse(center, element.width / 2, element.height / 2),\n  );\n};\n", "import {\n  normalizeRadians,\n  pointFrom,\n  pointRotateRads,\n  pointScaleFromOrigin,\n  radiansToDegrees,\n  triangleIncludesPoint,\n  vectorFromPoint,\n} from \"@excalidraw/math\";\n\nimport type {\n  LocalPoint,\n  GlobalPoint,\n  Triangle,\n  Vector,\n  Radians,\n} from \"@excalidraw/math\";\n\nimport { getCenterForBounds, type Bounds } from \"./bounds\";\n\nimport type { ExcalidrawBindableElement } from \"./types\";\n\nexport const HEADING_RIGHT = [1, 0] as Heading;\nexport const HEADING_DOWN = [0, 1] as Heading;\nexport const HEADING_LEFT = [-1, 0] as Heading;\nexport const HEADING_UP = [0, -1] as Heading;\nexport type Heading = [1, 0] | [0, 1] | [-1, 0] | [0, -1];\n\nexport const headingForDiamond = <Point extends GlobalPoint | LocalPoint>(\n  a: Point,\n  b: Point,\n) => {\n  const angle = radiansToDegrees(\n    normalizeRadians(Math.atan2(b[1] - a[1], b[0] - a[0]) as Radians),\n  );\n\n  if (angle >= 315 || angle < 45) {\n    return HEADING_UP;\n  } else if (angle >= 45 && angle < 135) {\n    return HEADING_RIGHT;\n  } else if (angle >= 135 && angle < 225) {\n    return HEADING_DOWN;\n  }\n  return HEADING_LEFT;\n};\n\nexport const vectorToHeading = (vec: Vector): Heading => {\n  const [x, y] = vec;\n  const absX = Math.abs(x);\n  const absY = Math.abs(y);\n  if (x > absY) {\n    return HEADING_RIGHT;\n  } else if (x <= -absY) {\n    return HEADING_LEFT;\n  } else if (y > absX) {\n    return HEADING_DOWN;\n  }\n  return HEADING_UP;\n};\n\nexport const headingForPoint = <P extends GlobalPoint | LocalPoint>(\n  p: P,\n  o: P,\n) => vectorToHeading(vectorFromPoint<P>(p, o));\n\nexport const headingForPointIsHorizontal = <P extends GlobalPoint | LocalPoint>(\n  p: P,\n  o: P,\n) => headingIsHorizontal(headingForPoint<P>(p, o));\n\nexport const compareHeading = (a: Heading, b: Heading) =>\n  a[0] === b[0] && a[1] === b[1];\n\nexport const headingIsHorizontal = (a: Heading) =>\n  compareHeading(a, HEADING_RIGHT) || compareHeading(a, HEADING_LEFT);\n\nexport const headingIsVertical = (a: Heading) => !headingIsHorizontal(a);\n\n// Gets the heading for the point by creating a bounding box around the rotated\n// close fitting bounding box, then creating 4 search cones around the center of\n// the external bbox.\nexport const headingForPointFromElement = <Point extends GlobalPoint>(\n  element: Readonly<ExcalidrawBindableElement>,\n  aabb: Readonly<Bounds>,\n  p: Readonly<Point>,\n): Heading => {\n  const SEARCH_CONE_MULTIPLIER = 2;\n\n  const midPoint = getCenterForBounds(aabb);\n\n  if (element.type === \"diamond\") {\n    if (p[0] < element.x) {\n      return HEADING_LEFT;\n    } else if (p[1] < element.y) {\n      return HEADING_UP;\n    } else if (p[0] > element.x + element.width) {\n      return HEADING_RIGHT;\n    } else if (p[1] > element.y + element.height) {\n      return HEADING_DOWN;\n    }\n\n    const top = pointRotateRads(\n      pointScaleFromOrigin(\n        pointFrom(element.x + element.width / 2, element.y),\n        midPoint,\n        SEARCH_CONE_MULTIPLIER,\n      ),\n      midPoint,\n      element.angle,\n    );\n    const right = pointRotateRads(\n      pointScaleFromOrigin(\n        pointFrom(element.x + element.width, element.y + element.height / 2),\n        midPoint,\n        SEARCH_CONE_MULTIPLIER,\n      ),\n      midPoint,\n      element.angle,\n    );\n    const bottom = pointRotateRads(\n      pointScaleFromOrigin(\n        pointFrom(element.x + element.width / 2, element.y + element.height),\n        midPoint,\n        SEARCH_CONE_MULTIPLIER,\n      ),\n      midPoint,\n      element.angle,\n    );\n    const left = pointRotateRads(\n      pointScaleFromOrigin(\n        pointFrom(element.x, element.y + element.height / 2),\n        midPoint,\n        SEARCH_CONE_MULTIPLIER,\n      ),\n      midPoint,\n      element.angle,\n    );\n\n    if (\n      triangleIncludesPoint<Point>([top, right, midPoint] as Triangle<Point>, p)\n    ) {\n      return headingForDiamond(top, right);\n    } else if (\n      triangleIncludesPoint<Point>(\n        [right, bottom, midPoint] as Triangle<Point>,\n        p,\n      )\n    ) {\n      return headingForDiamond(right, bottom);\n    } else if (\n      triangleIncludesPoint<Point>(\n        [bottom, left, midPoint] as Triangle<Point>,\n        p,\n      )\n    ) {\n      return headingForDiamond(bottom, left);\n    }\n\n    return headingForDiamond(left, top);\n  }\n\n  const topLeft = pointScaleFromOrigin(\n    pointFrom(aabb[0], aabb[1]),\n    midPoint,\n    SEARCH_CONE_MULTIPLIER,\n  ) as Point;\n  const topRight = pointScaleFromOrigin(\n    pointFrom(aabb[2], aabb[1]),\n    midPoint,\n    SEARCH_CONE_MULTIPLIER,\n  ) as Point;\n  const bottomLeft = pointScaleFromOrigin(\n    pointFrom(aabb[0], aabb[3]),\n    midPoint,\n    SEARCH_CONE_MULTIPLIER,\n  ) as Point;\n  const bottomRight = pointScaleFromOrigin(\n    pointFrom(aabb[2], aabb[3]),\n    midPoint,\n    SEARCH_CONE_MULTIPLIER,\n  ) as Point;\n\n  return triangleIncludesPoint<Point>(\n    [topLeft, topRight, midPoint] as Triangle<Point>,\n    p,\n  )\n    ? HEADING_UP\n    : triangleIncludesPoint<Point>(\n        [topRight, bottomRight, midPoint] as Triangle<Point>,\n        p,\n      )\n    ? HEADING_RIGHT\n    : triangleIncludesPoint<Point>(\n        [bottomRight, bottomLeft, midPoint] as Triangle<Point>,\n        p,\n      )\n    ? HEADING_DOWN\n    : HEADING_LEFT;\n};\n\nexport const flipHeading = (h: Heading): Heading =>\n  [\n    h[0] === 0 ? 0 : h[0] > 0 ? -1 : 1,\n    h[1] === 0 ? 0 : h[1] > 0 ? -1 : 1,\n  ] as Heading;\n", "import {\n  BOUND_TEXT_PADDING,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_FONT_FAMILY,\n  getFontString,\n  isTestEnv,\n  normalizeEOL,\n} from \"@excalidraw/common\";\n\nimport type { FontString, ExcalidrawTextElement } from \"./types\";\n\nexport const measureText = (\n  text: string,\n  font: FontString,\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  const _text = text\n    .split(\"\\n\")\n    // replace empty lines with single space because leading/trailing empty\n    // lines would be stripped from computation\n    .map((x) => x || \" \")\n    .join(\"\\n\");\n  const fontSize = parseFloat(font);\n  const height = getTextHeight(_text, fontSize, lineHeight);\n  const width = getTextWidth(_text, font);\n  return { width, height };\n};\n\nconst DUMMY_TEXT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\".toLocaleUpperCase();\n\n// FIXME rename to getApproxMinContainerWidth\nexport const getApproxMinLineWidth = (\n  font: FontString,\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  const maxCharWidth = getMaxCharWidth(font);\n  if (maxCharWidth === 0) {\n    return (\n      measureText(DUMMY_TEXT.split(\"\").join(\"\\n\"), font, lineHeight).width +\n      BOUND_TEXT_PADDING * 2\n    );\n  }\n  return maxCharWidth + BOUND_TEXT_PADDING * 2;\n};\n\nexport const getMinTextElementWidth = (\n  font: FontString,\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  return measureText(\"\", font, lineHeight).width + BOUND_TEXT_PADDING * 2;\n};\n\nexport const isMeasureTextSupported = () => {\n  const width = getTextWidth(\n    DUMMY_TEXT,\n    getFontString({\n      fontSize: DEFAULT_FONT_SIZE,\n      fontFamily: DEFAULT_FONT_FAMILY,\n    }),\n  );\n  return width > 0;\n};\n\nexport const normalizeText = (text: string) => {\n  return (\n    normalizeEOL(text)\n      // replace tabs with spaces so they render and measure correctly\n      .replace(/\\t/g, \"        \")\n  );\n};\n\nconst splitIntoLines = (text: string) => {\n  return normalizeText(text).split(\"\\n\");\n};\n\n/**\n * To get unitless line-height (if unknown) we can calculate it by dividing\n * height-per-line by fontSize.\n */\nexport const detectLineHeight = (textElement: ExcalidrawTextElement) => {\n  const lineCount = splitIntoLines(textElement.text).length;\n  return (textElement.height /\n    lineCount /\n    textElement.fontSize) as ExcalidrawTextElement[\"lineHeight\"];\n};\n\n/**\n * We calculate the line height from the font size and the unitless line height,\n * aligning with the W3C spec.\n */\nexport const getLineHeightInPx = (\n  fontSize: ExcalidrawTextElement[\"fontSize\"],\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  return fontSize * lineHeight;\n};\n\n// FIXME rename to getApproxMinContainerHeight\nexport const getApproxMinLineHeight = (\n  fontSize: ExcalidrawTextElement[\"fontSize\"],\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  return getLineHeightInPx(fontSize, lineHeight) + BOUND_TEXT_PADDING * 2;\n};\n\nlet textMetricsProvider: TextMetricsProvider | undefined;\n\n/**\n * Set a custom text metrics provider.\n *\n * Useful for overriding the width calculation algorithm where canvas API is not available / desired.\n */\nexport const setCustomTextMetricsProvider = (provider: TextMetricsProvider) => {\n  textMetricsProvider = provider;\n};\n\nexport interface TextMetricsProvider {\n  getLineWidth(text: string, fontString: FontString): number;\n}\n\nclass CanvasTextMetricsProvider implements TextMetricsProvider {\n  private canvas: HTMLCanvasElement;\n\n  constructor() {\n    this.canvas = document.createElement(\"canvas\");\n  }\n\n  /**\n   * We need to use the advance width as that's the closest thing to the browser wrapping algo, hence using it for:\n   * - text wrapping\n   * - wysiwyg editor (+padding)\n   *\n   * > The advance width is the distance between the glyph's initial pen position and the next glyph's initial pen position.\n   */\n  public getLineWidth(text: string, fontString: FontString): number {\n    const context = this.canvas.getContext(\"2d\")!;\n    context.font = fontString;\n    const metrics = context.measureText(text);\n    const advanceWidth = metrics.width;\n\n    // since in test env the canvas measureText algo\n    // doesn't measure text and instead just returns number of\n    // characters hence we assume that each letteris 10px\n    if (isTestEnv()) {\n      return advanceWidth * 10;\n    }\n\n    return advanceWidth;\n  }\n}\n\nexport const getLineWidth = (text: string, font: FontString) => {\n  if (!textMetricsProvider) {\n    textMetricsProvider = new CanvasTextMetricsProvider();\n  }\n\n  return textMetricsProvider.getLineWidth(text, font);\n};\n\nexport const getTextWidth = (text: string, font: FontString) => {\n  const lines = splitIntoLines(text);\n  let width = 0;\n  lines.forEach((line) => {\n    width = Math.max(width, getLineWidth(line, font));\n  });\n\n  return width;\n};\n\nexport const getTextHeight = (\n  text: string,\n  fontSize: number,\n  lineHeight: ExcalidrawTextElement[\"lineHeight\"],\n) => {\n  const lineCount = splitIntoLines(text).length;\n  return getLineHeightInPx(fontSize, lineHeight) * lineCount;\n};\n\nexport const charWidth = (() => {\n  const cachedCharWidth: { [key: FontString]: Array<number> } = {};\n\n  const calculate = (char: string, font: FontString) => {\n    const unicode = char.charCodeAt(0);\n    if (!cachedCharWidth[font]) {\n      cachedCharWidth[font] = [];\n    }\n    if (!cachedCharWidth[font][unicode]) {\n      const width = getLineWidth(char, font);\n      cachedCharWidth[font][unicode] = width;\n    }\n\n    return cachedCharWidth[font][unicode];\n  };\n\n  const getCache = (font: FontString) => {\n    return cachedCharWidth[font];\n  };\n\n  const clearCache = (font: FontString) => {\n    cachedCharWidth[font] = [];\n  };\n\n  return {\n    calculate,\n    getCache,\n    clearCache,\n  };\n})();\n\nexport const getMinCharWidth = (font: FontString) => {\n  const cache = charWidth.getCache(font);\n  if (!cache) {\n    return 0;\n  }\n  const cacheWithOutEmpty = cache.filter((val) => val !== undefined);\n\n  return Math.min(...cacheWithOutEmpty);\n};\n\nexport const getMaxCharWidth = (font: FontString) => {\n  const cache = charWidth.getCache(font);\n  if (!cache) {\n    return 0;\n  }\n  const cacheWithOutEmpty = cache.filter((val) => val !== undefined);\n  return Math.max(...cacheWithOutEmpty);\n};\n", "import { isDevEnv, isTestEnv } from \"@excalidraw/common\";\n\nimport { charWidth, getLineWidth } from \"./textMeasurements\";\n\nimport type { FontString } from \"./types\";\n\nlet cachedCjkRegex: RegExp | undefined;\nlet cachedLineBreakRegex: RegExp | undefined;\nlet cachedEmojiRegex: RegExp | undefined;\n\n/**\n * Test if a given text contains any CJK characters (including symbols, punctuation, etc,).\n */\nexport const containsCJK = (text: string) => {\n  if (!cachedCjkRegex) {\n    cachedCjkRegex = Regex.class(...Object.values(CJK));\n  }\n\n  return cachedCjkRegex.test(text);\n};\n\nconst getLineBreakRegex = () => {\n  if (!cachedLineBreakRegex) {\n    try {\n      cachedLineBreakRegex = getLineBreakRegexAdvanced();\n    } catch {\n      cachedLineBreakRegex = getLineBreakRegexSimple();\n    }\n  }\n\n  return cachedLineBreakRegex;\n};\n\nconst getEmojiRegex = () => {\n  if (!cachedEmojiRegex) {\n    cachedEmojiRegex = getEmojiRegexUnicode();\n  }\n\n  return cachedEmojiRegex;\n};\n\n/**\n * Common symbols used across different languages.\n */\nconst COMMON = {\n  /**\n   * Natural breaking points for any grammars.\n   *\n   * Hello world\n   *      \u2191 BREAK ALWAYS \" \" \u2192 [\"Hello\", \" \", \"world\"]\n   * Hello-world\n   *       \u2191 BREAK AFTER \"-\" \u2192 [\"Hello-\", \"world\"]\n   */\n  WHITESPACE: /\\s/u,\n  HYPHEN: /-/u,\n  /**\n   * Generally do not break, unless closed symbol is followed by an opening symbol.\n   *\n   * Also, western punctation is often used in modern Korean and expects to be treated\n   * similarly to the CJK opening and closing symbols.\n   *\n   * Hello(\uD55C\uAE00)\u2192 [\"Hello\", \"(\uD55C\", \"\uAE00)\"]\n   *      \u2191 BREAK BEFORE \"(\"\n   *          \u2191 BREAK AFTER \")\"\n   */\n  OPENING: /<\\(\\[\\{/u,\n  CLOSING: />\\)\\]\\}.,:;!\\?\u2026\\//u,\n};\n\n/**\n * Characters and symbols used in Chinese, Japanese and Korean.\n */\nconst CJK = {\n  /**\n   * Every CJK breaks before and after, unless it's paired with an opening or closing symbol.\n   *\n   * Does not include every possible char used in CJK texts, such as currency, parentheses or punctuation.\n   */\n  CHAR: /\\p{Script=Han}\\p{Script=Hiragana}\\p{Script=Katakana}\\p{Script=Hangul}\uFF40\uFF07\uFF3E\u3003\u3030\u3006\uFF03\uFF06\uFF0A\uFF0B\uFF0D\u30FC\uFF0F\uFF3C\uFF1D\uFF5C\uFFE4\u3012\uFFE2\uFFE3/u,\n  /**\n   * Opening and closing CJK punctuation breaks before and after all such characters (in case of many),\n   * and creates pairs with neighboring characters.\n   *\n   * Hello \u305F\u3002\u2192 [\"Hello\", \"\u305F\u3002\"]\n   *        \u2191 DON'T BREAK \"\u305F\u3002\"\n   * * Hello\u300C\u305F\u300D World \u2192 [\"Hello\", \"\u300C\u305F\u300D\", \"World\"]\n   *       \u2191 DON'T BREAK \"\u300C\u305F\"\n   *        \u2191 DON'T BREAK \"\u305F\"\n   *      \u2191 BREAK BEFORE \"\u300C\"\n   *         \u2191 BREAK AFTER \"\u300D\"\n   */\n  // eslint-disable-next-line prettier/prettier\n  OPENING:/\uFF08\uFF3B\uFF5B\u3008\u300A\uFF5F\uFF62\u300C\u300E\u3010\u3016\u3014\u3018\u301A\uFF1C\u301D/u,\n  CLOSING: /\uFF09\uFF3D\uFF5D\u3009\u300B\uFF60\uFF63\u300D\u300F\u3011\u3017\u3015\u3019\u301B\uFF1E\u3002\uFF0E\uFF0C\u3001\u301F\u2025\uFF1F\uFF01\uFF1A\uFF1B\u30FB\u301C\u301E/u,\n  /**\n   * Currency symbols break before, not after\n   *\n   * Price\uFFE5100 \u2192 [\"Price\", \"\uFFE5100\"]\n   *      \u2191 BREAK BEFORE \"\uFFE5\"\n   */\n  CURRENCY: /\uFFE5\uFFE6\uFFE1\uFFE0\uFF04/u,\n};\n\nconst EMOJI = {\n  FLAG: /\\p{RI}\\p{RI}/u,\n  JOINER:\n    /(?:\\p{Emoji_Modifier}|\\uFE0F\\u20E3?|[\\u{E0020}-\\u{E007E}]+\\u{E007F})?/u,\n  ZWJ: /\\u200D/u,\n  ANY: /[\\p{Emoji}]/u,\n  MOST: /[\\p{Extended_Pictographic}\\p{Emoji_Presentation}]/u,\n};\n\n/**\n * Simple fallback for browsers (mainly Safari < 16.4) that don't support \"Lookbehind assertion\".\n *\n * Browser support as of 10/2024:\n * - 91% Lookbehind assertion https://caniuse.com/mdn-javascript_regular_expressions_lookbehind_assertion\n * - 94% Unicode character class escape https://caniuse.com/mdn-javascript_regular_expressions_unicode_character_class_escape\n *\n * Does not include advanced CJK breaking rules, but covers most of the core cases, especially for latin.\n */\nconst getLineBreakRegexSimple = () =>\n  Regex.or(\n    getEmojiRegex(),\n    Break.On(COMMON.HYPHEN, COMMON.WHITESPACE, CJK.CHAR),\n  );\n\n/**\n * Specifies the line breaking rules based for alphabetic-based languages,\n * Chinese, Japanese, Korean and Emojis.\n *\n * \"Hello-world\" \u2192 [\"Hello-\", \"world\"]\n * \"Hello \u300C\u4E16\u754C\u3002\u300D\uD83C\uDF0E\uD83D\uDDFA\" \u2192 [\"Hello\", \" \", \"\u300C\u4E16\", \"\u754C\u3002\u300D\", \"\uD83C\uDF0E\", \"\uD83D\uDDFA\"]\n */\nconst getLineBreakRegexAdvanced = () =>\n  Regex.or(\n    // Unicode-defined regex for (multi-codepoint) Emojis\n    getEmojiRegex(),\n    // Rules for whitespace and hyphen\n    Break.Before(COMMON.WHITESPACE).Build(),\n    Break.After(COMMON.WHITESPACE, COMMON.HYPHEN).Build(),\n    // Rules for CJK (chars, symbols, currency)\n    Break.Before(CJK.CHAR, CJK.CURRENCY)\n      .NotPrecededBy(COMMON.OPENING, CJK.OPENING)\n      .Build(),\n    Break.After(CJK.CHAR)\n      .NotFollowedBy(COMMON.HYPHEN, COMMON.CLOSING, CJK.CLOSING)\n      .Build(),\n    // Rules for opening and closing punctuation\n    Break.BeforeMany(CJK.OPENING).NotPrecededBy(COMMON.OPENING).Build(),\n    Break.AfterMany(CJK.CLOSING).NotFollowedBy(COMMON.CLOSING).Build(),\n    Break.AfterMany(COMMON.CLOSING).FollowedBy(COMMON.OPENING).Build(),\n  );\n\n/**\n * Matches various emoji types.\n *\n * 1. basic emojis (\uD83D\uDE00, \uD83C\uDF0D)\n * 2. flags (\uD83C\uDDE8\uD83C\uDDFF)\n * 3. multi-codepoint emojis:\n *    - skin tones (\uD83D\uDC4D\uD83C\uDFFD)\n *    - variation selectors (\u2602\uFE0F)\n *    - keycaps (1\uFE0F\u20E3)\n *    - tag sequences (\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F)\n *    - emoji sequences (\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66, \uD83D\uDC69\u200D\uD83D\uDE80, \uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08)\n *\n * Unicode points:\n * - \\uFE0F: presentation selector\n * - \\u20E3: enclosing keycap\n * - \\u200D: zero width joiner\n * - \\u{E0020}-\\u{E007E}: tags\n * - \\u{E007F}: cancel tag\n *\n * @see https://unicode.org/reports/tr51/#EBNF_and_Regex, with changes:\n * - replaced \\p{Emoji} with [\\p{Extended_Pictographic}\\p{Emoji_Presentation}], see more in `should tokenize emojis mixed with mixed text` test\n * - replaced \\p{Emod} with \\p{Emoji_Modifier} as some engines do not understand the abbreviation (i.e. https://devina.io/redos-checker)\n */\nconst getEmojiRegexUnicode = () =>\n  Regex.group(\n    Regex.or(\n      EMOJI.FLAG,\n      Regex.and(\n        EMOJI.MOST,\n        EMOJI.JOINER,\n        Regex.build(\n          `(?:${EMOJI.ZWJ.source}(?:${EMOJI.FLAG.source}|${EMOJI.ANY.source}${EMOJI.JOINER.source}))*`,\n        ),\n      ),\n    ),\n  );\n\n/**\n * Regex utilities for unicode character classes.\n */\nconst Regex = {\n  /**\n   * Builds a regex from a string.\n   */\n  build: (regex: string): RegExp => new RegExp(regex, \"u\"),\n  /**\n   * Joins regexes into a single string.\n   */\n  join: (...regexes: RegExp[]): string => regexes.map((x) => x.source).join(\"\"),\n  /**\n   * Joins regexes into a single regex as with \"and\" operator.\n   */\n  and: (...regexes: RegExp[]): RegExp => Regex.build(Regex.join(...regexes)),\n  /**\n   * Joins regexes into a single regex with \"or\" operator.\n   */\n  or: (...regexes: RegExp[]): RegExp =>\n    Regex.build(regexes.map((x) => x.source).join(\"|\")),\n  /**\n   * Puts regexes into a matching group.\n   */\n  group: (...regexes: RegExp[]): RegExp =>\n    Regex.build(`(${Regex.join(...regexes)})`),\n  /**\n   * Puts regexes into a character class.\n   */\n  class: (...regexes: RegExp[]): RegExp =>\n    Regex.build(`[${Regex.join(...regexes)}]`),\n};\n\n/**\n * Human-readable lookahead and lookbehind utilities for defining line break\n * opportunities between pairs of character classes.\n */\nconst Break = {\n  /**\n   * Break on the given class of characters.\n   */\n  On: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    return Regex.build(`([${joined}])`);\n  },\n  /**\n   * Break before the given class of characters.\n   */\n  Before: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?=[${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"FollowedBy\"\n    >;\n  },\n  /**\n   * Break after the given class of characters.\n   */\n  After: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?<=[${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"PreceededBy\"\n    >;\n  },\n  /**\n   * Break before one or multiple characters of the same class.\n   */\n  BeforeMany: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?<![${joined}])(?=[${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"FollowedBy\"\n    >;\n  },\n  /**\n   * Break after one or multiple character from the same class.\n   */\n  AfterMany: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?<=[${joined}])(?![${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"PreceededBy\"\n    >;\n  },\n  /**\n   * Do not break before the given class of characters.\n   */\n  NotBefore: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?![${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"NotFollowedBy\"\n    >;\n  },\n  /**\n   * Do not break after the given class of characters.\n   */\n  NotAfter: (...regexes: RegExp[]) => {\n    const joined = Regex.join(...regexes);\n    const builder = () => Regex.build(`(?<![${joined}])`);\n    return Break.Chain(builder) as Omit<\n      ReturnType<typeof Break.Chain>,\n      \"NotPrecededBy\"\n    >;\n  },\n  Chain: (rootBuilder: () => RegExp) => ({\n    /**\n     * Build the root regex.\n     */\n    Build: rootBuilder,\n    /**\n     * Specify additional class of characters that should precede the root regex.\n     */\n    PreceededBy: (...regexes: RegExp[]) => {\n      const root = rootBuilder();\n      const preceeded = Break.After(...regexes).Build();\n      const builder = () => Regex.and(preceeded, root);\n      return Break.Chain(builder) as Omit<\n        ReturnType<typeof Break.Chain>,\n        \"PreceededBy\"\n      >;\n    },\n    /**\n     * Specify additional class of characters that should follow the root regex.\n     */\n    FollowedBy: (...regexes: RegExp[]) => {\n      const root = rootBuilder();\n      const followed = Break.Before(...regexes).Build();\n      const builder = () => Regex.and(root, followed);\n      return Break.Chain(builder) as Omit<\n        ReturnType<typeof Break.Chain>,\n        \"FollowedBy\"\n      >;\n    },\n    /**\n     * Specify additional class of characters that should not precede the root regex.\n     */\n    NotPrecededBy: (...regexes: RegExp[]) => {\n      const root = rootBuilder();\n      const notPreceeded = Break.NotAfter(...regexes).Build();\n      const builder = () => Regex.and(notPreceeded, root);\n      return Break.Chain(builder) as Omit<\n        ReturnType<typeof Break.Chain>,\n        \"NotPrecededBy\"\n      >;\n    },\n    /**\n     * Specify additional class of characters that should not follow the root regex.\n     */\n    NotFollowedBy: (...regexes: RegExp[]) => {\n      const root = rootBuilder();\n      const notFollowed = Break.NotBefore(...regexes).Build();\n      const builder = () => Regex.and(root, notFollowed);\n      return Break.Chain(builder) as Omit<\n        ReturnType<typeof Break.Chain>,\n        \"NotFollowedBy\"\n      >;\n    },\n  }),\n};\n\n/**\n * Breaks the line into the tokens based on the found line break opporutnities.\n */\nexport const parseTokens = (line: string) => {\n  const breakLineRegex = getLineBreakRegex();\n\n  // normalizing to single-codepoint composed chars due to canonical equivalence\n  // of multi-codepoint versions for chars like \u010D, \u3067 (~ so that we don't break a line in between c and \u02C7)\n  // filtering due to multi-codepoint chars like \uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66, \uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB0\n  return line.normalize(\"NFC\").split(breakLineRegex).filter(Boolean);\n};\n\n/**\n * Wraps the original text into the lines based on the given width.\n */\nexport const wrapText = (\n  text: string,\n  font: FontString,\n  maxWidth: number,\n): string => {\n  // if maxWidth is not finite or NaN which can happen in case of bugs in\n  // computation, we need to make sure we don't continue as we'll end up\n  // in an infinite loop\n  if (!Number.isFinite(maxWidth) || maxWidth < 0) {\n    return text;\n  }\n\n  const lines: Array<string> = [];\n  const originalLines = text.split(\"\\n\");\n\n  for (const originalLine of originalLines) {\n    const currentLineWidth = getLineWidth(originalLine, font);\n\n    if (currentLineWidth <= maxWidth) {\n      lines.push(originalLine);\n      continue;\n    }\n\n    const wrappedLine = wrapLine(originalLine, font, maxWidth);\n    lines.push(...wrappedLine);\n  }\n\n  return lines.join(\"\\n\");\n};\n\n/**\n * Wraps the original line into the lines based on the given width.\n */\nconst wrapLine = (\n  line: string,\n  font: FontString,\n  maxWidth: number,\n): string[] => {\n  const lines: Array<string> = [];\n  const tokens = parseTokens(line);\n  const tokenIterator = tokens[Symbol.iterator]();\n\n  let currentLine = \"\";\n  let currentLineWidth = 0;\n\n  let iterator = tokenIterator.next();\n\n  while (!iterator.done) {\n    const token = iterator.value;\n    const testLine = currentLine + token;\n\n    // cache single codepoint whitespace, CJK or emoji width calc. as kerning should not apply here\n    const testLineWidth = isSingleCharacter(token)\n      ? currentLineWidth + charWidth.calculate(token, font)\n      : getLineWidth(testLine, font);\n\n    // build up the current line, skipping length check for possibly trailing whitespaces\n    if (/\\s/.test(token) || testLineWidth <= maxWidth) {\n      currentLine = testLine;\n      currentLineWidth = testLineWidth;\n      iterator = tokenIterator.next();\n      continue;\n    }\n\n    // current line is empty => just the token (word) is longer than `maxWidth` and needs to be wrapped\n    if (!currentLine) {\n      const wrappedWord = wrapWord(token, font, maxWidth);\n      const trailingLine = wrappedWord[wrappedWord.length - 1] ?? \"\";\n      const precedingLines = wrappedWord.slice(0, -1);\n\n      lines.push(...precedingLines);\n\n      // trailing line of the wrapped word might still be joined with next token/s\n      currentLine = trailingLine;\n      currentLineWidth = getLineWidth(trailingLine, font);\n      iterator = tokenIterator.next();\n    } else {\n      // push & reset, but don't iterate on the next token, as we didn't use it yet!\n      lines.push(currentLine.trimEnd());\n\n      // purposefully not iterating and not setting `currentLine` to `token`, so that we could use a simple !currentLine check above\n      currentLine = \"\";\n      currentLineWidth = 0;\n    }\n  }\n\n  // iterator done, push the trailing line if exists\n  if (currentLine) {\n    const trailingLine = trimLine(currentLine, font, maxWidth);\n    lines.push(trailingLine);\n  }\n\n  return lines;\n};\n\n/**\n * Wraps the word into the lines based on the given width.\n */\nconst wrapWord = (\n  word: string,\n  font: FontString,\n  maxWidth: number,\n): Array<string> => {\n  // multi-codepoint emojis are already broken apart and shouldn't be broken further\n  if (getEmojiRegex().test(word)) {\n    return [word];\n  }\n\n  satisfiesWordInvariant(word);\n\n  const lines: Array<string> = [];\n  const chars = Array.from(word);\n\n  let currentLine = \"\";\n  let currentLineWidth = 0;\n\n  for (const char of chars) {\n    const _charWidth = charWidth.calculate(char, font);\n    const testLineWidth = currentLineWidth + _charWidth;\n\n    if (testLineWidth <= maxWidth) {\n      currentLine = currentLine + char;\n      currentLineWidth = testLineWidth;\n      continue;\n    }\n\n    if (currentLine) {\n      lines.push(currentLine);\n    }\n\n    currentLine = char;\n    currentLineWidth = _charWidth;\n  }\n\n  if (currentLine) {\n    lines.push(currentLine);\n  }\n\n  return lines;\n};\n\n/**\n * Similarly to browsers, does not trim all trailing whitespaces, but only those exceeding the `maxWidth`.\n */\nconst trimLine = (line: string, font: FontString, maxWidth: number) => {\n  const shouldTrimWhitespaces = getLineWidth(line, font) > maxWidth;\n\n  if (!shouldTrimWhitespaces) {\n    return line;\n  }\n\n  // defensively default to `trimeEnd` in case the regex does not match\n  let [, trimmedLine, whitespaces] = line.match(/^(.+?)(\\s+)$/) ?? [\n    line,\n    line.trimEnd(),\n    \"\",\n  ];\n\n  let trimmedLineWidth = getLineWidth(trimmedLine, font);\n\n  for (const whitespace of Array.from(whitespaces)) {\n    const _charWidth = charWidth.calculate(whitespace, font);\n    const testLineWidth = trimmedLineWidth + _charWidth;\n\n    if (testLineWidth > maxWidth) {\n      break;\n    }\n\n    trimmedLine = trimmedLine + whitespace;\n    trimmedLineWidth = testLineWidth;\n  }\n\n  return trimmedLine;\n};\n\n/**\n * Check if the given string is a single character.\n *\n * Handles multi-byte chars (\u00E9, \u4E2D) and purposefully does not handle multi-codepoint char (\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66, \uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB0).\n */\nconst isSingleCharacter = (maybeSingleCharacter: string) => {\n  return (\n    maybeSingleCharacter.codePointAt(0) !== undefined &&\n    maybeSingleCharacter.codePointAt(1) === undefined\n  );\n};\n\n/**\n * Invariant for the word wrapping algorithm.\n */\nconst satisfiesWordInvariant = (word: string) => {\n  if (isTestEnv() || isDevEnv()) {\n    if (/\\s/.test(word)) {\n      throw new Error(\"Word should not contain any whitespaces!\");\n    }\n  }\n};\n", "import { isShallowEqual } from \"@excalidraw/common\";\n\nimport type {\n  AppState,\n  InteractiveCanvasAppState,\n} from \"@excalidraw/excalidraw/types\";\n\nimport { getElementAbsoluteCoords, getElementBounds } from \"./bounds\";\nimport { isElementInViewport } from \"./sizeHelpers\";\nimport { isBoundToContainer, isFrameLikeElement } from \"./typeChecks\";\nimport {\n  elementOverlapsWithFrame,\n  getContainingFrame,\n  getFrameChildren,\n} from \"./frame\";\n\nimport type {\n  ElementsMap,\n  ElementsMapOrArray,\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\n/**\n * Frames and their containing elements are not to be selected at the same time.\n * Given an array of selected elements, if there are frames and their containing elements\n * we only keep the frames.\n * @param selectedElements\n */\nexport const excludeElementsInFramesFromSelection = <\n  T extends ExcalidrawElement,\n>(\n  selectedElements: readonly T[],\n) => {\n  const framesInSelection = new Set<T[\"id\"]>();\n\n  selectedElements.forEach((element) => {\n    if (isFrameLikeElement(element)) {\n      framesInSelection.add(element.id);\n    }\n  });\n\n  return selectedElements.filter((element) => {\n    if (element.frameId && framesInSelection.has(element.frameId)) {\n      return false;\n    }\n    return true;\n  });\n};\n\nexport const getElementsWithinSelection = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  selection: NonDeletedExcalidrawElement,\n  elementsMap: ElementsMap,\n  excludeElementsInFrames: boolean = true,\n) => {\n  const [selectionX1, selectionY1, selectionX2, selectionY2] =\n    getElementAbsoluteCoords(selection, elementsMap);\n\n  let elementsInSelection = elements.filter((element) => {\n    let [elementX1, elementY1, elementX2, elementY2] = getElementBounds(\n      element,\n      elementsMap,\n    );\n\n    const containingFrame = getContainingFrame(element, elementsMap);\n    if (containingFrame) {\n      const [fx1, fy1, fx2, fy2] = getElementBounds(\n        containingFrame,\n        elementsMap,\n      );\n\n      elementX1 = Math.max(fx1, elementX1);\n      elementY1 = Math.max(fy1, elementY1);\n      elementX2 = Math.min(fx2, elementX2);\n      elementY2 = Math.min(fy2, elementY2);\n    }\n\n    return (\n      element.locked === false &&\n      element.type !== \"selection\" &&\n      !isBoundToContainer(element) &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n\n  elementsInSelection = excludeElementsInFrames\n    ? excludeElementsInFramesFromSelection(elementsInSelection)\n    : elementsInSelection;\n\n  elementsInSelection = elementsInSelection.filter((element) => {\n    const containingFrame = getContainingFrame(element, elementsMap);\n\n    if (containingFrame) {\n      return elementOverlapsWithFrame(element, containingFrame, elementsMap);\n    }\n\n    return true;\n  });\n\n  return elementsInSelection;\n};\n\nexport const getVisibleAndNonSelectedElements = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  selectedElements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  const selectedElementsSet = new Set(\n    selectedElements.map((element) => element.id),\n  );\n  return elements.filter((element) => {\n    const isVisible = isElementInViewport(\n      element,\n      appState.width,\n      appState.height,\n      appState,\n      elementsMap,\n    );\n\n    return !selectedElementsSet.has(element.id) && isVisible;\n  });\n};\n\n// FIXME move this into the editor instance to keep utility methods stateless\nexport const isSomeElementSelected = (function () {\n  let lastElements: readonly NonDeletedExcalidrawElement[] | null = null;\n  let lastSelectedElementIds: AppState[\"selectedElementIds\"] | null = null;\n  let isSelected: boolean | null = null;\n\n  const ret = (\n    elements: readonly NonDeletedExcalidrawElement[],\n    appState: Pick<AppState, \"selectedElementIds\">,\n  ): boolean => {\n    if (\n      isSelected != null &&\n      elements === lastElements &&\n      appState.selectedElementIds === lastSelectedElementIds\n    ) {\n      return isSelected;\n    }\n\n    isSelected = elements.some(\n      (element) => appState.selectedElementIds[element.id],\n    );\n    lastElements = elements;\n    lastSelectedElementIds = appState.selectedElementIds;\n\n    return isSelected;\n  };\n\n  ret.clearCache = () => {\n    lastElements = null;\n    lastSelectedElementIds = null;\n    isSelected = null;\n  };\n\n  return ret;\n})();\n\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\nexport const getCommonAttributeOfSelectedElements = <T>(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: Pick<AppState, \"selectedElementIds\">,\n  getAttribute: (element: ExcalidrawElement) => T,\n): T | null => {\n  const attributes = Array.from(\n    new Set(\n      getSelectedElements(elements, appState).map((element) =>\n        getAttribute(element),\n      ),\n    ),\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n};\n\nexport const getSelectedElements = (\n  elements: ElementsMapOrArray,\n  appState: Pick<InteractiveCanvasAppState, \"selectedElementIds\">,\n  opts?: {\n    includeBoundTextElement?: boolean;\n    includeElementsInFrames?: boolean;\n  },\n) => {\n  const addedElements = new Set<ExcalidrawElement[\"id\"]>();\n  const selectedElements: ExcalidrawElement[] = [];\n  for (const element of elements.values()) {\n    if (appState.selectedElementIds[element.id]) {\n      selectedElements.push(element);\n      addedElements.add(element.id);\n      continue;\n    }\n    if (\n      opts?.includeBoundTextElement &&\n      isBoundToContainer(element) &&\n      appState.selectedElementIds[element?.containerId]\n    ) {\n      selectedElements.push(element);\n      addedElements.add(element.id);\n      continue;\n    }\n  }\n\n  if (opts?.includeElementsInFrames) {\n    const elementsToInclude: ExcalidrawElement[] = [];\n    selectedElements.forEach((element) => {\n      if (isFrameLikeElement(element)) {\n        getFrameChildren(elements, element.id).forEach(\n          (e) => !addedElements.has(e.id) && elementsToInclude.push(e),\n        );\n      }\n      elementsToInclude.push(element);\n    });\n\n    return elementsToInclude;\n  }\n\n  return selectedElements;\n};\n\nexport const getTargetElements = (\n  elements: ElementsMapOrArray,\n  appState: Pick<\n    AppState,\n    \"selectedElementIds\" | \"editingTextElement\" | \"newElement\"\n  >,\n) =>\n  appState.editingTextElement\n    ? [appState.editingTextElement]\n    : appState.newElement\n    ? [appState.newElement]\n    : getSelectedElements(elements, appState, {\n        includeBoundTextElement: true,\n      });\n\n/**\n * returns prevState's selectedElementids if no change from previous, so as to\n * retain reference identity for memoization\n */\nexport const makeNextSelectedElementIds = (\n  nextSelectedElementIds: AppState[\"selectedElementIds\"],\n  prevState: Pick<AppState, \"selectedElementIds\">,\n) => {\n  if (isShallowEqual(prevState.selectedElementIds, nextSelectedElementIds)) {\n    return prevState.selectedElementIds;\n  }\n\n  return nextSelectedElementIds;\n};\n", "import { arrayToMap } from \"@excalidraw/common\";\nimport { isPointWithinBounds, pointFrom } from \"@excalidraw/math\";\nimport { doLineSegmentsIntersect } from \"@excalidraw/utils/bbox\";\nimport { elementsOverlappingBBox } from \"@excalidraw/utils/withinBounds\";\n\nimport type { ExcalidrawElementsIncludingDeleted } from \"@excalidraw/excalidraw/scene/Scene\";\n\nimport type {\n  AppClassProperties,\n  AppState,\n  StaticCanvasAppState,\n} from \"@excalidraw/excalidraw/types\";\n\nimport type { ReadonlySetLike } from \"@excalidraw/common/utility-types\";\n\nimport { getElementsWithinSelection, getSelectedElements } from \"./selection\";\nimport { getElementsInGroup, selectGroupsFromGivenElements } from \"./groups\";\n\nimport {\n  getElementLineSegments,\n  getCommonBounds,\n  getElementAbsoluteCoords,\n} from \"./bounds\";\nimport { mutateElement } from \"./mutateElement\";\nimport { getBoundTextElement, getContainerElement } from \"./textElement\";\nimport {\n  isFrameElement,\n  isFrameLikeElement,\n  isTextElement,\n} from \"./typeChecks\";\n\nimport type {\n  ElementsMap,\n  ElementsMapOrArray,\n  ExcalidrawElement,\n  ExcalidrawFrameLikeElement,\n  NonDeleted,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\n// --------------------------- Frame State ------------------------------------\nexport const bindElementsToFramesAfterDuplication = (\n  nextElements: readonly ExcalidrawElement[],\n  oldElements: readonly ExcalidrawElement[],\n  oldIdToDuplicatedId: Map<ExcalidrawElement[\"id\"], ExcalidrawElement[\"id\"]>,\n) => {\n  const nextElementMap = arrayToMap(nextElements) as Map<\n    ExcalidrawElement[\"id\"],\n    ExcalidrawElement\n  >;\n\n  for (const element of oldElements) {\n    if (element.frameId) {\n      // use its frameId to get the new frameId\n      const nextElementId = oldIdToDuplicatedId.get(element.id);\n      const nextFrameId = oldIdToDuplicatedId.get(element.frameId);\n      if (nextElementId) {\n        const nextElement = nextElementMap.get(nextElementId);\n        if (nextElement) {\n          mutateElement(\n            nextElement,\n            {\n              frameId: nextFrameId ?? element.frameId,\n            },\n            false,\n          );\n        }\n      }\n    }\n  }\n};\n\nexport function isElementIntersectingFrame(\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) {\n  const frameLineSegments = getElementLineSegments(frame, elementsMap);\n\n  const elementLineSegments = getElementLineSegments(element, elementsMap);\n\n  const intersecting = frameLineSegments.some((frameLineSegment) =>\n    elementLineSegments.some((elementLineSegment) =>\n      doLineSegmentsIntersect(frameLineSegment, elementLineSegment),\n    ),\n  );\n\n  return intersecting;\n}\n\nexport const getElementsCompletelyInFrame = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) =>\n  omitGroupsContainingFrameLikes(\n    getElementsWithinSelection(elements, frame, elementsMap, false),\n  ).filter(\n    (element) =>\n      (!isFrameLikeElement(element) && !element.frameId) ||\n      element.frameId === frame.id,\n  );\n\nexport const isElementContainingFrame = (\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) => {\n  return getElementsWithinSelection([frame], element, elementsMap).some(\n    (e) => e.id === frame.id,\n  );\n};\n\nexport const getElementsIntersectingFrame = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  const elementsMap = arrayToMap(elements);\n  return elements.filter((element) =>\n    isElementIntersectingFrame(element, frame, elementsMap),\n  );\n};\n\nexport const elementsAreInFrameBounds = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) => {\n  const [frameX1, frameY1, frameX2, frameY2] = getElementAbsoluteCoords(\n    frame,\n    elementsMap,\n  );\n\n  const [elementX1, elementY1, elementX2, elementY2] =\n    getCommonBounds(elements);\n\n  return (\n    frameX1 <= elementX1 &&\n    frameY1 <= elementY1 &&\n    frameX2 >= elementX2 &&\n    frameY2 >= elementY2\n  );\n};\n\nexport const elementOverlapsWithFrame = (\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) => {\n  return (\n    elementsAreInFrameBounds([element], frame, elementsMap) ||\n    isElementIntersectingFrame(element, frame, elementsMap) ||\n    isElementContainingFrame(element, frame, elementsMap)\n  );\n};\n\nexport const isCursorInFrame = (\n  cursorCoords: {\n    x: number;\n    y: number;\n  },\n  frame: NonDeleted<ExcalidrawFrameLikeElement>,\n  elementsMap: ElementsMap,\n) => {\n  const [fx1, fy1, fx2, fy2] = getElementAbsoluteCoords(frame, elementsMap);\n\n  return isPointWithinBounds(\n    pointFrom(fx1, fy1),\n    pointFrom(cursorCoords.x, cursorCoords.y),\n    pointFrom(fx2, fy2),\n  );\n};\n\nexport const groupsAreAtLeastIntersectingTheFrame = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  groupIds: readonly string[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  const elementsMap = arrayToMap(elements);\n  const elementsInGroup = groupIds.flatMap((groupId) =>\n    getElementsInGroup(elements, groupId),\n  );\n\n  if (elementsInGroup.length === 0) {\n    return true;\n  }\n\n  return !!elementsInGroup.find(\n    (element) =>\n      elementsAreInFrameBounds([element], frame, elementsMap) ||\n      isElementIntersectingFrame(element, frame, elementsMap),\n  );\n};\n\nexport const groupsAreCompletelyOutOfFrame = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  groupIds: readonly string[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  const elementsMap = arrayToMap(elements);\n  const elementsInGroup = groupIds.flatMap((groupId) =>\n    getElementsInGroup(elements, groupId),\n  );\n\n  if (elementsInGroup.length === 0) {\n    return true;\n  }\n\n  return (\n    elementsInGroup.find(\n      (element) =>\n        elementsAreInFrameBounds([element], frame, elementsMap) ||\n        isElementIntersectingFrame(element, frame, elementsMap),\n    ) === undefined\n  );\n};\n\n// --------------------------- Frame Utils ------------------------------------\n\n/**\n * Returns a map of frameId to frame elements. Includes empty frames.\n */\nexport const groupByFrameLikes = (elements: readonly ExcalidrawElement[]) => {\n  const frameElementsMap = new Map<\n    ExcalidrawElement[\"id\"],\n    ExcalidrawElement[]\n  >();\n\n  for (const element of elements) {\n    const frameId = isFrameLikeElement(element) ? element.id : element.frameId;\n    if (frameId && !frameElementsMap.has(frameId)) {\n      frameElementsMap.set(frameId, getFrameChildren(elements, frameId));\n    }\n  }\n\n  return frameElementsMap;\n};\n\nexport const getFrameChildren = (\n  allElements: ElementsMapOrArray,\n  frameId: string,\n) => {\n  const frameChildren: ExcalidrawElement[] = [];\n  for (const element of allElements.values()) {\n    if (element.frameId === frameId) {\n      frameChildren.push(element);\n    }\n  }\n  return frameChildren;\n};\n\nexport const getFrameLikeElements = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n): ExcalidrawFrameLikeElement[] => {\n  return allElements.filter((element): element is ExcalidrawFrameLikeElement =>\n    isFrameLikeElement(element),\n  );\n};\n\n/**\n * Returns ExcalidrawFrameElements and non-frame-children elements.\n *\n * Considers children as root elements if they point to a frame parent\n * non-existing in the elements set.\n *\n * Considers non-frame bound elements (container or arrow labels) as root.\n */\nexport const getRootElements = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n) => {\n  const frameElements = arrayToMap(getFrameLikeElements(allElements));\n  return allElements.filter(\n    (element) =>\n      frameElements.has(element.id) ||\n      !element.frameId ||\n      !frameElements.has(element.frameId),\n  );\n};\n\nexport const getElementsInResizingFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  frame: ExcalidrawFrameLikeElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n): ExcalidrawElement[] => {\n  const prevElementsInFrame = getFrameChildren(allElements, frame.id);\n  const nextElementsInFrame = new Set<ExcalidrawElement>(prevElementsInFrame);\n\n  const elementsCompletelyInFrame = new Set([\n    ...getElementsCompletelyInFrame(allElements, frame, elementsMap),\n    ...prevElementsInFrame.filter((element) =>\n      isElementContainingFrame(element, frame, elementsMap),\n    ),\n  ]);\n\n  const elementsNotCompletelyInFrame = prevElementsInFrame.filter(\n    (element) => !elementsCompletelyInFrame.has(element),\n  );\n\n  // for elements that are completely in the frame\n  // if they are part of some groups, then those groups are still\n  // considered to belong to the frame\n  const groupsToKeep = new Set<string>(\n    Array.from(elementsCompletelyInFrame).flatMap(\n      (element) => element.groupIds,\n    ),\n  );\n\n  for (const element of elementsNotCompletelyInFrame) {\n    if (!isElementIntersectingFrame(element, frame, elementsMap)) {\n      if (element.groupIds.length === 0) {\n        nextElementsInFrame.delete(element);\n      }\n    } else if (element.groupIds.length > 0) {\n      // group element intersects with the frame, we should keep the groups\n      // that this element is part of\n      for (const id of element.groupIds) {\n        groupsToKeep.add(id);\n      }\n    }\n  }\n\n  for (const element of elementsNotCompletelyInFrame) {\n    if (element.groupIds.length > 0) {\n      let shouldRemoveElement = true;\n\n      for (const id of element.groupIds) {\n        if (groupsToKeep.has(id)) {\n          shouldRemoveElement = false;\n        }\n      }\n\n      if (shouldRemoveElement) {\n        nextElementsInFrame.delete(element);\n      }\n    }\n  }\n\n  const individualElementsCompletelyInFrame = Array.from(\n    elementsCompletelyInFrame,\n  ).filter((element) => element.groupIds.length === 0);\n\n  for (const element of individualElementsCompletelyInFrame) {\n    nextElementsInFrame.add(element);\n  }\n\n  const newGroupElementsCompletelyInFrame = Array.from(\n    elementsCompletelyInFrame,\n  ).filter((element) => element.groupIds.length > 0);\n\n  const groupIds = selectGroupsFromGivenElements(\n    newGroupElementsCompletelyInFrame,\n    appState,\n  );\n\n  // new group elements\n  for (const [id, isSelected] of Object.entries(groupIds)) {\n    if (isSelected) {\n      const elementsInGroup = getElementsInGroup(allElements, id);\n\n      if (elementsAreInFrameBounds(elementsInGroup, frame, elementsMap)) {\n        for (const element of elementsInGroup) {\n          nextElementsInFrame.add(element);\n        }\n      }\n    }\n  }\n\n  return [...nextElementsInFrame].filter((element) => {\n    return !(isTextElement(element) && element.containerId);\n  });\n};\n\nexport const getElementsInNewFrame = (\n  elements: ExcalidrawElementsIncludingDeleted,\n  frame: ExcalidrawFrameLikeElement,\n  elementsMap: ElementsMap,\n) => {\n  return omitPartialGroups(\n    omitGroupsContainingFrameLikes(\n      elements,\n      getElementsCompletelyInFrame(elements, frame, elementsMap),\n    ),\n    frame,\n    elementsMap,\n  );\n};\n\nexport const omitPartialGroups = (\n  elements: ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n  allElementsMap: ElementsMap,\n) => {\n  const elementsToReturn = [];\n  const checkedGroups = new Map<string, boolean>();\n\n  for (const element of elements) {\n    let shouldOmit = false;\n    if (element.groupIds.length > 0) {\n      // if some partial group should be omitted, then all elements in that group should be omitted\n      if (element.groupIds.some((gid) => checkedGroups.get(gid))) {\n        shouldOmit = true;\n      } else {\n        const allElementsInGroup = new Set(\n          element.groupIds.flatMap((gid) =>\n            getElementsInGroup(allElementsMap, gid),\n          ),\n        );\n\n        shouldOmit = !elementsAreInFrameBounds(\n          Array.from(allElementsInGroup),\n          frame,\n          allElementsMap,\n        );\n      }\n\n      element.groupIds.forEach((gid) => {\n        checkedGroups.set(gid, shouldOmit);\n      });\n    }\n\n    if (!shouldOmit) {\n      elementsToReturn.push(element);\n    }\n  }\n\n  return elementsToReturn;\n};\n\nexport const getContainingFrame = (\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n) => {\n  if (!element.frameId) {\n    return null;\n  }\n  return (elementsMap.get(element.frameId) ||\n    null) as null | ExcalidrawFrameLikeElement;\n};\n\n// --------------------------- Frame Operations -------------------------------\n\n/** */\nexport const filterElementsEligibleAsFrameChildren = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  const otherFrames = new Set<ExcalidrawFrameLikeElement[\"id\"]>();\n  const elementsMap = arrayToMap(elements);\n  elements = omitGroupsContainingFrameLikes(elements);\n\n  for (const element of elements) {\n    if (isFrameLikeElement(element) && element.id !== frame.id) {\n      otherFrames.add(element.id);\n    }\n  }\n\n  const processedGroups = new Set<ExcalidrawElement[\"id\"]>();\n\n  const eligibleElements: ExcalidrawElement[] = [];\n\n  for (const element of elements) {\n    // don't add frames or their children\n    if (\n      isFrameLikeElement(element) ||\n      (element.frameId && otherFrames.has(element.frameId))\n    ) {\n      continue;\n    }\n\n    if (element.groupIds.length) {\n      const shallowestGroupId = element.groupIds.at(-1)!;\n      if (!processedGroups.has(shallowestGroupId)) {\n        processedGroups.add(shallowestGroupId);\n        const groupElements = getElementsInGroup(elements, shallowestGroupId);\n        if (\n          groupElements.some((el) =>\n            elementOverlapsWithFrame(el, frame, elementsMap),\n          )\n        ) {\n          for (const child of groupElements) {\n            eligibleElements.push(child);\n          }\n        }\n      }\n    } else {\n      const overlaps = elementOverlapsWithFrame(element, frame, elementsMap);\n      if (overlaps) {\n        eligibleElements.push(element);\n      }\n    }\n  }\n\n  return eligibleElements;\n};\n\n/**\n * Retains (or repairs for target frame) the ordering invriant where children\n * elements come right before the parent frame:\n * [el, el, child, child, frame, el]\n *\n * @returns mutated allElements (same data structure)\n */\nexport const addElementsToFrame = <T extends ElementsMapOrArray>(\n  allElements: T,\n  elementsToAdd: NonDeletedExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n  appState: AppState,\n): T => {\n  const elementsMap = arrayToMap(allElements);\n  const currTargetFrameChildrenMap = new Map<ExcalidrawElement[\"id\"], true>();\n  for (const element of allElements.values()) {\n    if (element.frameId === frame.id) {\n      currTargetFrameChildrenMap.set(element.id, true);\n    }\n  }\n\n  const suppliedElementsToAddSet = new Set(elementsToAdd.map((el) => el.id));\n\n  const finalElementsToAdd: ExcalidrawElement[] = [];\n\n  const otherFrames = new Set<ExcalidrawFrameLikeElement[\"id\"]>();\n\n  for (const element of elementsToAdd) {\n    if (isFrameLikeElement(element) && element.id !== frame.id) {\n      otherFrames.add(element.id);\n    }\n  }\n\n  // - add bound text elements if not already in the array\n  // - filter out elements that are already in the frame\n  for (const element of omitGroupsContainingFrameLikes(\n    allElements,\n    elementsToAdd,\n  )) {\n    // don't add frames or their children\n    if (\n      isFrameLikeElement(element) ||\n      (element.frameId && otherFrames.has(element.frameId))\n    ) {\n      continue;\n    }\n\n    // if the element is already in another frame (which is also in elementsToAdd),\n    // it means that frame and children are selected at the same time\n    // => keep original frame membership, do not add to the target frame\n    if (\n      element.frameId &&\n      appState.selectedElementIds[element.id] &&\n      appState.selectedElementIds[element.frameId]\n    ) {\n      continue;\n    }\n\n    if (!currTargetFrameChildrenMap.has(element.id)) {\n      finalElementsToAdd.push(element);\n    }\n\n    const boundTextElement = getBoundTextElement(element, elementsMap);\n    if (\n      boundTextElement &&\n      !suppliedElementsToAddSet.has(boundTextElement.id) &&\n      !currTargetFrameChildrenMap.has(boundTextElement.id)\n    ) {\n      finalElementsToAdd.push(boundTextElement);\n    }\n  }\n\n  for (const element of finalElementsToAdd) {\n    mutateElement(\n      element,\n      {\n        frameId: frame.id,\n      },\n      false,\n    );\n  }\n\n  return allElements;\n};\n\nexport const removeElementsFromFrame = (\n  elementsToRemove: ReadonlySetLike<NonDeletedExcalidrawElement>,\n  elementsMap: ElementsMap,\n) => {\n  const _elementsToRemove = new Map<\n    ExcalidrawElement[\"id\"],\n    ExcalidrawElement\n  >();\n\n  const toRemoveElementsByFrame = new Map<\n    ExcalidrawFrameLikeElement[\"id\"],\n    ExcalidrawElement[]\n  >();\n\n  for (const element of elementsToRemove) {\n    if (element.frameId) {\n      _elementsToRemove.set(element.id, element);\n\n      const arr = toRemoveElementsByFrame.get(element.frameId) || [];\n      arr.push(element);\n\n      const boundTextElement = getBoundTextElement(element, elementsMap);\n      if (boundTextElement) {\n        _elementsToRemove.set(boundTextElement.id, boundTextElement);\n        arr.push(boundTextElement);\n      }\n\n      toRemoveElementsByFrame.set(element.frameId, arr);\n    }\n  }\n\n  for (const [, element] of _elementsToRemove) {\n    mutateElement(\n      element,\n      {\n        frameId: null,\n      },\n      false,\n    );\n  }\n};\n\nexport const removeAllElementsFromFrame = <T extends ExcalidrawElement>(\n  allElements: readonly T[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  const elementsInFrame = getFrameChildren(allElements, frame.id);\n  removeElementsFromFrame(elementsInFrame, arrayToMap(allElements));\n  return allElements;\n};\n\nexport const replaceAllElementsInFrame = <T extends ExcalidrawElement>(\n  allElements: readonly T[],\n  nextElementsInFrame: ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n  app: AppClassProperties,\n): T[] => {\n  return addElementsToFrame(\n    removeAllElementsFromFrame(allElements, frame),\n    nextElementsInFrame,\n    frame,\n    app.state,\n  ).slice();\n};\n\n/** does not mutate elements, but returns new ones */\nexport const updateFrameMembershipOfSelectedElements = <\n  T extends ElementsMapOrArray,\n>(\n  allElements: T,\n  appState: AppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    // supplying elements explicitly in case we're passed non-state elements\n    elements: allElements,\n  });\n  const elementsToFilter = new Set<ExcalidrawElement>(selectedElements);\n\n  if (appState.editingGroupId) {\n    for (const element of selectedElements) {\n      if (element.groupIds.length === 0) {\n        elementsToFilter.add(element);\n      } else {\n        element.groupIds\n          .flatMap((gid) => getElementsInGroup(allElements, gid))\n          .forEach((element) => elementsToFilter.add(element));\n      }\n    }\n  }\n\n  const elementsToRemove = new Set<ExcalidrawElement>();\n\n  const elementsMap = arrayToMap(allElements);\n\n  elementsToFilter.forEach((element) => {\n    if (\n      element.frameId &&\n      !isFrameLikeElement(element) &&\n      !isElementInFrame(element, elementsMap, appState)\n    ) {\n      elementsToRemove.add(element);\n    }\n  });\n\n  if (elementsToRemove.size > 0) {\n    removeElementsFromFrame(elementsToRemove, elementsMap);\n  }\n  return allElements;\n};\n\n/**\n * filters out elements that are inside groups that contain a frame element\n * anywhere in the group tree\n */\nexport const omitGroupsContainingFrameLikes = (\n  allElements: ElementsMapOrArray,\n  /** subset of elements you want to filter. Optional perf optimization so we\n   * don't have to filter all elements unnecessarily\n   */\n  selectedElements?: readonly ExcalidrawElement[],\n) => {\n  const uniqueGroupIds = new Set<string>();\n  const elements = selectedElements || allElements;\n\n  for (const el of elements.values()) {\n    const topMostGroupId = el.groupIds[el.groupIds.length - 1];\n    if (topMostGroupId) {\n      uniqueGroupIds.add(topMostGroupId);\n    }\n  }\n\n  const rejectedGroupIds = new Set<string>();\n  for (const groupId of uniqueGroupIds) {\n    if (\n      getElementsInGroup(allElements, groupId).some((el) =>\n        isFrameLikeElement(el),\n      )\n    ) {\n      rejectedGroupIds.add(groupId);\n    }\n  }\n\n  const ret: ExcalidrawElement[] = [];\n\n  for (const element of elements.values()) {\n    if (!rejectedGroupIds.has(element.groupIds[element.groupIds.length - 1])) {\n      ret.push(element);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * depending on the appState, return target frame, which is the frame the given element\n * is going to be added to or remove from\n */\nexport const getTargetFrame = (\n  element: ExcalidrawElement,\n  elementsMap: ElementsMap,\n  appState: StaticCanvasAppState,\n) => {\n  const _element = isTextElement(element)\n    ? getContainerElement(element, elementsMap) || element\n    : element;\n\n  // if the element and its containing frame are both selected, then\n  // the containing frame is the target frame\n  if (\n    _element.frameId &&\n    appState.selectedElementIds[_element.id] &&\n    appState.selectedElementIds[_element.frameId]\n  ) {\n    return getContainingFrame(_element, elementsMap);\n  }\n\n  return appState.selectedElementIds[_element.id] &&\n    appState.selectedElementsAreBeingDragged\n    ? appState.frameToHighlight\n    : getContainingFrame(_element, elementsMap);\n};\n\n// TODO: this a huge bottleneck for large scenes, optimise\n// given an element, return if the element is in some frame\nexport const isElementInFrame = (\n  element: ExcalidrawElement,\n  allElementsMap: ElementsMap,\n  appState: StaticCanvasAppState,\n  opts?: {\n    targetFrame?: ExcalidrawFrameLikeElement;\n    checkedGroups?: Map<string, boolean>;\n  },\n) => {\n  const frame =\n    opts?.targetFrame ?? getTargetFrame(element, allElementsMap, appState);\n\n  if (!frame) {\n    return false;\n  }\n\n  const _element = isTextElement(element)\n    ? getContainerElement(element, allElementsMap) || element\n    : element;\n\n  const setGroupsInFrame = (isInFrame: boolean) => {\n    if (opts?.checkedGroups) {\n      _element.groupIds.forEach((groupId) => {\n        opts.checkedGroups?.set(groupId, isInFrame);\n      });\n    }\n  };\n\n  if (\n    // if the element is not selected, or it is selected but not being dragged,\n    // frame membership won't update, so return true\n    !appState.selectedElementIds[_element.id] ||\n    !appState.selectedElementsAreBeingDragged ||\n    // if both frame and element are selected, won't update membership, so return true\n    (appState.selectedElementIds[_element.id] &&\n      appState.selectedElementIds[frame.id])\n  ) {\n    return true;\n  }\n\n  if (_element.groupIds.length === 0) {\n    return elementOverlapsWithFrame(_element, frame, allElementsMap);\n  }\n\n  for (const gid of _element.groupIds) {\n    if (opts?.checkedGroups?.has(gid)) {\n      return opts.checkedGroups.get(gid)!!;\n    }\n  }\n\n  const allElementsInGroup = new Set(\n    _element.groupIds\n      .filter((gid) => {\n        if (opts?.checkedGroups) {\n          return !opts.checkedGroups.has(gid);\n        }\n        return true;\n      })\n      .flatMap((gid) => getElementsInGroup(allElementsMap, gid)),\n  );\n\n  if (appState.editingGroupId && appState.selectedElementsAreBeingDragged) {\n    const selectedElements = new Set(\n      getSelectedElements(allElementsMap, appState),\n    );\n\n    const editingGroupOverlapsFrame = appState.frameToHighlight !== null;\n\n    if (editingGroupOverlapsFrame) {\n      return true;\n    }\n\n    selectedElements.forEach((selectedElement) => {\n      allElementsInGroup.delete(selectedElement);\n    });\n  }\n\n  for (const elementInGroup of allElementsInGroup) {\n    if (isFrameLikeElement(elementInGroup)) {\n      setGroupsInFrame(false);\n      return false;\n    }\n  }\n\n  for (const elementInGroup of allElementsInGroup) {\n    if (elementOverlapsWithFrame(elementInGroup, frame, allElementsMap)) {\n      setGroupsInFrame(true);\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const shouldApplyFrameClip = (\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameLikeElement,\n  appState: StaticCanvasAppState,\n  elementsMap: ElementsMap,\n  checkedGroups?: Map<string, boolean>,\n) => {\n  if (!appState.frameRendering || !appState.frameRendering.clip) {\n    return false;\n  }\n\n  // for individual elements, only clip when the element is\n  // a. overlapping with the frame, or\n  // b. containing the frame, for example when an element is used as a background\n  //    and is therefore bigger than the frame and completely contains the frame\n  const shouldClipElementItself =\n    isElementIntersectingFrame(element, frame, elementsMap) ||\n    isElementContainingFrame(element, frame, elementsMap);\n\n  if (shouldClipElementItself) {\n    for (const groupId of element.groupIds) {\n      checkedGroups?.set(groupId, true);\n    }\n\n    return true;\n  }\n\n  // if an element is outside the frame, but is part of a group that has some elements\n  // \"in\" the frame, we should clip the element\n  if (\n    !shouldClipElementItself &&\n    element.groupIds.length > 0 &&\n    !elementsAreInFrameBounds([element], frame, elementsMap)\n  ) {\n    let shouldClip = false;\n\n    // if no elements are being dragged, we can skip the geometry check\n    // because we know if the element is in the given frame or not\n    if (!appState.selectedElementsAreBeingDragged) {\n      shouldClip = element.frameId === frame.id;\n      for (const groupId of element.groupIds) {\n        checkedGroups?.set(groupId, shouldClip);\n      }\n    } else {\n      shouldClip = isElementInFrame(element, elementsMap, appState, {\n        targetFrame: frame,\n        checkedGroups,\n      });\n    }\n\n    for (const groupId of element.groupIds) {\n      checkedGroups?.set(groupId, shouldClip);\n    }\n\n    return shouldClip;\n  }\n\n  return false;\n};\n\nexport const getFrameLikeTitle = (element: ExcalidrawFrameLikeElement) => {\n  // TODO name frames \"AI\" only if specific to AI frames\n  return element.name === null\n    ? isFrameElement(element)\n      ? \"Frame\"\n      : \"AI Frame\"\n    : element.name;\n};\n\nexport const getElementsOverlappingFrame = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameLikeElement,\n) => {\n  return (\n    elementsOverlappingBBox({\n      elements,\n      bounds: frame,\n      type: \"overlap\",\n    })\n      // removes elements who are overlapping, but are in a different frame,\n      // and thus invisible in target frame\n      .filter((el) => !el.frameId || el.frameId === frame.id)\n  );\n};\n\nexport const frameAndChildrenSelectedTogether = (\n  selectedElements: readonly ExcalidrawElement[],\n) => {\n  const selectedElementsMap = arrayToMap(selectedElements);\n\n  return (\n    selectedElements.length > 1 &&\n    selectedElements.some(\n      (element) => element.frameId && selectedElementsMap.has(element.frameId),\n    )\n  );\n};\n", "import {\n  vectorCross,\n  vectorFromPoint,\n  type GlobalPoint,\n  type LocalPoint,\n} from \"@excalidraw/math\";\n\nimport type { Bounds } from \"@excalidraw/element/bounds\";\n\nexport type LineSegment<P extends LocalPoint | GlobalPoint> = [P, P];\n\nexport function getBBox<P extends LocalPoint | GlobalPoint>(\n  line: LineSegment<P>,\n): Bounds {\n  return [\n    Math.min(line[0][0], line[1][0]),\n    Math.min(line[0][1], line[1][1]),\n    Math.max(line[0][0], line[1][0]),\n    Math.max(line[0][1], line[1][1]),\n  ];\n}\n\nexport function doBBoxesIntersect(a: Bounds, b: Bounds) {\n  return a[0] <= b[2] && a[2] >= b[0] && a[1] <= b[3] && a[3] >= b[1];\n}\n\nconst EPSILON = 0.000001;\n\nexport function isPointOnLine<P extends GlobalPoint | LocalPoint>(\n  l: LineSegment<P>,\n  p: P,\n) {\n  const p1 = vectorFromPoint(l[1], l[0]);\n  const p2 = vectorFromPoint(p, l[0]);\n\n  const r = vectorCross(p1, p2);\n\n  return Math.abs(r) < EPSILON;\n}\n\nexport function isPointRightOfLine<P extends GlobalPoint | LocalPoint>(\n  l: LineSegment<P>,\n  p: P,\n) {\n  const p1 = vectorFromPoint(l[1], l[0]);\n  const p2 = vectorFromPoint(p, l[0]);\n\n  return vectorCross(p1, p2) < 0;\n}\n\nexport function isLineSegmentTouchingOrCrossingLine<\n  P extends GlobalPoint | LocalPoint,\n>(a: LineSegment<P>, b: LineSegment<P>) {\n  return (\n    isPointOnLine(a, b[0]) ||\n    isPointOnLine(a, b[1]) ||\n    (isPointRightOfLine(a, b[0])\n      ? !isPointRightOfLine(a, b[1])\n      : isPointRightOfLine(a, b[1]))\n  );\n}\n\n// https://martin-thoma.com/how-to-check-if-two-line-segments-intersect/\nexport function doLineSegmentsIntersect<P extends GlobalPoint | LocalPoint>(\n  a: LineSegment<P>,\n  b: LineSegment<P>,\n) {\n  return (\n    doBBoxesIntersect(getBBox(a), getBBox(b)) &&\n    isLineSegmentTouchingOrCrossingLine(a, b) &&\n    isLineSegmentTouchingOrCrossingLine(b, a)\n  );\n}\n", "import { arrayToMap } from \"@excalidraw/common\";\nimport { getElementBounds } from \"@excalidraw/element/bounds\";\nimport {\n  isArrowElement,\n  isExcalidrawElement,\n  isFreeDrawElement,\n  isLinearElement,\n  isTextElement,\n} from \"@excalidraw/element/typeChecks\";\nimport {\n  rangeIncludesValue,\n  pointFrom,\n  pointRotateRads,\n  rangeInclusive,\n} from \"@excalidraw/math\";\n\nimport type { Bounds } from \"@excalidraw/element/bounds\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawFreeDrawElement,\n  ExcalidrawLinearElement,\n  NonDeletedExcalidrawElement,\n} from \"@excalidraw/element/types\";\nimport type { LocalPoint } from \"@excalidraw/math\";\n\ntype Element = NonDeletedExcalidrawElement;\ntype Elements = readonly NonDeletedExcalidrawElement[];\n\ntype Points = readonly LocalPoint[];\n\n/** @returns vertices relative to element's top-left [0,0] position  */\nconst getNonLinearElementRelativePoints = (\n  element: Exclude<\n    Element,\n    ExcalidrawLinearElement | ExcalidrawFreeDrawElement\n  >,\n): [\n  TopLeft: LocalPoint,\n  TopRight: LocalPoint,\n  BottomRight: LocalPoint,\n  BottomLeft: LocalPoint,\n] => {\n  if (element.type === \"diamond\") {\n    return [\n      pointFrom(element.width / 2, 0),\n      pointFrom(element.width, element.height / 2),\n      pointFrom(element.width / 2, element.height),\n      pointFrom(0, element.height / 2),\n    ];\n  }\n  return [\n    pointFrom(0, 0),\n    pointFrom(0 + element.width, 0),\n    pointFrom(0 + element.width, element.height),\n    pointFrom(0, element.height),\n  ];\n};\n\n/** @returns vertices relative to element's top-left [0,0] position  */\nconst getElementRelativePoints = (element: ExcalidrawElement): Points => {\n  if (isLinearElement(element) || isFreeDrawElement(element)) {\n    return element.points;\n  }\n  return getNonLinearElementRelativePoints(element);\n};\n\nconst getMinMaxPoints = (points: Points) => {\n  const ret = points.reduce(\n    (limits, [x, y]) => {\n      limits.minY = Math.min(limits.minY, y);\n      limits.minX = Math.min(limits.minX, x);\n\n      limits.maxX = Math.max(limits.maxX, x);\n      limits.maxY = Math.max(limits.maxY, y);\n\n      return limits;\n    },\n    {\n      minX: Infinity,\n      minY: Infinity,\n      maxX: -Infinity,\n      maxY: -Infinity,\n      cx: 0,\n      cy: 0,\n    },\n  );\n\n  ret.cx = (ret.maxX + ret.minX) / 2;\n  ret.cy = (ret.maxY + ret.minY) / 2;\n\n  return ret;\n};\n\nconst getRotatedBBox = (element: Element): Bounds => {\n  const points = getElementRelativePoints(element);\n\n  const { cx, cy } = getMinMaxPoints(points);\n  const centerPoint = pointFrom<LocalPoint>(cx, cy);\n\n  const rotatedPoints = points.map((p) =>\n    pointRotateRads(p, centerPoint, element.angle),\n  );\n  const { minX, minY, maxX, maxY } = getMinMaxPoints(rotatedPoints);\n\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const isElementInsideBBox = (\n  element: Element,\n  bbox: Bounds,\n  eitherDirection = false,\n): boolean => {\n  const elementBBox = getRotatedBBox(element);\n\n  const elementInsideBbox =\n    bbox[0] <= elementBBox[0] &&\n    bbox[2] >= elementBBox[2] &&\n    bbox[1] <= elementBBox[1] &&\n    bbox[3] >= elementBBox[3];\n\n  if (!eitherDirection) {\n    return elementInsideBbox;\n  }\n\n  if (elementInsideBbox) {\n    return true;\n  }\n\n  return (\n    elementBBox[0] <= bbox[0] &&\n    elementBBox[2] >= bbox[2] &&\n    elementBBox[1] <= bbox[1] &&\n    elementBBox[3] >= bbox[3]\n  );\n};\n\nexport const elementPartiallyOverlapsWithOrContainsBBox = (\n  element: Element,\n  bbox: Bounds,\n): boolean => {\n  const elementBBox = getRotatedBBox(element);\n\n  return (\n    (rangeIncludesValue(elementBBox[0], rangeInclusive(bbox[0], bbox[2])) ||\n      rangeIncludesValue(\n        bbox[0],\n        rangeInclusive(elementBBox[0], elementBBox[2]),\n      )) &&\n    (rangeIncludesValue(elementBBox[1], rangeInclusive(bbox[1], bbox[3])) ||\n      rangeIncludesValue(\n        bbox[1],\n        rangeInclusive(elementBBox[1], elementBBox[3]),\n      ))\n  );\n};\n\nexport const elementsOverlappingBBox = ({\n  elements,\n  bounds,\n  type,\n  errorMargin = 0,\n}: {\n  elements: Elements;\n  bounds: Bounds | ExcalidrawElement;\n  /** safety offset. Defaults to 0. */\n  errorMargin?: number;\n  /**\n   * - overlap: elements overlapping or inside bounds\n   * - contain: elements inside bounds or bounds inside elements\n   * - inside: elements inside bounds\n   **/\n  type: \"overlap\" | \"contain\" | \"inside\";\n}) => {\n  if (isExcalidrawElement(bounds)) {\n    bounds = getElementBounds(bounds, arrayToMap(elements));\n  }\n  const adjustedBBox: Bounds = [\n    bounds[0] - errorMargin,\n    bounds[1] - errorMargin,\n    bounds[2] + errorMargin,\n    bounds[3] + errorMargin,\n  ];\n\n  const includedElementSet = new Set<string>();\n\n  for (const element of elements) {\n    if (includedElementSet.has(element.id)) {\n      continue;\n    }\n\n    const isOverlaping =\n      type === \"overlap\"\n        ? elementPartiallyOverlapsWithOrContainsBBox(element, adjustedBBox)\n        : type === \"inside\"\n        ? isElementInsideBBox(element, adjustedBBox)\n        : isElementInsideBBox(element, adjustedBBox, true);\n\n    if (isOverlaping) {\n      includedElementSet.add(element.id);\n\n      if (element.boundElements) {\n        for (const boundElement of element.boundElements) {\n          includedElementSet.add(boundElement.id);\n        }\n      }\n\n      if (isTextElement(element) && element.containerId) {\n        includedElementSet.add(element.containerId);\n      }\n\n      if (isArrowElement(element)) {\n        if (element.startBinding) {\n          includedElementSet.add(element.startBinding.elementId);\n        }\n\n        if (element.endBinding) {\n          includedElementSet.add(element.endBinding?.elementId);\n        }\n      }\n    }\n  }\n\n  return elements.filter((element) => includedElementSet.has(element.id));\n};\n", "import { generateNKeysBetween } from \"fractional-indexing\";\n\nimport { arrayToMap } from \"@excalidraw/common\";\n\nimport { mutateElement } from \"./mutateElement\";\nimport { getBoundTextElement } from \"./textElement\";\nimport { hasBoundTextElement } from \"./typeChecks\";\n\nimport type {\n  ExcalidrawElement,\n  FractionalIndex,\n  OrderedExcalidrawElement,\n} from \"./types\";\n\nexport class InvalidFractionalIndexError extends Error {\n  public code = \"ELEMENT_HAS_INVALID_INDEX\" as const;\n}\n\n/**\n * Envisioned relation between array order and fractional indices:\n *\n * 1) Array (or array-like ordered data structure) should be used as a cache of elements order, hiding the internal fractional indices implementation.\n * - it's undesirable to perform reorder for each related operation, therefore it's necessary to cache the order defined by fractional indices into an ordered data structure\n * - it's easy enough to define the order of the elements from the outside (boundaries), without worrying about the underlying structure of fractional indices (especially for the host apps)\n * - it's necessary to always keep the array support for backwards compatibility (restore) - old scenes, old libraries, supporting multiple excalidraw versions etc.\n * - it's necessary to always keep the fractional indices in sync with the array order\n * - elements with invalid indices should be detected and synced, without altering the already valid indices\n *\n * 2) Fractional indices should be used to reorder the elements, whenever the cached order is expected to be invalidated.\n * - as the fractional indices are encoded as part of the elements, it opens up possibilities for incremental-like APIs\n * - re-order based on fractional indices should be part of (multiplayer) operations such as reconciliation & undo/redo\n * - technically all the z-index actions could perform also re-order based on fractional indices,but in current state it would not bring much benefits,\n *   as it's faster & more efficient to perform re-order based on array manipulation and later synchronisation of moved indices with the array order\n */\n\n/**\n * Ensure that all elements have valid fractional indices.\n *\n * @throws `InvalidFractionalIndexError` if invalid index is detected.\n */\nexport const validateFractionalIndices = (\n  elements: readonly ExcalidrawElement[],\n  {\n    shouldThrow = false,\n    includeBoundTextValidation = false,\n    ignoreLogs,\n    reconciliationContext,\n  }: {\n    shouldThrow: boolean;\n    includeBoundTextValidation: boolean;\n    ignoreLogs?: true;\n    reconciliationContext?: {\n      localElements: ReadonlyArray<ExcalidrawElement>;\n      remoteElements: ReadonlyArray<ExcalidrawElement>;\n    };\n  },\n) => {\n  const errorMessages = [];\n  const stringifyElement = (element: ExcalidrawElement | void) =>\n    `${element?.index}:${element?.id}:${element?.type}:${element?.isDeleted}:${element?.version}:${element?.versionNonce}`;\n\n  const indices = elements.map((x) => x.index);\n  for (const [i, index] of indices.entries()) {\n    const predecessorIndex = indices[i - 1];\n    const successorIndex = indices[i + 1];\n\n    if (!isValidFractionalIndex(index, predecessorIndex, successorIndex)) {\n      errorMessages.push(\n        `Fractional indices invariant has been compromised: \"${stringifyElement(\n          elements[i - 1],\n        )}\", \"${stringifyElement(elements[i])}\", \"${stringifyElement(\n          elements[i + 1],\n        )}\"`,\n      );\n    }\n\n    // disabled by default, as we don't fix it\n    if (includeBoundTextValidation && hasBoundTextElement(elements[i])) {\n      const container = elements[i];\n      const text = getBoundTextElement(container, arrayToMap(elements));\n\n      if (text && text.index! <= container.index!) {\n        errorMessages.push(\n          `Fractional indices invariant for bound elements has been compromised: \"${stringifyElement(\n            text,\n          )}\", \"${stringifyElement(container)}\"`,\n        );\n      }\n    }\n  }\n\n  if (errorMessages.length) {\n    const error = new InvalidFractionalIndexError();\n    const additionalContext = [];\n\n    if (reconciliationContext) {\n      additionalContext.push(\"Additional reconciliation context:\");\n      additionalContext.push(\n        reconciliationContext.localElements.map((x) => stringifyElement(x)),\n      );\n      additionalContext.push(\n        reconciliationContext.remoteElements.map((x) => stringifyElement(x)),\n      );\n    }\n\n    if (!ignoreLogs) {\n      // report just once and with the stacktrace\n      console.error(\n        errorMessages.join(\"\\n\\n\"),\n        error.stack,\n        elements.map((x) => stringifyElement(x)),\n        ...additionalContext,\n      );\n    }\n\n    if (shouldThrow) {\n      // if enabled, gather all the errors first, throw once\n      throw error;\n    }\n  }\n};\n\n/**\n * Order the elements based on the fractional indices.\n * - when fractional indices are identical, break the tie based on the element id\n * - when there is no fractional index in one of the elements, respect the order of the array\n */\nexport const orderByFractionalIndex = (\n  elements: OrderedExcalidrawElement[],\n) => {\n  return elements.sort((a, b) => {\n    // in case the indices are not the defined at runtime\n    if (isOrderedElement(a) && isOrderedElement(b)) {\n      if (a.index < b.index) {\n        return -1;\n      } else if (a.index > b.index) {\n        return 1;\n      }\n\n      // break ties based on the element id\n      return a.id < b.id ? -1 : 1;\n    }\n\n    // defensively keep the array order\n    return 1;\n  });\n};\n\n/**\n * Synchronizes invalid fractional indices of moved elements with the array order by mutating passed elements.\n * If the synchronization fails or the result is invalid, it fallbacks to `syncInvalidIndices`.\n */\nexport const syncMovedIndices = (\n  elements: readonly ExcalidrawElement[],\n  movedElements: Map<string, ExcalidrawElement>,\n): OrderedExcalidrawElement[] => {\n  try {\n    const indicesGroups = getMovedIndicesGroups(elements, movedElements);\n\n    // try generatating indices, throws on invalid movedElements\n    const elementsUpdates = generateIndices(elements, indicesGroups);\n    const elementsCandidates = elements.map((x) =>\n      elementsUpdates.has(x) ? { ...x, ...elementsUpdates.get(x) } : x,\n    );\n\n    // ensure next indices are valid before mutation, throws on invalid ones\n    validateFractionalIndices(\n      elementsCandidates,\n      // we don't autofix invalid bound text indices, hence don't include it in the validation\n      {\n        includeBoundTextValidation: false,\n        shouldThrow: true,\n        ignoreLogs: true,\n      },\n    );\n\n    // split mutation so we don't end up in an incosistent state\n    for (const [element, update] of elementsUpdates) {\n      mutateElement(element, update, false);\n    }\n  } catch (e) {\n    // fallback to default sync\n    syncInvalidIndices(elements);\n  }\n\n  return elements as OrderedExcalidrawElement[];\n};\n\n/**\n * Synchronizes all invalid fractional indices with the array order by mutating passed elements.\n *\n * WARN: in edge cases it could modify the elements which were not moved, as it's impossible to guess the actually moved elements from the elements array itself.\n */\nexport const syncInvalidIndices = (\n  elements: readonly ExcalidrawElement[],\n): OrderedExcalidrawElement[] => {\n  const indicesGroups = getInvalidIndicesGroups(elements);\n  const elementsUpdates = generateIndices(elements, indicesGroups);\n  for (const [element, update] of elementsUpdates) {\n    mutateElement(element, update, false);\n  }\n\n  return elements as OrderedExcalidrawElement[];\n};\n\n/**\n * Get contiguous groups of indices of passed moved elements.\n *\n * NOTE: First and last elements within the groups are indices of lower and upper bounds.\n */\nconst getMovedIndicesGroups = (\n  elements: readonly ExcalidrawElement[],\n  movedElements: Map<string, ExcalidrawElement>,\n) => {\n  const indicesGroups: number[][] = [];\n\n  let i = 0;\n\n  while (i < elements.length) {\n    if (movedElements.has(elements[i].id)) {\n      const indicesGroup = [i - 1, i]; // push the lower bound index as the first item\n\n      while (++i < elements.length) {\n        if (!movedElements.has(elements[i].id)) {\n          break;\n        }\n\n        indicesGroup.push(i);\n      }\n\n      indicesGroup.push(i); // push the upper bound index as the last item\n      indicesGroups.push(indicesGroup);\n    } else {\n      i++;\n    }\n  }\n\n  return indicesGroups;\n};\n\n/**\n * Gets contiguous groups of all invalid indices automatically detected inside the elements array.\n *\n * WARN: First and last items within the groups do NOT have to be contiguous, those are the found lower and upper bounds!\n */\nconst getInvalidIndicesGroups = (elements: readonly ExcalidrawElement[]) => {\n  const indicesGroups: number[][] = [];\n\n  // once we find lowerBound / upperBound, it cannot be lower than that, so we cache it for better perf.\n  let lowerBound: ExcalidrawElement[\"index\"] | undefined = undefined;\n  let upperBound: ExcalidrawElement[\"index\"] | undefined = undefined;\n  let lowerBoundIndex: number = -1;\n  let upperBoundIndex: number = 0;\n\n  /** @returns maybe valid lowerBound */\n  const getLowerBound = (\n    index: number,\n  ): [ExcalidrawElement[\"index\"] | undefined, number] => {\n    const lowerBound = elements[lowerBoundIndex]\n      ? elements[lowerBoundIndex].index\n      : undefined;\n\n    // we are already iterating left to right, therefore there is no need for additional looping\n    const candidate = elements[index - 1]?.index;\n\n    if (\n      (!lowerBound && candidate) || // first lowerBound\n      (lowerBound && candidate && candidate > lowerBound) // next lowerBound\n    ) {\n      // WARN: candidate's index could be higher or same as the current element's index\n      return [candidate, index - 1];\n    }\n\n    // cache hit! take the last lower bound\n    return [lowerBound, lowerBoundIndex];\n  };\n\n  /** @returns always valid upperBound */\n  const getUpperBound = (\n    index: number,\n  ): [ExcalidrawElement[\"index\"] | undefined, number] => {\n    const upperBound = elements[upperBoundIndex]\n      ? elements[upperBoundIndex].index\n      : undefined;\n\n    // cache hit! don't let it find the upper bound again\n    if (upperBound && index < upperBoundIndex) {\n      return [upperBound, upperBoundIndex];\n    }\n\n    // set the current upperBoundIndex as the starting point\n    let i = upperBoundIndex;\n    while (++i < elements.length) {\n      const candidate = elements[i]?.index;\n\n      if (\n        (!upperBound && candidate) || // first upperBound\n        (upperBound && candidate && candidate > upperBound) // next upperBound\n      ) {\n        return [candidate, i];\n      }\n    }\n\n    // we reached the end, sky is the limit\n    return [undefined, i];\n  };\n\n  let i = 0;\n\n  while (i < elements.length) {\n    const current = elements[i].index;\n    [lowerBound, lowerBoundIndex] = getLowerBound(i);\n    [upperBound, upperBoundIndex] = getUpperBound(i);\n\n    if (!isValidFractionalIndex(current, lowerBound, upperBound)) {\n      // push the lower bound index as the first item\n      const indicesGroup = [lowerBoundIndex, i];\n\n      while (++i < elements.length) {\n        const current = elements[i].index;\n        const [nextLowerBound, nextLowerBoundIndex] = getLowerBound(i);\n        const [nextUpperBound, nextUpperBoundIndex] = getUpperBound(i);\n\n        if (isValidFractionalIndex(current, nextLowerBound, nextUpperBound)) {\n          break;\n        }\n\n        // assign bounds only for the moved elements\n        [lowerBound, lowerBoundIndex] = [nextLowerBound, nextLowerBoundIndex];\n        [upperBound, upperBoundIndex] = [nextUpperBound, nextUpperBoundIndex];\n\n        indicesGroup.push(i);\n      }\n\n      // push the upper bound index as the last item\n      indicesGroup.push(upperBoundIndex);\n      indicesGroups.push(indicesGroup);\n    } else {\n      i++;\n    }\n  }\n\n  return indicesGroups;\n};\n\nconst isValidFractionalIndex = (\n  index: ExcalidrawElement[\"index\"] | undefined,\n  predecessor: ExcalidrawElement[\"index\"] | undefined,\n  successor: ExcalidrawElement[\"index\"] | undefined,\n) => {\n  if (!index) {\n    return false;\n  }\n\n  if (predecessor && successor) {\n    return predecessor < index && index < successor;\n  }\n\n  if (!predecessor && successor) {\n    // first element\n    return index < successor;\n  }\n\n  if (predecessor && !successor) {\n    // last element\n    return predecessor < index;\n  }\n\n  // only element in the array\n  return !!index;\n};\n\nconst generateIndices = (\n  elements: readonly ExcalidrawElement[],\n  indicesGroups: number[][],\n) => {\n  const elementsUpdates = new Map<\n    ExcalidrawElement,\n    { index: FractionalIndex }\n  >();\n\n  for (const indices of indicesGroups) {\n    const lowerBoundIndex = indices.shift()!;\n    const upperBoundIndex = indices.pop()!;\n\n    const fractionalIndices = generateNKeysBetween(\n      elements[lowerBoundIndex]?.index,\n      elements[upperBoundIndex]?.index,\n      indices.length,\n    ) as FractionalIndex[];\n\n    for (let i = 0; i < indices.length; i++) {\n      const element = elements[indices[i]];\n\n      elementsUpdates.set(element, {\n        index: fractionalIndices[i],\n      });\n    }\n  }\n\n  return elementsUpdates;\n};\n\nconst isOrderedElement = (\n  element: ExcalidrawElement,\n): element is OrderedExcalidrawElement => {\n  // for now it's sufficient whether the index is there\n  // meaning, the element was already ordered in the past\n  // meaning, it is not a newly inserted element, not an unrestored element, etc.\n  // it does not have to mean that the index itself is valid\n  if (element.index) {\n    return true;\n  }\n\n  return false;\n};\n", "// License: CC0 (no rights reserved).\n\n// This is based on https://observablehq.com/@dgreensp/implementing-fractional-indexing\n\nexport const BASE_62_DIGITS =\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n// `a` may be empty string, `b` is null or non-empty string.\n// `a < b` lexicographically if `b` is non-null.\n// no trailing zeros allowed.\n// digits is a string such as '0123456789' for base 10.  Digits must be in\n// ascending character code order!\n/**\n * @param {string} a\n * @param {string | null | undefined} b\n * @param {string} digits\n * @returns {string}\n */\nfunction midpoint(a, b, digits) {\n  const zero = digits[0];\n  if (b != null && a >= b) {\n    throw new Error(a + \" >= \" + b);\n  }\n  if (a.slice(-1) === zero || (b && b.slice(-1) === zero)) {\n    throw new Error(\"trailing zero\");\n  }\n  if (b) {\n    // remove longest common prefix.  pad `a` with 0s as we\n    // go.  note that we don't need to pad `b`, because it can't\n    // end before `a` while traversing the common prefix.\n    let n = 0;\n    while ((a[n] || zero) === b[n]) {\n      n++;\n    }\n    if (n > 0) {\n      return b.slice(0, n) + midpoint(a.slice(n), b.slice(n), digits);\n    }\n  }\n  // first digits (or lack of digit) are different\n  const digitA = a ? digits.indexOf(a[0]) : 0;\n  const digitB = b != null ? digits.indexOf(b[0]) : digits.length;\n  if (digitB - digitA > 1) {\n    const midDigit = Math.round(0.5 * (digitA + digitB));\n    return digits[midDigit];\n  } else {\n    // first digits are consecutive\n    if (b && b.length > 1) {\n      return b.slice(0, 1);\n    } else {\n      // `b` is null or has length 1 (a single digit).\n      // the first digit of `a` is the previous digit to `b`,\n      // or 9 if `b` is null.\n      // given, for example, midpoint('49', '5'), return\n      // '4' + midpoint('9', null), which will become\n      // '4' + '9' + midpoint('', null), which is '495'\n      return digits[digitA] + midpoint(a.slice(1), null, digits);\n    }\n  }\n}\n\n/**\n * @param {string} int\n * @return {void}\n */\n\nfunction validateInteger(int) {\n  if (int.length !== getIntegerLength(int[0])) {\n    throw new Error(\"invalid integer part of order key: \" + int);\n  }\n}\n\n/**\n * @param {string} head\n * @return {number}\n */\n\nfunction getIntegerLength(head) {\n  if (head >= \"a\" && head <= \"z\") {\n    return head.charCodeAt(0) - \"a\".charCodeAt(0) + 2;\n  } else if (head >= \"A\" && head <= \"Z\") {\n    return \"Z\".charCodeAt(0) - head.charCodeAt(0) + 2;\n  } else {\n    throw new Error(\"invalid order key head: \" + head);\n  }\n}\n\n/**\n * @param {string} key\n * @return {string}\n */\n\nfunction getIntegerPart(key) {\n  const integerPartLength = getIntegerLength(key[0]);\n  if (integerPartLength > key.length) {\n    throw new Error(\"invalid order key: \" + key);\n  }\n  return key.slice(0, integerPartLength);\n}\n\n/**\n * @param {string} key\n * @param {string} digits\n * @return {void}\n */\n\nfunction validateOrderKey(key, digits) {\n  if (key === \"A\" + digits[0].repeat(26)) {\n    throw new Error(\"invalid order key: \" + key);\n  }\n  // getIntegerPart will throw if the first character is bad,\n  // or the key is too short.  we'd call it to check these things\n  // even if we didn't need the result\n  const i = getIntegerPart(key);\n  const f = key.slice(i.length);\n  if (f.slice(-1) === digits[0]) {\n    throw new Error(\"invalid order key: \" + key);\n  }\n}\n\n// note that this may return null, as there is a largest integer\n/**\n * @param {string} x\n * @param {string} digits\n * @return {string | null}\n */\nfunction incrementInteger(x, digits) {\n  validateInteger(x);\n  const [head, ...digs] = x.split(\"\");\n  let carry = true;\n  for (let i = digs.length - 1; carry && i >= 0; i--) {\n    const d = digits.indexOf(digs[i]) + 1;\n    if (d === digits.length) {\n      digs[i] = digits[0];\n    } else {\n      digs[i] = digits[d];\n      carry = false;\n    }\n  }\n  if (carry) {\n    if (head === \"Z\") {\n      return \"a\" + digits[0];\n    }\n    if (head === \"z\") {\n      return null;\n    }\n    const h = String.fromCharCode(head.charCodeAt(0) + 1);\n    if (h > \"a\") {\n      digs.push(digits[0]);\n    } else {\n      digs.pop();\n    }\n    return h + digs.join(\"\");\n  } else {\n    return head + digs.join(\"\");\n  }\n}\n\n// note that this may return null, as there is a smallest integer\n/**\n * @param {string} x\n * @param {string} digits\n * @return {string | null}\n */\n\nfunction decrementInteger(x, digits) {\n  validateInteger(x);\n  const [head, ...digs] = x.split(\"\");\n  let borrow = true;\n  for (let i = digs.length - 1; borrow && i >= 0; i--) {\n    const d = digits.indexOf(digs[i]) - 1;\n    if (d === -1) {\n      digs[i] = digits.slice(-1);\n    } else {\n      digs[i] = digits[d];\n      borrow = false;\n    }\n  }\n  if (borrow) {\n    if (head === \"a\") {\n      return \"Z\" + digits.slice(-1);\n    }\n    if (head === \"A\") {\n      return null;\n    }\n    const h = String.fromCharCode(head.charCodeAt(0) - 1);\n    if (h < \"Z\") {\n      digs.push(digits.slice(-1));\n    } else {\n      digs.pop();\n    }\n    return h + digs.join(\"\");\n  } else {\n    return head + digs.join(\"\");\n  }\n}\n\n// `a` is an order key or null (START).\n// `b` is an order key or null (END).\n// `a < b` lexicographically if both are non-null.\n// digits is a string such as '0123456789' for base 10.  Digits must be in\n// ascending character code order!\n/**\n * @param {string | null | undefined} a\n * @param {string | null | undefined} b\n * @param {string=} digits\n * @return {string}\n */\nexport function generateKeyBetween(a, b, digits = BASE_62_DIGITS) {\n  if (a != null) {\n    validateOrderKey(a, digits);\n  }\n  if (b != null) {\n    validateOrderKey(b, digits);\n  }\n  if (a != null && b != null && a >= b) {\n    throw new Error(a + \" >= \" + b);\n  }\n  if (a == null) {\n    if (b == null) {\n      return \"a\" + digits[0];\n    }\n\n    const ib = getIntegerPart(b);\n    const fb = b.slice(ib.length);\n    if (ib === \"A\" + digits[0].repeat(26)) {\n      return ib + midpoint(\"\", fb, digits);\n    }\n    if (ib < b) {\n      return ib;\n    }\n    const res = decrementInteger(ib, digits);\n    if (res == null) {\n      throw new Error(\"cannot decrement any more\");\n    }\n    return res;\n  }\n\n  if (b == null) {\n    const ia = getIntegerPart(a);\n    const fa = a.slice(ia.length);\n    const i = incrementInteger(ia, digits);\n    return i == null ? ia + midpoint(fa, null, digits) : i;\n  }\n\n  const ia = getIntegerPart(a);\n  const fa = a.slice(ia.length);\n  const ib = getIntegerPart(b);\n  const fb = b.slice(ib.length);\n  if (ia === ib) {\n    return ia + midpoint(fa, fb, digits);\n  }\n  const i = incrementInteger(ia, digits);\n  if (i == null) {\n    throw new Error(\"cannot increment any more\");\n  }\n  if (i < b) {\n    return i;\n  }\n  return ia + midpoint(fa, null, digits);\n}\n\n/**\n * same preconditions as generateKeysBetween.\n * n >= 0.\n * Returns an array of n distinct keys in sorted order.\n * If a and b are both null, returns [a0, a1, ...]\n * If one or the other is null, returns consecutive \"integer\"\n * keys.  Otherwise, returns relatively short keys between\n * a and b.\n * @param {string | null | undefined} a\n * @param {string | null | undefined} b\n * @param {number} n\n * @param {string} digits\n * @return {string[]}\n */\nexport function generateNKeysBetween(a, b, n, digits = BASE_62_DIGITS) {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [generateKeyBetween(a, b, digits)];\n  }\n  if (b == null) {\n    let c = generateKeyBetween(a, b, digits);\n    const result = [c];\n    for (let i = 0; i < n - 1; i++) {\n      c = generateKeyBetween(c, b, digits);\n      result.push(c);\n    }\n    return result;\n  }\n  if (a == null) {\n    let c = generateKeyBetween(a, b, digits);\n    const result = [c];\n    for (let i = 0; i < n - 1; i++) {\n      c = generateKeyBetween(a, c, digits);\n      result.push(c);\n    }\n    result.reverse();\n    return result;\n  }\n  const mid = Math.floor(n / 2);\n  const c = generateKeyBetween(a, b, digits);\n  return [\n    ...generateNKeysBetween(a, c, mid, digits),\n    c,\n    ...generateNKeysBetween(c, b, n - mid - 1, digits),\n  ];\n}\n", "import type { ElementOrToolType } from \"@excalidraw/excalidraw/types\";\n\nexport const hasBackground = (type: ElementOrToolType) =>\n  type === \"rectangle\" ||\n  type === \"iframe\" ||\n  type === \"embeddable\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"line\" ||\n  type === \"freedraw\";\n\nexport const hasStrokeColor = (type: ElementOrToolType) =>\n  type !== \"image\" && type !== \"frame\" && type !== \"magicframe\";\n\nexport const hasStrokeWidth = (type: ElementOrToolType) =>\n  type === \"rectangle\" ||\n  type === \"iframe\" ||\n  type === \"embeddable\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"freedraw\" ||\n  type === \"arrow\" ||\n  type === \"line\";\n\nexport const hasStrokeStyle = (type: ElementOrToolType) =>\n  type === \"rectangle\" ||\n  type === \"iframe\" ||\n  type === \"embeddable\" ||\n  type === \"ellipse\" ||\n  type === \"diamond\" ||\n  type === \"arrow\" ||\n  type === \"line\";\n\nexport const canChangeRoundness = (type: ElementOrToolType) =>\n  type === \"rectangle\" ||\n  type === \"iframe\" ||\n  type === \"embeddable\" ||\n  type === \"line\" ||\n  type === \"diamond\" ||\n  type === \"image\";\n\nexport const toolIsArrow = (type: ElementOrToolType) => type === \"arrow\";\n\nexport const canHaveArrowheads = (type: ElementOrToolType) => type === \"arrow\";\n", "import rough from \"roughjs/bin/rough\";\nimport { getStroke } from \"perfect-freehand\";\n\nimport { isRightAngleRads } from \"@excalidraw/math\";\n\nimport {\n  BOUND_TEXT_PADDING,\n  DEFAULT_REDUCED_GLOBAL_ALPHA,\n  ELEMENT_READY_TO_ERASE_OPACITY,\n  FRAME_STYLE,\n  MIME_TYPES,\n  THEME,\n  distance,\n  getFontString,\n  isRTL,\n  getVerticalOffset,\n} from \"@excalidraw/common\";\n\nimport type {\n  AppState,\n  StaticCanvasAppState,\n  Zoom,\n  InteractiveCanvasAppState,\n  ElementsPendingErasure,\n  PendingExcalidrawElements,\n  NormalizedZoomValue,\n} from \"@excalidraw/excalidraw/types\";\n\nimport type {\n  StaticCanvasRenderConfig,\n  RenderableElementsMap,\n  InteractiveCanvasRenderConfig,\n} from \"@excalidraw/excalidraw/scene/types\";\n\nimport { getElementAbsoluteCoords } from \"./bounds\";\nimport { getUncroppedImageElement } from \"./cropElement\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport {\n  getBoundTextElement,\n  getContainerCoords,\n  getContainerElement,\n  getBoundTextMaxHeight,\n  getBoundTextMaxWidth,\n} from \"./textElement\";\nimport { getLineHeightInPx } from \"./textMeasurements\";\nimport {\n  isTextElement,\n  isLinearElement,\n  isFreeDrawElement,\n  isInitializedImageElement,\n  isArrowElement,\n  hasBoundTextElement,\n  isMagicFrameElement,\n  isImageElement,\n} from \"./typeChecks\";\nimport { getContainingFrame } from \"./frame\";\nimport { getCornerRadius } from \"./shapes\";\n\nimport { ShapeCache } from \"./ShapeCache\";\n\nimport type {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  NonDeletedExcalidrawElement,\n  ExcalidrawFreeDrawElement,\n  ExcalidrawImageElement,\n  ExcalidrawTextElementWithContainer,\n  ExcalidrawFrameLikeElement,\n  NonDeletedSceneElementsMap,\n  ElementsMap,\n} from \"./types\";\n\nimport type { StrokeOptions } from \"perfect-freehand\";\nimport type { RoughCanvas } from \"roughjs/bin/canvas\";\n\n// using a stronger invert (100% vs our regular 93%) and saturate\n// as a temp hack to make images in dark theme look closer to original\n// color scheme (it's still not quite there and the colors look slightly\n// desatured, alas...)\nexport const IMAGE_INVERT_FILTER =\n  \"invert(100%) hue-rotate(180deg) saturate(1.25)\";\n\nconst isPendingImageElement = (\n  element: ExcalidrawElement,\n  renderConfig: StaticCanvasRenderConfig,\n) =>\n  isInitializedImageElement(element) &&\n  !renderConfig.imageCache.has(element.fileId);\n\nconst shouldResetImageFilter = (\n  element: ExcalidrawElement,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n) => {\n  return (\n    appState.theme === THEME.DARK &&\n    isInitializedImageElement(element) &&\n    !isPendingImageElement(element, renderConfig) &&\n    renderConfig.imageCache.get(element.fileId)?.mimeType !== MIME_TYPES.svg\n  );\n};\n\nconst getCanvasPadding = (element: ExcalidrawElement) => {\n  switch (element.type) {\n    case \"freedraw\":\n      return element.strokeWidth * 12;\n    case \"text\":\n      return element.fontSize / 2;\n    default:\n      return 20;\n  }\n};\n\nexport const getRenderOpacity = (\n  element: ExcalidrawElement,\n  containingFrame: ExcalidrawFrameLikeElement | null,\n  elementsPendingErasure: ElementsPendingErasure,\n  pendingNodes: Readonly<PendingExcalidrawElements> | null,\n  globalAlpha: number = 1,\n) => {\n  // multiplying frame opacity with element opacity to combine them\n  // (e.g. frame 50% and element 50% opacity should result in 25% opacity)\n  let opacity =\n    (((containingFrame?.opacity ?? 100) * element.opacity) / 10000) *\n    globalAlpha;\n\n  // if pending erasure, multiply again to combine further\n  // (so that erasing always results in lower opacity than original)\n  if (\n    elementsPendingErasure.has(element.id) ||\n    (pendingNodes && pendingNodes.some((node) => node.id === element.id)) ||\n    (containingFrame && elementsPendingErasure.has(containingFrame.id))\n  ) {\n    opacity *= ELEMENT_READY_TO_ERASE_OPACITY / 100;\n  }\n\n  return opacity;\n};\n\nexport interface ExcalidrawElementWithCanvas {\n  element: ExcalidrawElement | ExcalidrawTextElement;\n  canvas: HTMLCanvasElement;\n  theme: AppState[\"theme\"];\n  scale: number;\n  angle: number;\n  zoomValue: AppState[\"zoom\"][\"value\"];\n  canvasOffsetX: number;\n  canvasOffsetY: number;\n  boundTextElementVersion: number | null;\n  imageCrop: ExcalidrawImageElement[\"crop\"] | null;\n  containingFrameOpacity: number;\n  boundTextCanvas: HTMLCanvasElement;\n}\n\nconst cappedElementCanvasSize = (\n  element: NonDeletedExcalidrawElement,\n  elementsMap: ElementsMap,\n  zoom: Zoom,\n): {\n  width: number;\n  height: number;\n  scale: number;\n} => {\n  // these limits are ballpark, they depend on specific browsers and device.\n  // We've chosen lower limits to be safe. We might want to change these limits\n  // based on browser/device type, if we get reports of low quality rendering\n  // on zoom.\n  //\n  // ~ safari mobile canvas area limit\n  const AREA_LIMIT = 16777216;\n  // ~ safari width/height limit based on developer.mozilla.org.\n  const WIDTH_HEIGHT_LIMIT = 32767;\n\n  const padding = getCanvasPadding(element);\n\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n  const elementWidth =\n    isLinearElement(element) || isFreeDrawElement(element)\n      ? distance(x1, x2)\n      : element.width;\n  const elementHeight =\n    isLinearElement(element) || isFreeDrawElement(element)\n      ? distance(y1, y2)\n      : element.height;\n\n  let width = elementWidth * window.devicePixelRatio + padding * 2;\n  let height = elementHeight * window.devicePixelRatio + padding * 2;\n\n  let scale: number = zoom.value;\n\n  // rescale to ensure width and height is within limits\n  if (\n    width * scale > WIDTH_HEIGHT_LIMIT ||\n    height * scale > WIDTH_HEIGHT_LIMIT\n  ) {\n    scale = Math.min(WIDTH_HEIGHT_LIMIT / width, WIDTH_HEIGHT_LIMIT / height);\n  }\n\n  // rescale to ensure canvas area is within limits\n  if (width * height * scale * scale > AREA_LIMIT) {\n    scale = Math.sqrt(AREA_LIMIT / (width * height));\n  }\n\n  width = Math.floor(width * scale);\n  height = Math.floor(height * scale);\n\n  return { width, height, scale };\n};\n\nconst generateElementCanvas = (\n  element: NonDeletedExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap,\n  zoom: Zoom,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n): ExcalidrawElementWithCanvas | null => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\")!;\n  const padding = getCanvasPadding(element);\n\n  const { width, height, scale } = cappedElementCanvasSize(\n    element,\n    elementsMap,\n    zoom,\n  );\n\n  if (!width || !height) {\n    return null;\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n\n  let canvasOffsetX = -100;\n  let canvasOffsetY = 0;\n\n  if (isLinearElement(element) || isFreeDrawElement(element)) {\n    const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);\n\n    canvasOffsetX =\n      element.x > x1\n        ? distance(element.x, x1) * window.devicePixelRatio * scale\n        : 0;\n\n    canvasOffsetY =\n      element.y > y1\n        ? distance(element.y, y1) * window.devicePixelRatio * scale\n        : 0;\n\n    context.translate(canvasOffsetX, canvasOffsetY);\n  }\n\n  context.save();\n  context.translate(padding * scale, padding * scale);\n  context.scale(\n    window.devicePixelRatio * scale,\n    window.devicePixelRatio * scale,\n  );\n\n  const rc = rough.canvas(canvas);\n\n  // in dark theme, revert the image color filter\n  if (shouldResetImageFilter(element, renderConfig, appState)) {\n    context.filter = IMAGE_INVERT_FILTER;\n  }\n\n  drawElementOnCanvas(element, rc, context, renderConfig, appState);\n\n  context.restore();\n\n  const boundTextElement = getBoundTextElement(element, elementsMap);\n  const boundTextCanvas = document.createElement(\"canvas\");\n  const boundTextCanvasContext = boundTextCanvas.getContext(\"2d\")!;\n\n  if (isArrowElement(element) && boundTextElement) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n    // Take max dimensions of arrow canvas so that when canvas is rotated\n    // the arrow doesn't get clipped\n    const maxDim = Math.max(distance(x1, x2), distance(y1, y2));\n    boundTextCanvas.width =\n      maxDim * window.devicePixelRatio * scale + padding * scale * 10;\n    boundTextCanvas.height =\n      maxDim * window.devicePixelRatio * scale + padding * scale * 10;\n    boundTextCanvasContext.translate(\n      boundTextCanvas.width / 2,\n      boundTextCanvas.height / 2,\n    );\n    boundTextCanvasContext.rotate(element.angle);\n    boundTextCanvasContext.drawImage(\n      canvas!,\n      -canvas.width / 2,\n      -canvas.height / 2,\n      canvas.width,\n      canvas.height,\n    );\n\n    const [, , , , boundTextCx, boundTextCy] = getElementAbsoluteCoords(\n      boundTextElement,\n      elementsMap,\n    );\n\n    boundTextCanvasContext.rotate(-element.angle);\n    const offsetX = (boundTextCanvas.width - canvas!.width) / 2;\n    const offsetY = (boundTextCanvas.height - canvas!.height) / 2;\n    const shiftX =\n      boundTextCanvas.width / 2 -\n      (boundTextCx - x1) * window.devicePixelRatio * scale -\n      offsetX -\n      padding * scale;\n\n    const shiftY =\n      boundTextCanvas.height / 2 -\n      (boundTextCy - y1) * window.devicePixelRatio * scale -\n      offsetY -\n      padding * scale;\n    boundTextCanvasContext.translate(-shiftX, -shiftY);\n    // Clear the bound text area\n    boundTextCanvasContext.clearRect(\n      -(boundTextElement.width / 2 + BOUND_TEXT_PADDING) *\n        window.devicePixelRatio *\n        scale,\n      -(boundTextElement.height / 2 + BOUND_TEXT_PADDING) *\n        window.devicePixelRatio *\n        scale,\n      (boundTextElement.width + BOUND_TEXT_PADDING * 2) *\n        window.devicePixelRatio *\n        scale,\n      (boundTextElement.height + BOUND_TEXT_PADDING * 2) *\n        window.devicePixelRatio *\n        scale,\n    );\n  }\n\n  return {\n    element,\n    canvas,\n    theme: appState.theme,\n    scale,\n    zoomValue: zoom.value,\n    canvasOffsetX,\n    canvasOffsetY,\n    boundTextElementVersion:\n      getBoundTextElement(element, elementsMap)?.version || null,\n    containingFrameOpacity:\n      getContainingFrame(element, elementsMap)?.opacity || 100,\n    boundTextCanvas,\n    angle: element.angle,\n    imageCrop: isImageElement(element) ? element.crop : null,\n  };\n};\n\nexport const DEFAULT_LINK_SIZE = 14;\n\nconst IMAGE_PLACEHOLDER_IMG = document.createElement(\"img\");\nIMAGE_PLACEHOLDER_IMG.src = `data:${MIME_TYPES.svg},${encodeURIComponent(\n  `<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"image\" class=\"svg-inline--fa fa-image fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"#888\" d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z\"></path></svg>`,\n)}`;\n\nconst IMAGE_ERROR_PLACEHOLDER_IMG = document.createElement(\"img\");\nIMAGE_ERROR_PLACEHOLDER_IMG.src = `data:${MIME_TYPES.svg},${encodeURIComponent(\n  `<svg viewBox=\"0 0 668 668\" xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2\"><path d=\"M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48ZM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56ZM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.81709 0 0 .81709 124.825 145.825)\"/><path d=\"M256 8C119.034 8 8 119.033 8 256c0 136.967 111.034 248 248 248s248-111.034 248-248S392.967 8 256 8Zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676ZM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676Z\" style=\"fill:#888;fill-rule:nonzero\" transform=\"matrix(.30366 0 0 .30366 506.822 60.065)\"/></svg>`,\n)}`;\n\nconst drawImagePlaceholder = (\n  element: ExcalidrawImageElement,\n  context: CanvasRenderingContext2D,\n) => {\n  context.fillStyle = \"#E7E7E7\";\n  context.fillRect(0, 0, element.width, element.height);\n\n  const imageMinWidthOrHeight = Math.min(element.width, element.height);\n\n  const size = Math.min(\n    imageMinWidthOrHeight,\n    Math.min(imageMinWidthOrHeight * 0.4, 100),\n  );\n\n  context.drawImage(\n    element.status === \"error\"\n      ? IMAGE_ERROR_PLACEHOLDER_IMG\n      : IMAGE_PLACEHOLDER_IMG,\n    element.width / 2 - size / 2,\n    element.height / 2 - size / 2,\n    size,\n    size,\n  );\n};\n\nconst drawElementOnCanvas = (\n  element: NonDeletedExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n) => {\n  switch (element.type) {\n    case \"rectangle\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"diamond\":\n    case \"ellipse\": {\n      context.lineJoin = \"round\";\n      context.lineCap = \"round\";\n      rc.draw(ShapeCache.get(element)!);\n      break;\n    }\n    case \"arrow\":\n    case \"line\": {\n      context.lineJoin = \"round\";\n      context.lineCap = \"round\";\n\n      ShapeCache.get(element)!.forEach((shape) => {\n        rc.draw(shape);\n      });\n      break;\n    }\n    case \"freedraw\": {\n      // Draw directly to canvas\n      context.save();\n      context.fillStyle = element.strokeColor;\n\n      const path = getFreeDrawPath2D(element) as Path2D;\n      const fillShape = ShapeCache.get(element);\n\n      if (fillShape) {\n        rc.draw(fillShape);\n      }\n\n      context.fillStyle = element.strokeColor;\n      context.fill(path);\n\n      context.restore();\n      break;\n    }\n    case \"image\": {\n      const img = isInitializedImageElement(element)\n        ? renderConfig.imageCache.get(element.fileId)?.image\n        : undefined;\n      if (img != null && !(img instanceof Promise)) {\n        if (element.roundness && context.roundRect) {\n          context.beginPath();\n          context.roundRect(\n            0,\n            0,\n            element.width,\n            element.height,\n            getCornerRadius(Math.min(element.width, element.height), element),\n          );\n          context.clip();\n        }\n\n        const { x, y, width, height } = element.crop\n          ? element.crop\n          : {\n              x: 0,\n              y: 0,\n              width: img.naturalWidth,\n              height: img.naturalHeight,\n            };\n\n        context.drawImage(\n          img,\n          x,\n          y,\n          width,\n          height,\n          0 /* hardcoded for the selection box*/,\n          0,\n          element.width,\n          element.height,\n        );\n      } else {\n        drawImagePlaceholder(element, context);\n      }\n      break;\n    }\n    default: {\n      if (isTextElement(element)) {\n        const rtl = isRTL(element.text);\n        const shouldTemporarilyAttach = rtl && !context.canvas.isConnected;\n        if (shouldTemporarilyAttach) {\n          // to correctly render RTL text mixed with LTR, we have to append it\n          // to the DOM\n          document.body.appendChild(context.canvas);\n        }\n        context.canvas.setAttribute(\"dir\", rtl ? \"rtl\" : \"ltr\");\n        context.save();\n        context.font = getFontString(element);\n        context.fillStyle = element.strokeColor;\n        context.textAlign = element.textAlign as CanvasTextAlign;\n\n        // Canvas does not support multiline text by default\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n\n        const horizontalOffset =\n          element.textAlign === \"center\"\n            ? element.width / 2\n            : element.textAlign === \"right\"\n            ? element.width\n            : 0;\n\n        const lineHeightPx = getLineHeightInPx(\n          element.fontSize,\n          element.lineHeight,\n        );\n\n        const verticalOffset = getVerticalOffset(\n          element.fontFamily,\n          element.fontSize,\n          lineHeightPx,\n        );\n\n        for (let index = 0; index < lines.length; index++) {\n          context.fillText(\n            lines[index],\n            horizontalOffset,\n            index * lineHeightPx + verticalOffset,\n          );\n        }\n        context.restore();\n        if (shouldTemporarilyAttach) {\n          context.canvas.remove();\n        }\n      } else {\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n};\n\nexport const elementWithCanvasCache = new WeakMap<\n  ExcalidrawElement,\n  ExcalidrawElementWithCanvas\n>();\n\nconst generateElementWithCanvas = (\n  element: NonDeletedExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n) => {\n  const zoom: Zoom = renderConfig\n    ? appState.zoom\n    : {\n        value: 1 as NormalizedZoomValue,\n      };\n  const prevElementWithCanvas = elementWithCanvasCache.get(element);\n  const shouldRegenerateBecauseZoom =\n    prevElementWithCanvas &&\n    prevElementWithCanvas.zoomValue !== zoom.value &&\n    !appState?.shouldCacheIgnoreZoom;\n  const boundTextElement = getBoundTextElement(element, elementsMap);\n  const boundTextElementVersion = boundTextElement?.version || null;\n  const imageCrop = isImageElement(element) ? element.crop : null;\n\n  const containingFrameOpacity =\n    getContainingFrame(element, elementsMap)?.opacity || 100;\n\n  if (\n    !prevElementWithCanvas ||\n    shouldRegenerateBecauseZoom ||\n    prevElementWithCanvas.theme !== appState.theme ||\n    prevElementWithCanvas.boundTextElementVersion !== boundTextElementVersion ||\n    prevElementWithCanvas.imageCrop !== imageCrop ||\n    prevElementWithCanvas.containingFrameOpacity !== containingFrameOpacity ||\n    // since we rotate the canvas when copying from cached canvas, we don't\n    // regenerate the cached canvas. But we need to in case of labels which are\n    // cached alongside the arrow, and we want the labels to remain unrotated\n    // with respect to the arrow.\n    (isArrowElement(element) &&\n      boundTextElement &&\n      element.angle !== prevElementWithCanvas.angle)\n  ) {\n    const elementWithCanvas = generateElementCanvas(\n      element,\n      elementsMap,\n      zoom,\n      renderConfig,\n      appState,\n    );\n\n    if (!elementWithCanvas) {\n      return null;\n    }\n\n    elementWithCanvasCache.set(element, elementWithCanvas);\n\n    return elementWithCanvas;\n  }\n  return prevElementWithCanvas;\n};\n\nconst drawElementFromCanvas = (\n  elementWithCanvas: ExcalidrawElementWithCanvas,\n  context: CanvasRenderingContext2D,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n  allElementsMap: NonDeletedSceneElementsMap,\n) => {\n  const element = elementWithCanvas.element;\n  const padding = getCanvasPadding(element);\n  const zoom = elementWithCanvas.scale;\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, allElementsMap);\n  const cx = ((x1 + x2) / 2 + appState.scrollX) * window.devicePixelRatio;\n  const cy = ((y1 + y2) / 2 + appState.scrollY) * window.devicePixelRatio;\n\n  context.save();\n  context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n\n  const boundTextElement = getBoundTextElement(element, allElementsMap);\n\n  if (isArrowElement(element) && boundTextElement) {\n    const offsetX =\n      (elementWithCanvas.boundTextCanvas.width -\n        elementWithCanvas.canvas!.width) /\n      2;\n    const offsetY =\n      (elementWithCanvas.boundTextCanvas.height -\n        elementWithCanvas.canvas!.height) /\n      2;\n    context.translate(cx, cy);\n    context.drawImage(\n      elementWithCanvas.boundTextCanvas,\n      (-(x2 - x1) / 2) * window.devicePixelRatio - offsetX / zoom - padding,\n      (-(y2 - y1) / 2) * window.devicePixelRatio - offsetY / zoom - padding,\n      elementWithCanvas.boundTextCanvas.width / zoom,\n      elementWithCanvas.boundTextCanvas.height / zoom,\n    );\n  } else {\n    // we translate context to element center so that rotation and scale\n    // originates from the element center\n    context.translate(cx, cy);\n\n    context.rotate(element.angle);\n\n    if (\n      \"scale\" in elementWithCanvas.element &&\n      !isPendingImageElement(element, renderConfig)\n    ) {\n      context.scale(\n        elementWithCanvas.element.scale[0],\n        elementWithCanvas.element.scale[1],\n      );\n    }\n\n    // revert afterwards we don't have account for it during drawing\n    context.translate(-cx, -cy);\n\n    context.drawImage(\n      elementWithCanvas.canvas!,\n      (x1 + appState.scrollX) * window.devicePixelRatio -\n        (padding * elementWithCanvas.scale) / elementWithCanvas.scale,\n      (y1 + appState.scrollY) * window.devicePixelRatio -\n        (padding * elementWithCanvas.scale) / elementWithCanvas.scale,\n      elementWithCanvas.canvas!.width / elementWithCanvas.scale,\n      elementWithCanvas.canvas!.height / elementWithCanvas.scale,\n    );\n\n    if (\n      import.meta.env.VITE_APP_DEBUG_ENABLE_TEXT_CONTAINER_BOUNDING_BOX ===\n        \"true\" &&\n      hasBoundTextElement(element)\n    ) {\n      const textElement = getBoundTextElement(\n        element,\n        allElementsMap,\n      ) as ExcalidrawTextElementWithContainer;\n      const coords = getContainerCoords(element);\n      context.strokeStyle = \"#c92a2a\";\n      context.lineWidth = 3;\n      context.strokeRect(\n        (coords.x + appState.scrollX) * window.devicePixelRatio,\n        (coords.y + appState.scrollY) * window.devicePixelRatio,\n        getBoundTextMaxWidth(element, textElement) * window.devicePixelRatio,\n        getBoundTextMaxHeight(element, textElement) * window.devicePixelRatio,\n      );\n    }\n  }\n  context.restore();\n\n  // Clear the nested element we appended to the DOM\n};\n\nexport const renderSelectionElement = (\n  element: NonDeletedExcalidrawElement,\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  selectionColor: InteractiveCanvasRenderConfig[\"selectionColor\"],\n) => {\n  context.save();\n  context.translate(element.x + appState.scrollX, element.y + appState.scrollY);\n  context.fillStyle = \"rgba(0, 0, 200, 0.04)\";\n\n  // render from 0.5px offset  to get 1px wide line\n  // https://stackoverflow.com/questions/7530593/html5-canvas-and-line-width/7531540#7531540\n  // TODO can be be improved by offseting to the negative when user selects\n  // from right to left\n  const offset = 0.5 / appState.zoom.value;\n\n  context.fillRect(offset, offset, element.width, element.height);\n  context.lineWidth = 1 / appState.zoom.value;\n  context.strokeStyle = selectionColor;\n  context.strokeRect(offset, offset, element.width, element.height);\n\n  context.restore();\n};\n\nexport const renderElement = (\n  element: NonDeletedExcalidrawElement,\n  elementsMap: RenderableElementsMap,\n  allElementsMap: NonDeletedSceneElementsMap,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  renderConfig: StaticCanvasRenderConfig,\n  appState: StaticCanvasAppState,\n) => {\n  const reduceAlphaForSelection =\n    appState.openDialog?.name === \"elementLinkSelector\" &&\n    !appState.selectedElementIds[element.id] &&\n    !appState.hoveredElementIds[element.id];\n\n  context.globalAlpha = getRenderOpacity(\n    element,\n    getContainingFrame(element, elementsMap),\n    renderConfig.elementsPendingErasure,\n    renderConfig.pendingFlowchartNodes,\n    reduceAlphaForSelection ? DEFAULT_REDUCED_GLOBAL_ALPHA : 1,\n  );\n\n  switch (element.type) {\n    case \"magicframe\":\n    case \"frame\": {\n      if (appState.frameRendering.enabled && appState.frameRendering.outline) {\n        context.save();\n        context.translate(\n          element.x + appState.scrollX,\n          element.y + appState.scrollY,\n        );\n        context.fillStyle = \"rgba(0, 0, 200, 0.04)\";\n\n        context.lineWidth = FRAME_STYLE.strokeWidth / appState.zoom.value;\n        context.strokeStyle = FRAME_STYLE.strokeColor;\n\n        // TODO change later to only affect AI frames\n        if (isMagicFrameElement(element)) {\n          context.strokeStyle =\n            appState.theme === THEME.LIGHT ? \"#7affd7\" : \"#1d8264\";\n        }\n\n        if (FRAME_STYLE.radius && context.roundRect) {\n          context.beginPath();\n          context.roundRect(\n            0,\n            0,\n            element.width,\n            element.height,\n            FRAME_STYLE.radius / appState.zoom.value,\n          );\n          context.stroke();\n          context.closePath();\n        } else {\n          context.strokeRect(0, 0, element.width, element.height);\n        }\n\n        context.restore();\n      }\n      break;\n    }\n    case \"freedraw\": {\n      // TODO investigate if we can do this in situ. Right now we need to call\n      // beforehand because math helpers (such as getElementAbsoluteCoords)\n      // rely on existing shapes\n      ShapeCache.generateElementShape(element, null);\n\n      if (renderConfig.isExporting) {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n        const cx = (x1 + x2) / 2 + appState.scrollX;\n        const cy = (y1 + y2) / 2 + appState.scrollY;\n        const shiftX = (x2 - x1) / 2 - (element.x - x1);\n        const shiftY = (y2 - y1) / 2 - (element.y - y1);\n        context.save();\n        context.translate(cx, cy);\n        context.rotate(element.angle);\n        context.translate(-shiftX, -shiftY);\n        drawElementOnCanvas(element, rc, context, renderConfig, appState);\n        context.restore();\n      } else {\n        const elementWithCanvas = generateElementWithCanvas(\n          element,\n          allElementsMap,\n          renderConfig,\n          appState,\n        );\n        if (!elementWithCanvas) {\n          return;\n        }\n\n        drawElementFromCanvas(\n          elementWithCanvas,\n          context,\n          renderConfig,\n          appState,\n          allElementsMap,\n        );\n      }\n\n      break;\n    }\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\":\n    case \"line\":\n    case \"arrow\":\n    case \"image\":\n    case \"text\":\n    case \"iframe\":\n    case \"embeddable\": {\n      // TODO investigate if we can do this in situ. Right now we need to call\n      // beforehand because math helpers (such as getElementAbsoluteCoords)\n      // rely on existing shapes\n      ShapeCache.generateElementShape(element, renderConfig);\n      if (renderConfig.isExporting) {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n        const cx = (x1 + x2) / 2 + appState.scrollX;\n        const cy = (y1 + y2) / 2 + appState.scrollY;\n        let shiftX = (x2 - x1) / 2 - (element.x - x1);\n        let shiftY = (y2 - y1) / 2 - (element.y - y1);\n        if (isTextElement(element)) {\n          const container = getContainerElement(element, elementsMap);\n          if (isArrowElement(container)) {\n            const boundTextCoords =\n              LinearElementEditor.getBoundTextElementPosition(\n                container,\n                element as ExcalidrawTextElementWithContainer,\n                elementsMap,\n              );\n            shiftX = (x2 - x1) / 2 - (boundTextCoords.x - x1);\n            shiftY = (y2 - y1) / 2 - (boundTextCoords.y - y1);\n          }\n        }\n        context.save();\n        context.translate(cx, cy);\n\n        if (shouldResetImageFilter(element, renderConfig, appState)) {\n          context.filter = \"none\";\n        }\n        const boundTextElement = getBoundTextElement(element, elementsMap);\n\n        if (isArrowElement(element) && boundTextElement) {\n          const tempCanvas = document.createElement(\"canvas\");\n\n          const tempCanvasContext = tempCanvas.getContext(\"2d\")!;\n\n          // Take max dimensions of arrow canvas so that when canvas is rotated\n          // the arrow doesn't get clipped\n          const maxDim = Math.max(distance(x1, x2), distance(y1, y2));\n          const padding = getCanvasPadding(element);\n          tempCanvas.width =\n            maxDim * appState.exportScale + padding * 10 * appState.exportScale;\n          tempCanvas.height =\n            maxDim * appState.exportScale + padding * 10 * appState.exportScale;\n\n          tempCanvasContext.translate(\n            tempCanvas.width / 2,\n            tempCanvas.height / 2,\n          );\n          tempCanvasContext.scale(appState.exportScale, appState.exportScale);\n\n          // Shift the canvas to left most point of the arrow\n          shiftX = element.width / 2 - (element.x - x1);\n          shiftY = element.height / 2 - (element.y - y1);\n\n          tempCanvasContext.rotate(element.angle);\n          const tempRc = rough.canvas(tempCanvas);\n\n          tempCanvasContext.translate(-shiftX, -shiftY);\n\n          drawElementOnCanvas(\n            element,\n            tempRc,\n            tempCanvasContext,\n            renderConfig,\n            appState,\n          );\n\n          tempCanvasContext.translate(shiftX, shiftY);\n\n          tempCanvasContext.rotate(-element.angle);\n\n          // Shift the canvas to center of bound text\n          const [, , , , boundTextCx, boundTextCy] = getElementAbsoluteCoords(\n            boundTextElement,\n            elementsMap,\n          );\n          const boundTextShiftX = (x1 + x2) / 2 - boundTextCx;\n          const boundTextShiftY = (y1 + y2) / 2 - boundTextCy;\n          tempCanvasContext.translate(-boundTextShiftX, -boundTextShiftY);\n\n          // Clear the bound text area\n          tempCanvasContext.clearRect(\n            -boundTextElement.width / 2,\n            -boundTextElement.height / 2,\n            boundTextElement.width,\n            boundTextElement.height,\n          );\n          context.scale(1 / appState.exportScale, 1 / appState.exportScale);\n          context.drawImage(\n            tempCanvas,\n            -tempCanvas.width / 2,\n            -tempCanvas.height / 2,\n            tempCanvas.width,\n            tempCanvas.height,\n          );\n        } else {\n          context.rotate(element.angle);\n\n          if (element.type === \"image\") {\n            // note: scale must be applied *after* rotating\n            context.scale(element.scale[0], element.scale[1]);\n          }\n\n          context.translate(-shiftX, -shiftY);\n          drawElementOnCanvas(element, rc, context, renderConfig, appState);\n        }\n\n        context.restore();\n        // not exporting \u2192 optimized rendering (cache & render from element\n        // canvases)\n      } else {\n        const elementWithCanvas = generateElementWithCanvas(\n          element,\n          allElementsMap,\n          renderConfig,\n          appState,\n        );\n\n        if (!elementWithCanvas) {\n          return;\n        }\n\n        const currentImageSmoothingStatus = context.imageSmoothingEnabled;\n\n        if (\n          // do not disable smoothing during zoom as blurry shapes look better\n          // on low resolution (while still zooming in) than sharp ones\n          !appState?.shouldCacheIgnoreZoom &&\n          // angle is 0 -> always disable smoothing\n          (!element.angle ||\n            // or check if angle is a right angle in which case we can still\n            // disable smoothing without adversely affecting the result\n            // We need less-than comparison because of FP artihmetic\n            isRightAngleRads(element.angle))\n        ) {\n          // Disabling smoothing makes output much sharper, especially for\n          // text. Unless for non-right angles, where the aliasing is really\n          // terrible on Chromium.\n          //\n          // Note that `context.imageSmoothingQuality=\"high\"` has almost\n          // zero effect.\n          //\n          context.imageSmoothingEnabled = false;\n        }\n\n        if (\n          element.id === appState.croppingElementId &&\n          isImageElement(elementWithCanvas.element) &&\n          elementWithCanvas.element.crop !== null\n        ) {\n          context.save();\n          context.globalAlpha = 0.1;\n\n          const uncroppedElementCanvas = generateElementCanvas(\n            getUncroppedImageElement(elementWithCanvas.element, elementsMap),\n            allElementsMap,\n            appState.zoom,\n            renderConfig,\n            appState,\n          );\n\n          if (uncroppedElementCanvas) {\n            drawElementFromCanvas(\n              uncroppedElementCanvas,\n              context,\n              renderConfig,\n              appState,\n              allElementsMap,\n            );\n          }\n\n          context.restore();\n        }\n\n        drawElementFromCanvas(\n          elementWithCanvas,\n          context,\n          renderConfig,\n          appState,\n          allElementsMap,\n        );\n\n        // reset\n        context.imageSmoothingEnabled = currentImageSmoothingStatus;\n      }\n      break;\n    }\n    default: {\n      // @ts-ignore\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n\n  context.globalAlpha = 1;\n};\n\nexport const pathsCache = new WeakMap<ExcalidrawFreeDrawElement, Path2D>([]);\n\nexport function generateFreeDrawShape(element: ExcalidrawFreeDrawElement) {\n  const svgPathData = getFreeDrawSvgPath(element);\n  const path = new Path2D(svgPathData);\n  pathsCache.set(element, path);\n  return path;\n}\n\nexport function getFreeDrawPath2D(element: ExcalidrawFreeDrawElement) {\n  return pathsCache.get(element);\n}\n\nexport function getFreeDrawSvgPath(element: ExcalidrawFreeDrawElement) {\n  // If input points are empty (should they ever be?) return a dot\n  const inputPoints = element.simulatePressure\n    ? element.points\n    : element.points.length\n    ? element.points.map(([x, y], i) => [x, y, element.pressures[i]])\n    : [[0, 0, 0.5]];\n\n  // Consider changing the options for simulated pressure vs real pressure\n  const options: StrokeOptions = {\n    simulatePressure: element.simulatePressure,\n    size: element.strokeWidth * 4.25,\n    thinning: 0.6,\n    smoothing: 0.5,\n    streamline: 0.5,\n    easing: (t) => Math.sin((t * Math.PI) / 2), // https://easings.net/#easeOutSine\n    last: !!element.lastCommittedPoint, // LastCommittedPoint is added on pointerup\n  };\n\n  return getSvgPathFromStroke(getStroke(inputPoints as number[][], options));\n}\n\nfunction med(A: number[], B: number[]) {\n  return [(A[0] + B[0]) / 2, (A[1] + B[1]) / 2];\n}\n\n// Trim SVG path data so number are each two decimal points. This\n// improves SVG exports, and prevents rendering errors on points\n// with long decimals.\nconst TO_FIXED_PRECISION = /(\\s?[A-Z]?,?-?[0-9]*\\.[0-9]{0,2})(([0-9]|e|-)*)/g;\n\nfunction getSvgPathFromStroke(points: number[][]): string {\n  if (!points.length) {\n    return \"\";\n  }\n\n  const max = points.length - 1;\n\n  return points\n    .reduce(\n      (acc, point, i, arr) => {\n        if (i === max) {\n          acc.push(point, med(point, arr[0]), \"L\", arr[0], \"Z\");\n        } else {\n          acc.push(point, med(point, arr[i + 1]));\n        }\n        return acc;\n      },\n      [\"M\", points[0], \"Q\"],\n    )\n    .join(\" \")\n    .replace(TO_FIXED_PRECISION, \"$1\");\n}\n", "function $(e,t,u,x=h=>h){return e*x(.5-t*(.5-u))}function se(e){return[-e[0],-e[1]]}function l(e,t){return[e[0]+t[0],e[1]+t[1]]}function a(e,t){return[e[0]-t[0],e[1]-t[1]]}function b(e,t){return[e[0]*t,e[1]*t]}function he(e,t){return[e[0]/t,e[1]/t]}function R(e){return[e[1],-e[0]]}function B(e,t){return e[0]*t[0]+e[1]*t[1]}function ue(e,t){return e[0]===t[0]&&e[1]===t[1]}function ge(e){return Math.hypot(e[0],e[1])}function de(e){return e[0]*e[0]+e[1]*e[1]}function A(e,t){return de(a(e,t))}function G(e){return he(e,ge(e))}function ie(e,t){return Math.hypot(e[1]-t[1],e[0]-t[0])}function L(e,t,u){let x=Math.sin(u),h=Math.cos(u),y=e[0]-t[0],n=e[1]-t[1],f=y*h-n*x,d=y*x+n*h;return[f+t[0],d+t[1]]}function K(e,t,u){return l(e,b(a(t,e),u))}function ee(e,t,u){return l(e,b(t,u))}var{min:C,PI:xe}=Math,pe=.275,V=xe+1e-4;function ce(e,t={}){let{size:u=16,smoothing:x=.5,thinning:h=.5,simulatePressure:y=!0,easing:n=r=>r,start:f={},end:d={},last:D=!1}=t,{cap:S=!0,easing:j=r=>r*(2-r)}=f,{cap:q=!0,easing:c=r=>--r*r*r+1}=d;if(e.length===0||u<=0)return[];let p=e[e.length-1].runningLength,g=f.taper===!1?0:f.taper===!0?Math.max(u,p):f.taper,T=d.taper===!1?0:d.taper===!0?Math.max(u,p):d.taper,te=Math.pow(u*x,2),_=[],M=[],H=e.slice(0,10).reduce((r,i)=>{let o=i.pressure;if(y){let s=C(1,i.distance/u),W=C(1,1-s);o=C(1,r+(W-r)*(s*pe))}return(r+o)/2},e[0].pressure),m=$(u,h,e[e.length-1].pressure,n),U,X=e[0].vector,z=e[0].point,F=z,O=z,E=F,J=!1;for(let r=0;r<e.length;r++){let{pressure:i}=e[r],{point:o,vector:s,distance:W,runningLength:I}=e[r];if(r<e.length-1&&p-I<3)continue;if(h){if(y){let v=C(1,W/u),Z=C(1,1-v);i=C(1,H+(Z-H)*(v*pe))}m=$(u,h,i,n)}else m=u/2;U===void 0&&(U=m);let le=I<g?j(I/g):1,fe=p-I<T?c((p-I)/T):1;m=Math.max(.01,m*Math.min(le,fe));let re=(r<e.length-1?e[r+1]:e[r]).vector,Y=r<e.length-1?B(s,re):1,be=B(s,X)<0&&!J,ne=Y!==null&&Y<0;if(be||ne){let v=b(R(X),m);for(let Z=1/13,w=0;w<=1;w+=Z)O=L(a(o,v),o,V*w),_.push(O),E=L(l(o,v),o,V*-w),M.push(E);z=O,F=E,ne&&(J=!0);continue}if(J=!1,r===e.length-1){let v=b(R(s),m);_.push(a(o,v)),M.push(l(o,v));continue}let oe=b(R(K(re,s,Y)),m);O=a(o,oe),(r<=1||A(z,O)>te)&&(_.push(O),z=O),E=l(o,oe),(r<=1||A(F,E)>te)&&(M.push(E),F=E),H=i,X=s}let P=e[0].point.slice(0,2),k=e.length>1?e[e.length-1].point.slice(0,2):l(e[0].point,[1,1]),Q=[],N=[];if(e.length===1){if(!(g||T)||D){let r=ee(P,G(R(a(P,k))),-(U||m)),i=[];for(let o=1/13,s=o;s<=1;s+=o)i.push(L(r,P,V*2*s));return i}}else{if(!(g||T&&e.length===1))if(S)for(let i=1/13,o=i;o<=1;o+=i){let s=L(M[0],P,V*o);Q.push(s)}else{let i=a(_[0],M[0]),o=b(i,.5),s=b(i,.51);Q.push(a(P,o),a(P,s),l(P,s),l(P,o))}let r=R(se(e[e.length-1].vector));if(T||g&&e.length===1)N.push(k);else if(q){let i=ee(k,r,m);for(let o=1/29,s=o;s<1;s+=o)N.push(L(i,k,V*3*s))}else N.push(l(k,b(r,m)),l(k,b(r,m*.99)),a(k,b(r,m*.99)),a(k,b(r,m)))}return _.concat(N,M.reverse(),Q)}function me(e,t={}){var q;let{streamline:u=.5,size:x=16,last:h=!1}=t;if(e.length===0)return[];let y=.15+(1-u)*.85,n=Array.isArray(e[0])?e:e.map(({x:c,y:p,pressure:g=.5})=>[c,p,g]);if(n.length===2){let c=n[1];n=n.slice(0,-1);for(let p=1;p<5;p++)n.push(K(n[0],c,p/4))}n.length===1&&(n=[...n,[...l(n[0],[1,1]),...n[0].slice(2)]]);let f=[{point:[n[0][0],n[0][1]],pressure:n[0][2]>=0?n[0][2]:.25,vector:[1,1],distance:0,runningLength:0}],d=!1,D=0,S=f[0],j=n.length-1;for(let c=1;c<n.length;c++){let p=h&&c===j?n[c].slice(0,2):K(S.point,n[c],y);if(ue(S.point,p))continue;let g=ie(p,S.point);if(D+=g,c<j&&!d){if(D<x)continue;d=!0}S={point:p,pressure:n[c][2]>=0?n[c][2]:.5,vector:G(a(S.point,p)),distance:g,runningLength:D},f.push(S)}return f[0].vector=((q=f[1])==null?void 0:q.vector)||[0,0],f}function ae(e,t={}){return ce(me(e,t),t)}var _e=ae;export{_e as default,ae as getStroke,ce as getStrokeOutlinePoints,me as getStrokePoints};\n", "import {\n  type Radians,\n  pointFrom,\n  pointCenter,\n  pointRotateRads,\n  vectorFromPoint,\n  vectorNormalize,\n  vectorSubtract,\n  vectorAdd,\n  vectorScale,\n  pointFromVector,\n  clamp,\n  isCloseTo,\n} from \"@excalidraw/math\";\nimport { type Point } from \"points-on-curve\";\n\nimport {\n  getElementAbsoluteCoords,\n  getResizedElementAbsoluteCoords,\n} from \"./bounds\";\n\nimport type { TransformHandleType } from \"./transformHandles\";\nimport type {\n  ElementsMap,\n  ExcalidrawElement,\n  ExcalidrawImageElement,\n  ImageCrop,\n  NonDeleted,\n} from \"./types\";\n\nexport const MINIMAL_CROP_SIZE = 10;\n\nexport const cropElement = (\n  element: ExcalidrawImageElement,\n  transformHandle: TransformHandleType,\n  naturalWidth: number,\n  naturalHeight: number,\n  pointerX: number,\n  pointerY: number,\n  widthAspectRatio?: number,\n) => {\n  const { width: uncroppedWidth, height: uncroppedHeight } =\n    getUncroppedWidthAndHeight(element);\n\n  const naturalWidthToUncropped = naturalWidth / uncroppedWidth;\n  const naturalHeightToUncropped = naturalHeight / uncroppedHeight;\n\n  const croppedLeft = (element.crop?.x ?? 0) / naturalWidthToUncropped;\n  const croppedTop = (element.crop?.y ?? 0) / naturalHeightToUncropped;\n\n  /**\n   *      uncropped width\n   * *\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013*\n   * |     (x,y) (natural)    |\n   * |       *\u2013\u2013\u2013\u2013\u2013\u2013\u2013*        |\n   * |       |///////| height | uncropped height\n   * |       *\u2013\u2013\u2013\u2013\u2013\u2013\u2013*        |\n   * |    width (natural)     |\n   * *\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013*\n   */\n\n  const rotatedPointer = pointRotateRads(\n    pointFrom(pointerX, pointerY),\n    pointFrom(element.x + element.width / 2, element.y + element.height / 2),\n    -element.angle as Radians,\n  );\n\n  pointerX = rotatedPointer[0];\n  pointerY = rotatedPointer[1];\n\n  let nextWidth = element.width;\n  let nextHeight = element.height;\n\n  let crop: ImageCrop | null = element.crop ?? {\n    x: 0,\n    y: 0,\n    width: naturalWidth,\n    height: naturalHeight,\n    naturalWidth,\n    naturalHeight,\n  };\n\n  const previousCropHeight = crop.height;\n  const previousCropWidth = crop.width;\n\n  const isFlippedByX = element.scale[0] === -1;\n  const isFlippedByY = element.scale[1] === -1;\n\n  let changeInHeight = pointerY - element.y;\n  let changeInWidth = pointerX - element.x;\n\n  if (transformHandle.includes(\"n\")) {\n    nextHeight = clamp(\n      element.height - changeInHeight,\n      MINIMAL_CROP_SIZE,\n      isFlippedByY ? uncroppedHeight - croppedTop : element.height + croppedTop,\n    );\n  }\n\n  if (transformHandle.includes(\"s\")) {\n    changeInHeight = pointerY - element.y - element.height;\n    nextHeight = clamp(\n      element.height + changeInHeight,\n      MINIMAL_CROP_SIZE,\n      isFlippedByY ? element.height + croppedTop : uncroppedHeight - croppedTop,\n    );\n  }\n\n  if (transformHandle.includes(\"e\")) {\n    changeInWidth = pointerX - element.x - element.width;\n\n    nextWidth = clamp(\n      element.width + changeInWidth,\n      MINIMAL_CROP_SIZE,\n      isFlippedByX ? element.width + croppedLeft : uncroppedWidth - croppedLeft,\n    );\n  }\n\n  if (transformHandle.includes(\"w\")) {\n    nextWidth = clamp(\n      element.width - changeInWidth,\n      MINIMAL_CROP_SIZE,\n      isFlippedByX ? uncroppedWidth - croppedLeft : element.width + croppedLeft,\n    );\n  }\n\n  const updateCropWidthAndHeight = (crop: ImageCrop) => {\n    crop.height = nextHeight * naturalHeightToUncropped;\n    crop.width = nextWidth * naturalWidthToUncropped;\n  };\n\n  updateCropWidthAndHeight(crop);\n\n  const adjustFlipForHandle = (\n    handle: TransformHandleType,\n    crop: ImageCrop,\n  ) => {\n    updateCropWidthAndHeight(crop);\n    if (handle.includes(\"n\")) {\n      if (!isFlippedByY) {\n        crop.y += previousCropHeight - crop.height;\n      }\n    }\n    if (handle.includes(\"s\")) {\n      if (isFlippedByY) {\n        crop.y += previousCropHeight - crop.height;\n      }\n    }\n    if (handle.includes(\"e\")) {\n      if (isFlippedByX) {\n        crop.x += previousCropWidth - crop.width;\n      }\n    }\n    if (handle.includes(\"w\")) {\n      if (!isFlippedByX) {\n        crop.x += previousCropWidth - crop.width;\n      }\n    }\n  };\n\n  switch (transformHandle) {\n    case \"n\": {\n      if (widthAspectRatio) {\n        const distanceToLeft = croppedLeft + element.width / 2;\n        const distanceToRight =\n          uncroppedWidth - croppedLeft - element.width / 2;\n\n        const MAX_WIDTH = Math.min(distanceToLeft, distanceToRight) * 2;\n\n        nextWidth = clamp(\n          nextHeight * widthAspectRatio,\n          MINIMAL_CROP_SIZE,\n          MAX_WIDTH,\n        );\n        nextHeight = nextWidth / widthAspectRatio;\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n\n      if (widthAspectRatio) {\n        crop.x += (previousCropWidth - crop.width) / 2;\n      }\n\n      break;\n    }\n    case \"s\": {\n      if (widthAspectRatio) {\n        const distanceToLeft = croppedLeft + element.width / 2;\n        const distanceToRight =\n          uncroppedWidth - croppedLeft - element.width / 2;\n\n        const MAX_WIDTH = Math.min(distanceToLeft, distanceToRight) * 2;\n\n        nextWidth = clamp(\n          nextHeight * widthAspectRatio,\n          MINIMAL_CROP_SIZE,\n          MAX_WIDTH,\n        );\n        nextHeight = nextWidth / widthAspectRatio;\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n\n      if (widthAspectRatio) {\n        crop.x += (previousCropWidth - crop.width) / 2;\n      }\n\n      break;\n    }\n    case \"w\": {\n      if (widthAspectRatio) {\n        const distanceToTop = croppedTop + element.height / 2;\n        const distanceToBottom =\n          uncroppedHeight - croppedTop - element.height / 2;\n\n        const MAX_HEIGHT = Math.min(distanceToTop, distanceToBottom) * 2;\n\n        nextHeight = clamp(\n          nextWidth / widthAspectRatio,\n          MINIMAL_CROP_SIZE,\n          MAX_HEIGHT,\n        );\n        nextWidth = nextHeight * widthAspectRatio;\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n\n      if (widthAspectRatio) {\n        crop.y += (previousCropHeight - crop.height) / 2;\n      }\n\n      break;\n    }\n    case \"e\": {\n      if (widthAspectRatio) {\n        const distanceToTop = croppedTop + element.height / 2;\n        const distanceToBottom =\n          uncroppedHeight - croppedTop - element.height / 2;\n\n        const MAX_HEIGHT = Math.min(distanceToTop, distanceToBottom) * 2;\n\n        nextHeight = clamp(\n          nextWidth / widthAspectRatio,\n          MINIMAL_CROP_SIZE,\n          MAX_HEIGHT,\n        );\n        nextWidth = nextHeight * widthAspectRatio;\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n\n      if (widthAspectRatio) {\n        crop.y += (previousCropHeight - crop.height) / 2;\n      }\n\n      break;\n    }\n    case \"ne\": {\n      if (widthAspectRatio) {\n        if (changeInWidth > -changeInHeight) {\n          const MAX_HEIGHT = isFlippedByY\n            ? uncroppedHeight - croppedTop\n            : croppedTop + element.height;\n\n          nextHeight = clamp(\n            nextWidth / widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_HEIGHT,\n          );\n          nextWidth = nextHeight * widthAspectRatio;\n        } else {\n          const MAX_WIDTH = isFlippedByX\n            ? croppedLeft + element.width\n            : uncroppedWidth - croppedLeft;\n\n          nextWidth = clamp(\n            nextHeight * widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_WIDTH,\n          );\n          nextHeight = nextWidth / widthAspectRatio;\n        }\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n      break;\n    }\n    case \"nw\": {\n      if (widthAspectRatio) {\n        if (changeInWidth < changeInHeight) {\n          const MAX_HEIGHT = isFlippedByY\n            ? uncroppedHeight - croppedTop\n            : croppedTop + element.height;\n          nextHeight = clamp(\n            nextWidth / widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_HEIGHT,\n          );\n          nextWidth = nextHeight * widthAspectRatio;\n        } else {\n          const MAX_WIDTH = isFlippedByX\n            ? uncroppedWidth - croppedLeft\n            : croppedLeft + element.width;\n\n          nextWidth = clamp(\n            nextHeight * widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_WIDTH,\n          );\n          nextHeight = nextWidth / widthAspectRatio;\n        }\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n      break;\n    }\n    case \"se\": {\n      if (widthAspectRatio) {\n        if (changeInWidth > changeInHeight) {\n          const MAX_HEIGHT = isFlippedByY\n            ? croppedTop + element.height\n            : uncroppedHeight - croppedTop;\n\n          nextHeight = clamp(\n            nextWidth / widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_HEIGHT,\n          );\n          nextWidth = nextHeight * widthAspectRatio;\n        } else {\n          const MAX_WIDTH = isFlippedByX\n            ? croppedLeft + element.width\n            : uncroppedWidth - croppedLeft;\n\n          nextWidth = clamp(\n            nextHeight * widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_WIDTH,\n          );\n          nextHeight = nextWidth / widthAspectRatio;\n        }\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n      break;\n    }\n    case \"sw\": {\n      if (widthAspectRatio) {\n        if (-changeInWidth > changeInHeight) {\n          const MAX_HEIGHT = isFlippedByY\n            ? croppedTop + element.height\n            : uncroppedHeight - croppedTop;\n\n          nextHeight = clamp(\n            nextWidth / widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_HEIGHT,\n          );\n          nextWidth = nextHeight * widthAspectRatio;\n        } else {\n          const MAX_WIDTH = isFlippedByX\n            ? uncroppedWidth - croppedLeft\n            : croppedLeft + element.width;\n\n          nextWidth = clamp(\n            nextHeight * widthAspectRatio,\n            MINIMAL_CROP_SIZE,\n            MAX_WIDTH,\n          );\n          nextHeight = nextWidth / widthAspectRatio;\n        }\n      }\n\n      adjustFlipForHandle(transformHandle, crop);\n      break;\n    }\n    default:\n      break;\n  }\n\n  const newOrigin = recomputeOrigin(\n    element,\n    transformHandle,\n    nextWidth,\n    nextHeight,\n    !!widthAspectRatio,\n  );\n\n  // reset crop to null if we're back to orig size\n  if (\n    isCloseTo(crop.width, crop.naturalWidth) &&\n    isCloseTo(crop.height, crop.naturalHeight)\n  ) {\n    crop = null;\n  }\n\n  return {\n    x: newOrigin[0],\n    y: newOrigin[1],\n    width: nextWidth,\n    height: nextHeight,\n    crop,\n  };\n};\n\nconst recomputeOrigin = (\n  stateAtCropStart: NonDeleted<ExcalidrawElement>,\n  transformHandle: TransformHandleType,\n  width: number,\n  height: number,\n  shouldMaintainAspectRatio?: boolean,\n) => {\n  const [x1, y1, x2, y2] = getResizedElementAbsoluteCoords(\n    stateAtCropStart,\n    stateAtCropStart.width,\n    stateAtCropStart.height,\n    true,\n  );\n  const startTopLeft = pointFrom(x1, y1);\n  const startBottomRight = pointFrom(x2, y2);\n  const startCenter: any = pointCenter(startTopLeft, startBottomRight);\n\n  const [newBoundsX1, newBoundsY1, newBoundsX2, newBoundsY2] =\n    getResizedElementAbsoluteCoords(stateAtCropStart, width, height, true);\n  const newBoundsWidth = newBoundsX2 - newBoundsX1;\n  const newBoundsHeight = newBoundsY2 - newBoundsY1;\n\n  // Calculate new topLeft based on fixed corner during resize\n  let newTopLeft = [...startTopLeft] as [number, number];\n\n  if ([\"n\", \"w\", \"nw\"].includes(transformHandle)) {\n    newTopLeft = [\n      startBottomRight[0] - Math.abs(newBoundsWidth),\n      startBottomRight[1] - Math.abs(newBoundsHeight),\n    ];\n  }\n  if (transformHandle === \"ne\") {\n    const bottomLeft = [startTopLeft[0], startBottomRight[1]];\n    newTopLeft = [bottomLeft[0], bottomLeft[1] - Math.abs(newBoundsHeight)];\n  }\n  if (transformHandle === \"sw\") {\n    const topRight = [startBottomRight[0], startTopLeft[1]];\n    newTopLeft = [topRight[0] - Math.abs(newBoundsWidth), topRight[1]];\n  }\n\n  if (shouldMaintainAspectRatio) {\n    if ([\"s\", \"n\"].includes(transformHandle)) {\n      newTopLeft[0] = startCenter[0] - newBoundsWidth / 2;\n    }\n    if ([\"e\", \"w\"].includes(transformHandle)) {\n      newTopLeft[1] = startCenter[1] - newBoundsHeight / 2;\n    }\n  }\n\n  // adjust topLeft to new rotation point\n  const angle = stateAtCropStart.angle;\n  const rotatedTopLeft = pointRotateRads(newTopLeft, startCenter, angle);\n  const newCenter: Point = [\n    newTopLeft[0] + Math.abs(newBoundsWidth) / 2,\n    newTopLeft[1] + Math.abs(newBoundsHeight) / 2,\n  ];\n  const rotatedNewCenter = pointRotateRads(newCenter, startCenter, angle);\n  newTopLeft = pointRotateRads(\n    rotatedTopLeft,\n    rotatedNewCenter,\n    -angle as Radians,\n  );\n\n  const newOrigin = [...newTopLeft];\n  newOrigin[0] += stateAtCropStart.x - newBoundsX1;\n  newOrigin[1] += stateAtCropStart.y - newBoundsY1;\n\n  return newOrigin;\n};\n\n// refer to https://link.excalidraw.com/l/6rfy1007QOo/6stx5PmRn0k\nexport const getUncroppedImageElement = (\n  element: ExcalidrawImageElement,\n  elementsMap: ElementsMap,\n) => {\n  if (element.crop) {\n    const { width, height } = getUncroppedWidthAndHeight(element);\n\n    const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n      element,\n      elementsMap,\n    );\n\n    const topLeftVector = vectorFromPoint(\n      pointRotateRads(pointFrom(x1, y1), pointFrom(cx, cy), element.angle),\n    );\n    const topRightVector = vectorFromPoint(\n      pointRotateRads(pointFrom(x2, y1), pointFrom(cx, cy), element.angle),\n    );\n    const topEdgeNormalized = vectorNormalize(\n      vectorSubtract(topRightVector, topLeftVector),\n    );\n    const bottomLeftVector = vectorFromPoint(\n      pointRotateRads(pointFrom(x1, y2), pointFrom(cx, cy), element.angle),\n    );\n    const leftEdgeVector = vectorSubtract(bottomLeftVector, topLeftVector);\n    const leftEdgeNormalized = vectorNormalize(leftEdgeVector);\n\n    const { cropX, cropY } = adjustCropPosition(element.crop, element.scale);\n\n    const rotatedTopLeft = vectorAdd(\n      vectorAdd(\n        topLeftVector,\n        vectorScale(\n          topEdgeNormalized,\n          (-cropX * width) / element.crop.naturalWidth,\n        ),\n      ),\n      vectorScale(\n        leftEdgeNormalized,\n        (-cropY * height) / element.crop.naturalHeight,\n      ),\n    );\n\n    const center = pointFromVector(\n      vectorAdd(\n        vectorAdd(rotatedTopLeft, vectorScale(topEdgeNormalized, width / 2)),\n        vectorScale(leftEdgeNormalized, height / 2),\n      ),\n    );\n\n    const unrotatedTopLeft = pointRotateRads(\n      pointFromVector(rotatedTopLeft),\n      center,\n      -element.angle as Radians,\n    );\n\n    const uncroppedElement: ExcalidrawImageElement = {\n      ...element,\n      x: unrotatedTopLeft[0],\n      y: unrotatedTopLeft[1],\n      width,\n      height,\n      crop: null,\n    };\n\n    return uncroppedElement;\n  }\n\n  return element;\n};\n\nexport const getUncroppedWidthAndHeight = (element: ExcalidrawImageElement) => {\n  if (element.crop) {\n    const width =\n      element.width / (element.crop.width / element.crop.naturalWidth);\n    const height =\n      element.height / (element.crop.height / element.crop.naturalHeight);\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  return {\n    width: element.width,\n    height: element.height,\n  };\n};\n\nconst adjustCropPosition = (\n  crop: ImageCrop,\n  scale: ExcalidrawImageElement[\"scale\"],\n) => {\n  let cropX = crop.x;\n  let cropY = crop.y;\n\n  const flipX = scale[0] === -1;\n  const flipY = scale[1] === -1;\n\n  if (flipX) {\n    cropX = crop.naturalWidth - Math.abs(cropX) - crop.width;\n  }\n\n  if (flipY) {\n    cropY = crop.naturalHeight - Math.abs(cropY) - crop.height;\n  }\n\n  return {\n    cropX,\n    cropY,\n  };\n};\n\nexport const getFlipAdjustedCropPosition = (\n  element: ExcalidrawImageElement,\n  natural = false,\n) => {\n  const crop = element.crop;\n  if (!crop) {\n    return null;\n  }\n\n  const isFlippedByX = element.scale[0] === -1;\n  const isFlippedByY = element.scale[1] === -1;\n\n  let cropX = crop.x;\n  let cropY = crop.y;\n\n  if (isFlippedByX) {\n    cropX = crop.naturalWidth - crop.width - crop.x;\n  }\n\n  if (isFlippedByY) {\n    cropY = crop.naturalHeight - crop.height - crop.y;\n  }\n\n  if (natural) {\n    return {\n      x: cropX,\n      y: cropY,\n    };\n  }\n\n  const { width, height } = getUncroppedWidthAndHeight(element);\n\n  return {\n    x: cropX / (crop.naturalWidth / width),\n    y: cropY / (crop.naturalHeight / height),\n  };\n};\n"],
  "mappings": "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AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,MAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,OAAS;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,QAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,QAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,MAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,MAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,MAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,OAAS;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,MAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,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",
  "names": ["l", "Promise", "sanitizeUrl", "result", "throttle", "a", "b", "a", "b", "line", "polygon", "ae", "ce", "helper", "line", "line", "helper", "line", "helper", "line", "helper", "line", "helper", "curve", "r1", "r2", "line", "rectangle", "random", "b", "b", "a", "b", "distance", "distance", "line", "rectangle", "distance", "a", "b", "selectGroupsForSelectedElements", "throttle", "distance", "A", "B", "arrowheadPoints", "options", "distance", "x3", "y3", "x4", "y4"]
}
